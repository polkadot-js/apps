// Copyright 2017-2022 @polkadot/apps-config authors & contributors
// SPDX-License-Identifier: Apache-2.0

// Do not edit, auto-generated by @polkadot/apps-config

import type { OverrideBundleType } from '@polkadot/types/types';

/* eslint-disable quotes */
/* eslint-disable quote-props */
/* eslint-disable sort-keys */

export const typesBundle = {
  "spec": {
    "Crab": {
      "alias": {},
      "rpc": {},
      "types": [
        {
          "minmax": [
            0,
            0
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "H512",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "AccountId",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithCommission",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parent_hash": "H256",
              "timestamp": "u64",
              "number": "EthBlockNumber",
              "author": "EthAddress",
              "transaction_root": "H256",
              "uncles_hash": "H256",
              "extra_data": "Bytes",
              "state_root": "H256",
              "receipts_root": "H256",
              "log_bloom": "Bloom",
              "gas_used": "U256",
              "gas_limit": "U256",
              "difficulty": "U256",
              "seal": "Vec<Bytes>",
              "hash": "Option<H256>"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": 0,
                "NonTransfer": 1,
                "Governance": 2,
                "Staking": 3,
                "UnusedSudoBalances": 4,
                "IdentityJudgement": 5,
                "CancelProxy": 6,
                "Auction": 7
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "CompactAssignments": "CompactAssignmentsWith16",
            "RawSolution": "RawSolutionWith16",
            "Keys": "SessionKeys4",
            "AccountInfo": "AccountInfoWithRefCount",
            "LookupSource": "AccountId",
            "StakingBalanceT": {
              "_enum": {
                "RingBalance": "Balance",
                "KtonBalance": "Balance"
              }
            },
            "NominatorIndexCompact": "u32",
            "ValidatorIndexCompact": "u16",
            "OffchainAccuracyCompact": "PerU16",
            "PerU16": "UInt<16, PerU16>",
            "EthBlockNumber": "u64",
            "DoubleNodeWithMerkleProof": {
              "dag_nodes": "[H512;2]",
              "proof": "Vec<H128>"
            },
            "OtherSignature": {
              "_enum": {
                "Eth": "EcdsaSignature",
                "Tron": "EcdsaSignature"
              }
            },
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            1,
            41
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "H512",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "AccountId",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithCommission",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parent_hash": "H256",
              "timestamp": "u64",
              "number": "EthBlockNumber",
              "author": "EthAddress",
              "transaction_root": "H256",
              "uncles_hash": "H256",
              "extra_data": "Bytes",
              "state_root": "H256",
              "receipts_root": "H256",
              "log_bloom": "Bloom",
              "gas_used": "U256",
              "gas_limit": "U256",
              "difficulty": "U256",
              "seal": "Vec<Bytes>",
              "hash": "Option<H256>"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": 0,
                "NonTransfer": 1,
                "Governance": 2,
                "Staking": 3,
                "UnusedSudoBalances": 4,
                "IdentityJudgement": 5,
                "CancelProxy": 6,
                "Auction": 7
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "CompactAssignments": "CompactAssignmentsWith16",
            "RawSolution": "RawSolutionWith16",
            "Keys": "SessionKeys4",
            "AccountInfo": "AccountInfoWithRefCount",
            "LookupSource": "AccountId",
            "StakingBalanceT": {
              "_enum": {
                "RingBalance": "Balance",
                "KtonBalance": "Balance"
              }
            },
            "EthereumRelayHeaderParcel": {
              "header": "EthereumHeader",
              "mmrRoot": "H256"
            },
            "OtherSignature": {
              "_enum": {
                "Eth": "EcdsaSignature",
                "Tron": "EcdsaSignature"
              }
            },
            "EthereumReceiptProofThing": "(EthereumHeader, EthereumReceiptProof, MMRProof)",
            "EthereumHeader": {
              "parentHash": "H256",
              "timestamp": "u64",
              "number": "EthereumBlockNumber",
              "author": "EthereumAddress",
              "transactionsRoot": "H256",
              "unclesHash": "H256",
              "extraData": "Bytes",
              "stateRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "gasUsed": "U256",
              "gasLimit": "U256",
              "difficulty": "U256",
              "seal": "Vec<Bytes>",
              "hash": "Option<H256>"
            },
            "NominatorIndexCompact": "u32",
            "ValidatorIndexCompact": "u16",
            "OffchainAccuracyCompact": "PerU16",
            "PerU16": "UInt<16, PerU16>",
            "DoubleNodeWithMerkleProof": {
              "dag_nodes": "[H512;2]",
              "proof": "Vec<H128>"
            },
            "EthBlockNumber": "u64",
            "TcBlockNumber": "u64",
            "GameId": "TcBlockNumber",
            "EthereumHeaderThingWithProof": {
              "header": "EthereumHeader",
              "ethashProof": "Vec<EthashProof>",
              "mmrRoot": "H256",
              "mmrProof": "Vec<H256>"
            },
            "EthereumHeaderThing": {
              "header": "EthereumHeader",
              "mmrRoot": "H256"
            },
            "RawHeaderThing": "Vec<u8>",
            "OtherAddress": {
              "_enum": {
                "Eth": "EthereumAddress",
                "Tron": "EthereumAddress"
              }
            },
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            42,
            43
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "H512",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "MultiAddress",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": 0,
                "NonTransfer": 1,
                "Governance": 2,
                "Staking": 3,
                "UnusedSudoBalances": 4,
                "IdentityJudgement": 5,
                "CancelProxy": 6,
                "Auction": 7
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "CompactAssignments": "CompactAssignmentsWith16",
            "RawSolution": "RawSolutionWith16",
            "Keys": "SessionKeys4",
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "AccountInfoWithTripleRefCount": {
              "nonce": "Index",
              "consumers": "RefCount",
              "providers": "RefCount",
              "data": "AccountData"
            },
            "StakingBalanceT": {
              "_enum": {
                "RingBalance": "Balance",
                "KtonBalance": "Balance"
              }
            },
            "LookupSource": "MultiAddress",
            "OtherSignature": {
              "_enum": {
                "Eth": "EcdsaSignature",
                "Tron": "EcdsaSignature"
              }
            },
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            44,
            1210
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": 0,
                "NonTransfer": 1,
                "Governance": 2,
                "Staking": 3,
                "UnusedSudoBalances": 4,
                "IdentityJudgement": 5,
                "CancelProxy": 6,
                "Auction": 7
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "CompactAssignments": "CompactAssignmentsWith16",
            "RawSolution": "RawSolutionWith16",
            "Keys": "SessionKeys6",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            1211,
            null
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        }
      ]
    },
    "Darwinia": {
      "alias": {},
      "rpc": {},
      "types": [
        {
          "minmax": [
            0,
            22
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            23,
            24
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "AccountInfoWithTripleRefCount": {
              "nonce": "Index",
              "consumers": "RefCount",
              "providers": "RefCount",
              "data": "AccountData"
            },
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            25,
            1150
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": "{}",
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "moment": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "(H512, H512)",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "MultiAddress",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "EthereumBlockNumber",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "LookupSource": "MultiAddress",
            "MultiAddress": "GenericMultiAddress",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "EthereumReceipt": {
              "gasUsed": "U256",
              "logBloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "Order": {
              "lane": "LaneId",
              "message": "MessageNonce",
              "sent_time": "BlockNumber",
              "confirm_time": "BlockNumber",
              "assigned_relayers": "Vec<PriorRelayer>"
            },
            "RelayAuthorityT": {
              "accountId": "AccountId",
              "signer": "EthereumAddress",
              "stake": "Balance",
              "term": "BlockNumber"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            1160,
            1200
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            1210,
            null
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        }
      ]
    },
    "Darwinia Crab PC2": {
      "alias": {},
      "rpc": {},
      "types": [
        {
          "minmax": [
            0,
            28110
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            28140,
            null
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        }
      ]
    },
    "Darwinia PC2": {
      "alias": {},
      "rpc": {},
      "types": [
        {
          "minmax": [
            0,
            28110
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            28140,
            null
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        }
      ]
    },
    "Equilibrium": {
      "instances": {
        "balances": [
          "Eq",
          "Eth",
          "Btc",
          "Eos",
          "Dot",
          "Crv",
          "Usd"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            264
          ],
          "types": {
            "AccountInfo": {
              "nonce": "Index",
              "consumers": "RefCount",
              "providers": "RefCount"
            },
            "Address": "AccountId",
            "Asset": "Currency",
            "AssetMetrics": {
              "period_start": "Duration",
              "period_end": "Duration",
              "returns": "Vec<FixedNumber>",
              "volatility": "FixedNumber",
              "correlations": "Vec<(Asset, FixedNumber)>"
            },
            "Balance": "u64",
            "BalanceOf": "Balance",
            "BalancesAggregate": {
              "total_issuance": "Balance",
              "total_debt": "Balance"
            },
            "BlockNumber": "u64",
            "CapVec": {
              "head_index": "u32",
              "len_cap": "u32",
              "items": "Vec<FixedNumber>"
            },
            "ChainId": "u8",
            "Currency": {
              "_enum": [
                "Unknown",
                "Usd",
                "Eq",
                "Eth",
                "Btc",
                "Eos",
                "Dot",
                "Crv"
              ]
            },
            "DataPoint": {
              "price": "u64",
              "account_id": "AccountId",
              "block_number": "BlockNumber",
              "timestamp": "u64"
            },
            "DepositNonce": "u64",
            "Duration": {
              "secs": "u64",
              "nanos": "u32"
            },
            "FinancialMetrics": {
              "period_start": "Duration",
              "period_end": "Duration",
              "assets": "Vec<Asset>",
              "mean_returns": "Vec<FixedNumber>",
              "volatilities": "Vec<FixedNumber>",
              "correlations": "Vec<FixedNumber>",
              "covariances": "Vec<FixedNumber>"
            },
            "FixedI64": "i64",
            "FixedNumber": "u128",
            "Keys": "SessionKeys3",
            "LookupSource": "AccountId",
            "OperationRequest": {
              "account": "AccountId",
              "authority_index": "AuthIndex",
              "validators_len": "u32",
              "block_num": "BlockNumber"
            },
            "PortfolioMetrics": {
              "period_start": "Duration",
              "period_end": "Duration",
              "z_score": "u32",
              "volatility": "FixedNumber",
              "value_at_risk": "FixedNumber"
            },
            "Price": "u128",
            "PriceLog": {
              "latest_timestamp": "Duration",
              "prices": "CapVec<Price>"
            },
            "PricePayload": "Data",
            "PricePeriod": {
              "_enum": [
                "Min",
                "TenMin",
                "Hour",
                "FourHour",
                "Day"
              ]
            },
            "PricePoint": {
              "block_number": "BlockNumber",
              "timestamp": "u64",
              "price": "u64",
              "data_points": "Vec<DataPoint>"
            },
            "PriceUpdate": {
              "period_start": "Duration",
              "time": "Duration",
              "price": "FixedNumber"
            },
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "ProposalStatus",
              "expiry": "BlockNumber"
            },
            "ResourceId": "[u8; 32]",
            "SignedBalance": {
              "_enum": {
                "Positive": "Balance",
                "Negative": "Balance"
              }
            },
            "SubAccType": {
              "_enum": [
                "Bailsman",
                "Borrower",
                "Lender"
              ]
            },
            "TotalAggregates": {
              "collateral": "Balance",
              "debt": "Balance"
            },
            "TransferReason": {
              "_enum": [
                "Common",
                "InterestFee",
                "MarginCall",
                "LiquidityFarming",
                "BailsmenRedistribution",
                "TreasuryEqBuyout",
                "TreasuryBuyEq",
                "Subaccount",
                "Lock"
              ]
            },
            "UserGroup": {
              "_enum": [
                "Unknown",
                "Balances",
                "Bailsmen",
                "Borrowers",
                "Lenders"
              ]
            },
            "VestingInfo": {
              "locked": "Balance",
              "perBlock": "Balance",
              "startingBlock": "BlockNumber"
            }
          }
        },
        {
          "minmax": [
            265,
            null
          ],
          "types": {}
        }
      ]
    },
    "Genshiro": {
      "instances": {
        "balances": [
          "Eq",
          "Eth",
          "Btc",
          "Eos",
          "Dot",
          "Crv",
          "Usd"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountInfo": {
              "nonce": "Index",
              "consumers": "RefCount",
              "providers": "RefCount"
            },
            "Address": "AccountId",
            "AmmPool": {
              "_enum": {
                "Curve": "PoolId",
                "Yield": "PoolId"
              }
            },
            "Asset": {
              "0": "AssetIdInnerType"
            },
            "AssetData": {
              "id": "Asset",
              "lot": "FixedU128",
              "price_step": "FixedU128",
              "maker_fee": "FixedU128",
              "taker_fee": "FixedU128",
              "multi_asset": "Option<MultiAsset>",
              "multi_location": "Option<MultiLocation>",
              "debt_weight": "DebtWeightType",
              "buyout_priority": "u64",
              "asset_type": "AssetType",
              "is_dex_enabled": "bool",
              "collateral_enabled": "bool"
            },
            "AssetId": "Asset",
            "AssetIdInnerType": "u64",
            "AssetMetrics": {
              "period_start": "Duration",
              "period_end": "Duration",
              "returns": "Vec<FixedNumber>",
              "volatility": "FixedNumber",
              "correlations": "Vec<(Asset, FixedNumber)>"
            },
            "AssetName": "Vec<u8>",
            "AssetType": {
              "_enum": {
                "Native": null,
                "Physical": null,
                "Synthetic": null,
                "Lp": "AmmPool"
              }
            },
            "Balance": "u64",
            "BalanceOf": "Balance",
            "BalancesAggregate": {
              "total_issuance": "Balance",
              "total_debt": "Balance"
            },
            "BestPrice": {
              "ask": "Option<FixedI64>",
              "bid": "Option<FixedI64>"
            },
            "BinaryId": "u64",
            "BinaryInfo": {
              "start_time": "u64",
              "end_time": "u64",
              "proper": "Asset",
              "minimal_amount": "Balance",
              "target": "(Asset, BinaryMode)",
              "total": "(Balance, Balance)",
              "claimed": "Balance"
            },
            "BinaryMode": {
              "_enum": {
                "CallPut": "FixedI64",
                "InOut": "(FixedI64, FixedI64)"
              }
            },
            "BlockNumber": "u64",
            "CapVec": {
              "head_index": "u32",
              "len_cap": "u32",
              "items": "Vec<FixedNumber>"
            },
            "ChainId": "u8",
            "Currency": {
              "_enum": [
                "UNKNOWN",
                "Eqd",
                "Eq",
                "Eth",
                "Btc",
                "Eos",
                "Dot",
                "Crv"
              ]
            },
            "ChunkKey": "u64",
            "DataPoint": {
              "price": "u64",
              "account_id": "AccountId",
              "block_number": "BlockNumber",
              "timestamp": "u64"
            },
            "DebtWeightType": "i128",
            "DebtWeightTypeInner": "i128",
            "DepositNonce": "u64",
            "Duration": {
              "secs": "u64",
              "nanos": "u32"
            },
            "EpochCounter": "u64",
            "EpochInfo": {
              "counter": "EpochCounter",
              "started_at": "Timestamp",
              "duration": "Timestamp",
              "new_duration": "Option<Timestamp>"
            },
            "FinancialMetrics": {
              "period_start": "Duration",
              "period_end": "Duration",
              "assets": "Vec<Asset>",
              "mean_returns": "Vec<FixedNumber>",
              "volatilities": "Vec<FixedNumber>",
              "correlations": "Vec<FixedNumber>",
              "covariances": "Vec<FixedNumber>"
            },
            "FinancialRecalcPeriodMs": "u64",
            "FixedI64": "i64",
            "FixedNumber": "u128",
            "FixedU128": "u128",
            "Keys": "SessionKeys3",
            "LenderInfo": {
              "deposit": "Balance",
              "pending_withdrawals": "PendingWithdrawal"
            },
            "LookupSource": "AccountId",
            "MarginState": {
              "_enum": {
                "Good": null,
                "SubGood": null,
                "MaintenanceStart": "u64",
                "MaintenanceIsGoing": "u64",
                "MaintenanceTimeOver": "u64",
                "MaintenanceEnd": null,
                "SubCritical": null
              }
            },
            "MaxCountOfAssetsRecalcPerBlock": "i32",
            "MmId": "u16",
            "MmInfo": {
              "weight": "Perbill",
              "borrowed": "Balance"
            },
            "MmPoolInfo": {
              "account_id": "AccountId",
              "min_amount": "Balance",
              "total_staked": "Balance",
              "total_deposit": "Balance",
              "total_borrowed": "Balance",
              "total_pending_withdrawals": "PendingWithdrawal"
            },
            "Number": "FixedU128",
            "OperationRequestLiqFm": {
              "authority_index": "AuthIndex",
              "validators_len": "u32",
              "block_num": "BlockNumber"
            },
            "OperationRequest": {
              "account": "AccountId",
              "authority_index": "AuthIndex",
              "validators_len": "u32",
              "block_num": "BlockNumber",
              "higher_priority": "bool"
            },
            "OperationRequestDexDeleteOrder": {
              "asset": "Asset",
              "order_id": "OrderId",
              "price": "FixedI64",
              "who": "AccountId",
              "buyout": "Option<Balance>",
              "authority_index": "AuthIndex",
              "validators_len": "u32",
              "block_num": "BlockNumber"
            },
            "Order": {
              "order_id": "OrderId",
              "account_id": "AccountId",
              "side": "OrderSide",
              "price": "FixedI64",
              "amount": "FixedU128",
              "created_at": "u64",
              "expiration_time": "u64"
            },
            "OrderType": {
              "_enum": {
                "Limit": {
                  "price": "FixedI64",
                  "expiration_time": "u64"
                },
                "Market": null
              }
            },
            "OrderId": "u64",
            "OrderSide": {
              "_enum": [
                "Buy",
                "Sell"
              ]
            },
            "PendingWithdrawal": {
              "last_epoch": "EpochCounter",
              "available": "Balance",
              "available_next_epoch": "Balance",
              "requested": "Balance"
            },
            "PoolId": "u32",
            "PoolInfo": {
              "owner": "AccountId",
              "pool_asset": "AssetId",
              "assets": "Vec<AssetId>",
              "amplification": "Number",
              "fee": "Permill",
              "admin_fee": "Permill",
              "balances": "Vec<Balance>",
              "total_balances": "Vec<Balance>"
            },
            "PoolTokenIndex": "u32",
            "PortfolioMetrics": {
              "period_start": "Duration",
              "period_end": "Duration",
              "z_score": "u32",
              "volatility": "FixedNumber",
              "value_at_risk": "FixedNumber"
            },
            "Price": "u128",
            "PriceLog": {
              "latest_timestamp": "Duration",
              "prices": "CapVec<Price>"
            },
            "PricePayload": {
              "public": "[u8; 33]",
              "asset": "Asset",
              "price": "FixedI64",
              "block_number": "BlockNumber"
            },
            "PricePeriod": {
              "_enum": [
                "Min",
                "TenMin",
                "Hour",
                "FourHour",
                "Day"
              ]
            },
            "PricePoint": {
              "block_number": "BlockNumber",
              "timestamp": "u64",
              "last_fin_recalc_timestamp": "Timestamp",
              "price": "u64",
              "data_points": "Vec<DataPoint>"
            },
            "PriceUpdate": {
              "period_start": "Duration",
              "time": "Duration",
              "price": "FixedNumber"
            },
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "ProposalStatus",
              "expiry": "BlockNumber"
            },
            "ResourceId": "[u8; 32]",
            "Round": {
              "total_cap": "Balance",
              "individual_cap": "Balance",
              "end": "u64",
              "token": "Asset",
              "minimal_buy_amount": "Balance",
              "vesting_params": "VestingParams"
            },
            "Signature": "u32",
            "SignedBalance": {
              "_enum": {
                "Positive": "Balance",
                "Negative": "Balance"
              }
            },
            "SubAccType": {
              "_enum": [
                "Bailsman",
                "Borrower",
                "Lender"
              ]
            },
            "Timestamp": "u64",
            "TotalAggregates": {
              "collateral": "Balance",
              "debt": "Balance"
            },
            "TransferReason": {
              "_enum": [
                "Common",
                "InterestFee",
                "MarginCall",
                "LiquidityFarming",
                "BailsmenRedistribution",
                "TreasuryEqBuyout",
                "TreasuryBuyEq",
                "Subaccount",
                "Lock",
                "Unlock",
                "Claim",
                "CurveFeeWithdraw",
                "Reserve",
                "Unreserve"
              ]
            },
            "UserGroup": {
              "_enum": [
                "UNKNOWN",
                "Balances",
                "Bailsmen",
                "Borrowers",
                "Lenders"
              ]
            },
            "UnsignedPriorityPair": "(u64, u64)",
            "VestingInfo": {
              "locked": "Balance",
              "perBlock": "Balance",
              "startingBlock": "BlockNumber"
            },
            "VestingParams": {
              "blocks_until_beginning": "u64",
              "amount_of_blocks": "u64"
            },
            "XdotNumber": "u128",
            "XdotPoolInfo": {
              "pool_asset": "AssetId",
              "lp_total_supply": "Balance",
              "account": "AccountId",
              "base_asset": "AssetId",
              "xbase_asset": "AssetId",
              "g1": "XdotNumber",
              "g2": "XdotNumber",
              "maturity": "u64",
              "ts": "XdotNumber"
            },
            "LockPeriod": {
              "_enum": [
                "None",
                "ThreeMonth",
                "SixMonth",
                "Year"
              ]
            },
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        }
      ]
    },
    "Genshiro Rococo Testnet": {
      "instances": {
        "balances": [
          "Eq",
          "Eth",
          "Btc",
          "Eos",
          "Dot",
          "Crv",
          "Usd"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountInfo": {
              "nonce": "Index",
              "consumers": "RefCount",
              "providers": "RefCount"
            },
            "Address": "AccountId",
            "AmmPool": {
              "_enum": {
                "Curve": "PoolId",
                "Yield": "PoolId"
              }
            },
            "Asset": {
              "0": "AssetIdInnerType"
            },
            "AssetData": {
              "id": "Asset",
              "lot": "FixedU128",
              "price_step": "FixedU128",
              "maker_fee": "FixedU128",
              "taker_fee": "FixedU128",
              "multi_asset": "Option<MultiAsset>",
              "multi_location": "Option<MultiLocation>",
              "debt_weight": "DebtWeightType",
              "buyout_priority": "u64",
              "asset_type": "AssetType",
              "is_dex_enabled": "bool",
              "collateral_enabled": "bool"
            },
            "AssetId": "Asset",
            "AssetIdInnerType": "u64",
            "AssetMetrics": {
              "period_start": "Duration",
              "period_end": "Duration",
              "returns": "Vec<FixedNumber>",
              "volatility": "FixedNumber",
              "correlations": "Vec<(Asset, FixedNumber)>"
            },
            "AssetName": "Vec<u8>",
            "AssetType": {
              "_enum": {
                "Native": null,
                "Physical": null,
                "Synthetic": null,
                "Lp": "AmmPool"
              }
            },
            "Balance": "u64",
            "BalanceOf": "Balance",
            "BalancesAggregate": {
              "total_issuance": "Balance",
              "total_debt": "Balance"
            },
            "BestPrice": {
              "ask": "Option<FixedI64>",
              "bid": "Option<FixedI64>"
            },
            "BinaryId": "u64",
            "BinaryInfo": {
              "start_time": "u64",
              "end_time": "u64",
              "proper": "Asset",
              "minimal_amount": "Balance",
              "target": "(Asset, BinaryMode)",
              "total": "(Balance, Balance)",
              "claimed": "Balance"
            },
            "BinaryMode": {
              "_enum": {
                "CallPut": "FixedI64",
                "InOut": "(FixedI64, FixedI64)"
              }
            },
            "BlockNumber": "u64",
            "CapVec": {
              "head_index": "u32",
              "len_cap": "u32",
              "items": "Vec<FixedNumber>"
            },
            "ChainId": "u8",
            "Currency": {
              "_enum": [
                "UNKNOWN",
                "Eqd",
                "Eq",
                "Eth",
                "Btc",
                "Eos",
                "Dot",
                "Crv"
              ]
            },
            "ChunkKey": "u64",
            "DataPoint": {
              "price": "u64",
              "account_id": "AccountId",
              "block_number": "BlockNumber",
              "timestamp": "u64"
            },
            "DebtWeightType": "i128",
            "DebtWeightTypeInner": "i128",
            "DepositNonce": "u64",
            "Duration": {
              "secs": "u64",
              "nanos": "u32"
            },
            "EpochCounter": "u64",
            "EpochInfo": {
              "counter": "EpochCounter",
              "started_at": "Timestamp",
              "duration": "Timestamp",
              "new_duration": "Option<Timestamp>"
            },
            "FinancialMetrics": {
              "period_start": "Duration",
              "period_end": "Duration",
              "assets": "Vec<Asset>",
              "mean_returns": "Vec<FixedNumber>",
              "volatilities": "Vec<FixedNumber>",
              "correlations": "Vec<FixedNumber>",
              "covariances": "Vec<FixedNumber>"
            },
            "FinancialRecalcPeriodMs": "u64",
            "FixedI64": "i64",
            "FixedNumber": "u128",
            "FixedU128": "u128",
            "Keys": "SessionKeys3",
            "LenderInfo": {
              "deposit": "Balance",
              "pending_withdrawals": "PendingWithdrawal"
            },
            "LookupSource": "AccountId",
            "MarginState": {
              "_enum": {
                "Good": null,
                "SubGood": null,
                "MaintenanceStart": "u64",
                "MaintenanceIsGoing": "u64",
                "MaintenanceTimeOver": "u64",
                "MaintenanceEnd": null,
                "SubCritical": null
              }
            },
            "MaxCountOfAssetsRecalcPerBlock": "i32",
            "MmId": "u16",
            "MmInfo": {
              "weight": "Perbill",
              "borrowed": "Balance"
            },
            "MmPoolInfo": {
              "account_id": "AccountId",
              "min_amount": "Balance",
              "total_staked": "Balance",
              "total_deposit": "Balance",
              "total_borrowed": "Balance",
              "total_pending_withdrawals": "PendingWithdrawal"
            },
            "Number": "FixedU128",
            "OperationRequestLiqFm": {
              "authority_index": "AuthIndex",
              "validators_len": "u32",
              "block_num": "BlockNumber"
            },
            "OperationRequest": {
              "account": "AccountId",
              "authority_index": "AuthIndex",
              "validators_len": "u32",
              "block_num": "BlockNumber",
              "higher_priority": "bool"
            },
            "OperationRequestDexDeleteOrder": {
              "asset": "Asset",
              "order_id": "OrderId",
              "price": "FixedI64",
              "who": "AccountId",
              "buyout": "Option<Balance>",
              "authority_index": "AuthIndex",
              "validators_len": "u32",
              "block_num": "BlockNumber"
            },
            "Order": {
              "order_id": "OrderId",
              "account_id": "AccountId",
              "side": "OrderSide",
              "price": "FixedI64",
              "amount": "FixedU128",
              "created_at": "u64",
              "expiration_time": "u64"
            },
            "OrderType": {
              "_enum": {
                "Limit": {
                  "price": "FixedI64",
                  "expiration_time": "u64"
                },
                "Market": null
              }
            },
            "OrderId": "u64",
            "OrderSide": {
              "_enum": [
                "Buy",
                "Sell"
              ]
            },
            "PendingWithdrawal": {
              "last_epoch": "EpochCounter",
              "available": "Balance",
              "available_next_epoch": "Balance",
              "requested": "Balance"
            },
            "PoolId": "u32",
            "PoolInfo": {
              "owner": "AccountId",
              "pool_asset": "AssetId",
              "assets": "Vec<AssetId>",
              "amplification": "Number",
              "fee": "Permill",
              "admin_fee": "Permill",
              "balances": "Vec<Balance>",
              "total_balances": "Vec<Balance>"
            },
            "PoolTokenIndex": "u32",
            "PortfolioMetrics": {
              "period_start": "Duration",
              "period_end": "Duration",
              "z_score": "u32",
              "volatility": "FixedNumber",
              "value_at_risk": "FixedNumber"
            },
            "Price": "u128",
            "PriceLog": {
              "latest_timestamp": "Duration",
              "prices": "CapVec<Price>"
            },
            "PricePayload": {
              "public": "[u8; 33]",
              "asset": "Asset",
              "price": "FixedI64",
              "block_number": "BlockNumber"
            },
            "PricePeriod": {
              "_enum": [
                "Min",
                "TenMin",
                "Hour",
                "FourHour",
                "Day"
              ]
            },
            "PricePoint": {
              "block_number": "BlockNumber",
              "timestamp": "u64",
              "last_fin_recalc_timestamp": "Timestamp",
              "price": "u64",
              "data_points": "Vec<DataPoint>"
            },
            "PriceUpdate": {
              "period_start": "Duration",
              "time": "Duration",
              "price": "FixedNumber"
            },
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "ProposalStatus",
              "expiry": "BlockNumber"
            },
            "ResourceId": "[u8; 32]",
            "Round": {
              "total_cap": "Balance",
              "individual_cap": "Balance",
              "end": "u64",
              "token": "Asset",
              "minimal_buy_amount": "Balance",
              "vesting_params": "VestingParams"
            },
            "Signature": "u32",
            "SignedBalance": {
              "_enum": {
                "Positive": "Balance",
                "Negative": "Balance"
              }
            },
            "SubAccType": {
              "_enum": [
                "Bailsman",
                "Borrower",
                "Lender"
              ]
            },
            "Timestamp": "u64",
            "TotalAggregates": {
              "collateral": "Balance",
              "debt": "Balance"
            },
            "TransferReason": {
              "_enum": [
                "Common",
                "InterestFee",
                "MarginCall",
                "LiquidityFarming",
                "BailsmenRedistribution",
                "TreasuryEqBuyout",
                "TreasuryBuyEq",
                "Subaccount",
                "Lock",
                "Unlock",
                "Claim",
                "CurveFeeWithdraw",
                "Reserve",
                "Unreserve"
              ]
            },
            "UserGroup": {
              "_enum": [
                "UNKNOWN",
                "Balances",
                "Bailsmen",
                "Borrowers",
                "Lenders"
              ]
            },
            "UnsignedPriorityPair": "(u64, u64)",
            "VestingInfo": {
              "locked": "Balance",
              "perBlock": "Balance",
              "startingBlock": "BlockNumber"
            },
            "VestingParams": {
              "blocks_until_beginning": "u64",
              "amount_of_blocks": "u64"
            },
            "XdotNumber": "u128",
            "XdotPoolInfo": {
              "pool_asset": "AssetId",
              "lp_total_supply": "Balance",
              "account": "AccountId",
              "base_asset": "AssetId",
              "xbase_asset": "AssetId",
              "g1": "XdotNumber",
              "g2": "XdotNumber",
              "maturity": "u64",
              "ts": "XdotNumber"
            },
            "LockPeriod": {
              "_enum": [
                "None",
                "ThreeMonth",
                "SixMonth",
                "Year"
              ]
            },
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        }
      ]
    },
    "Pangolin": {
      "alias": {},
      "rpc": {},
      "types": [
        {
          "minmax": [
            0,
            28110
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            28140,
            null
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        }
      ]
    },
    "Pangoro": {
      "alias": {},
      "rpc": {},
      "types": [
        {
          "minmax": [
            0,
            28110
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        },
        {
          "minmax": [
            28140,
            null
          ],
          "types": {
            "UsableBalance": {
              "usableBalance": "Balance"
            },
            "Status": {
              "_enum": {
                "Free": null,
                "Reserved": null
              }
            },
            "LockIdentifier": "[u8; 8]",
            "MessageId": "(LaneId, MessageNonce)",
            "LaneId": "[u8; 4]",
            "MessageNonce": "u64",
            "CrabRuntimeMessagesDarwiniaMessageCrabToDarwiniaMessagesParameter": {
              "_enum": {
                "DarwiniaToCrabConversionRate": "FixedU128"
              }
            },
            "FixedU128": "UInt<128, FixedU128>",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "relayer": "RelayerId",
              "messages": "DeliveredMessages"
            },
            "DeliveredMessages": {
              "begin": "MessageNonce",
              "end": "MessageNonce",
              "dispatchResults": "BitVec"
            },
            "MessagePayload": "Vec<u8>",
            "TechnicalMember": "AccountId",
            "BridgedHeaderHash": "Hash",
            "BridgedBlockHash": "Hash",
            "RawStorageProof": "Vec<Bytes>",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "BSCHeader": {
              "parentHash": "H256",
              "uncleHash": "H256",
              "coinbase": "EthereumAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "difficulty": "U256",
              "number": "u64",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixDigest": "H256",
              "nonce": "Bytes"
            },
            "BalanceInfo": {},
            "BalanceLock": {
              "id": "LockIdentifier",
              "lockFor": "LockFor",
              "lockReasons": "LockReasons"
            },
            "LockFor": {
              "_enum": {
                "Common": "Common",
                "Staking": "StakingLock"
              }
            },
            "Common": {
              "amount": "Balance"
            },
            "StakingLock": {
              "stakingAmount": "Balance",
              "unbondings": "Vec<Unbonding>"
            },
            "Unbonding": {
              "amount": "Balance",
              "until": "BlockNumber"
            },
            "RingBalance": "Balance",
            "KtonBalance": "Balance",
            "TsInMs": "u64",
            "Power": "u32",
            "DepositId": "U256",
            "TimeDepositItem": {
              "value": "Balance",
              "startTime": "TsInMs",
              "expireTime": "TsInMs"
            },
            "ExposureT": {
              "ownRingBalance": "Compact<Balance>",
              "ownKtonBalance": "Compact<Balance>",
              "ownPower": "Power",
              "totalPower": "Power",
              "others": "Vec<IndividualExposure>"
            },
            "Exposure": "ExposureT",
            "IndividualExposure": {
              "who": "AccountId",
              "ringBalance": "Compact<Balance>",
              "ktonBalance": "Compact<Balance>",
              "power": "Power"
            },
            "ElectionResultT": {
              "electedStashes": "Vec<AccountId>",
              "exposures": "Vec<(AccountId, ExposureT)>",
              "compute": "ElectionCompute"
            },
            "RKT": {
              "r": "Balance",
              "k": "Balance"
            },
            "SpanRecord": {
              "slashed": "RKT",
              "paidOut": "RKT"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "own": "RKT",
              "others": "Vec<(AccountId, RKT)>",
              "reporters": "Vec<AccountId>",
              "payout": "RKT"
            },
            "MappedRing": "u128",
            "EthereumTransactionIndex": "(H256, u64)",
            "EthereumBlockNumber": "u64",
            "Bloom": "[u8; 256; Bloom]",
            "EthashProof": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "LegacyReceipt": {
              "gas_used": "U256",
              "log_bloom": "Bloom",
              "logs": "Vec<LogEntry>",
              "outcome": "TransactionOutcome"
            },
            "LogEntry": {
              "address": "Address",
              "topics": "Vec<H256>",
              "data": "Bytes"
            },
            "TransactionOutcome": {
              "_enum": {
                "Unknown": "Null",
                "StateRoot": "H256",
                "StatusCode": "u8"
              }
            },
            "EthereumNetwork": {
              "_enum": {
                "Mainnet": null,
                "Ropsten": null
              }
            },
            "EthereumReceiptProof": {
              "index": "u64",
              "proof": "Bytes",
              "headerHash": "H256"
            },
            "MMRProof": {
              "memberLeafIndex": "u64",
              "lastLeafIndex": "u64",
              "proof": "Vec<H256>"
            },
            "EcdsaSignature": "[u8; 65; EcdsaSignature]",
            "Signature": "[u8;65]",
            "TronAddress": "EthereumAddress",
            "AddressT": "[u8; 20; AddressT]",
            "Address": "[u8; 20; Address]",
            "MerkleMountainRangeRootLog": {
              "prefix": "[u8; 4; Prefix]",
              "ParentMmrRoot": "Hash"
            },
            "ChainProperties": {
              "ss58Format": "Option<u8>",
              "tokenDecimals": "Option<Vec<u32>>",
              "tokenSymbol": "Option<Vec<Text>>"
            },
            "Signer": "EthereumAddress",
            "MMRRoot": "Hash",
            "EcdsaAddress": "EthereumAddress",
            "EcdsaMessage": "H256",
            "RelayAuthoritySigner": "EthereumAddress",
            "RelayAuthorityMessage": "EcdsaMessage",
            "RelayAuthoritySignature": "EcdsaSignature",
            "Term": "BlockNumber",
            "OpCode": "[u8; 4; OpCode]",
            "ElectionCompute": {
              "_enum": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "PriorRelayer": {
              "id": "AccountId",
              "fee": "Balance",
              "validRange": "BlockNumber"
            },
            "TokenMessageId": "[u8; 16; TokenMessageId]",
            "EraIndex": "u32",
            "RefCount": "u32",
            "Reasons": {
              "_enum": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>",
              "blocked": "bool"
            },
            "EthereumAddress": "GenericEthereumAccountId",
            "RedeemFor": {
              "_enum": {
                "Token": null,
                "Deposit": null
              }
            },
            "DarwiniaDemocracyVoteThreshold": {
              "_enum": [
                "SuperMajorityApprove",
                "SuperMajorityAgainst",
                "SimpleMajority"
              ]
            },
            "EthHeader": {
              "parentHash": "H256",
              "ommersHash": "H256",
              "beneficiary": "EthAddress",
              "stateRoot": "H256",
              "transactionsRoot": "H256",
              "receiptsRoot": "H256",
              "logsBloom": "EthBloom",
              "difficulty": "U256",
              "number": "U256",
              "gasLimit": "U256",
              "gasUsed": "U256",
              "timestamp": "u64",
              "extraData": "Bytes",
              "mixMash": "H256",
              "nonce": "H64"
            },
            "EthAddress": "H160",
            "TransactionV2": {
              "_enum": {
                "Legacy": "LegacyTransaction",
                "EIP2930": "EIP2930Transaction",
                "EIP1559": "EIP1559Transaction"
              }
            },
            "EIP2930Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EIP1559Transaction": {
              "chainId": "u64",
              "nonce": "U256",
              "maxPriorityFeePerGas": "U256",
              "maxFeePerGas": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "accessList": "EthAccessList",
              "oddYParity": "bool",
              "r": "H256",
              "s": "H256"
            },
            "EthAccessListItem": {
              "address": "EthAddress",
              "slots": "Vec<H256>"
            },
            "EthAccessList": "Vec<EthAccessListItem>",
            "LegacyTransaction": {
              "nonce": "U256",
              "gasPrice": "U256",
              "gasLimit": "U256",
              "action": "EthTransactionAction",
              "value": "U256",
              "input": "Bytes",
              "signature": "EthTransactionSignature"
            },
            "EthTransactionSignature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "EthTransactionAction": {
              "_enum": {
                "Call": "H160",
                "Create": "Null"
              }
            },
            "EthBloom": "H2048",
            "EthLog": {
              "address": "EthAddress",
              "topics": "Vec<H256>",
              "data": "Bytes",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "transactionHash": "Option<H256>",
              "transactionIndex": "Option<U256>",
              "logIndex": "Option<U256>",
              "transactionLogIndex": "Option<U256>",
              "removed": "bool"
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitFatal": {
              "_enum": {
                "NotSupported": "Null",
                "UnhandledInterrupt": "Null",
                "CallErrorAsFatal": "ExitError",
                "Other": "Text"
              }
            },
            "ExitError": {
              "_enum": {
                "StackUnderflow": "Null",
                "StackOverflow": "Null",
                "InvalidJump": "Null",
                "InvalidRange": "Null",
                "DesignatedInvalid": "Null",
                "CallTooDeep": "Null",
                "CreateCollision": "Null",
                "CreateContractLimit": "Null",
                "OutOfOffset": "Null",
                "OutOfGas": "Null",
                "OutOfFund": "Null",
                "PCUnderflow": "Null",
                "CreateEmpty": "Null",
                "Other": "Text"
              }
            },
            "Fee": {
              "amount": "Balance"
            },
            "InProcessOrders": {
              "orders": "Vec<(LaneId, MessageNonce)>"
            },
            "MMRProofResult": {
              "mmrSize": "u64",
              "proof": "Text"
            },
            "NodeIndex": "u64",
            "MmrNodesPruningConfiguration": {
              "step": "NodeIndex",
              "progress": "NodeIndex",
              "lastPosition": "NodeIndex"
            },
            "ProxyType": {
              "_enum": {
                "Any": null,
                "NonTransfer": null,
                "Governance": null,
                "Staking": null,
                "IdentityJudgement": null,
                "EthereumBridge": null
              }
            },
            "Announcement": "ProxyAnnouncement",
            "ProxyAnnouncement": {
              "real": "AccountId",
              "callHash": "Hash",
              "height": "BlockNumber"
            },
            "CrabRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "DarwiniaRuntimePalletsProxyProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "IdentityJudgement",
                "EthereumBridge"
              ]
            },
            "RelayHeaderId": "EthereumBlockNumber",
            "RelayProofs": "EthereumRelayProofs",
            "RelayVotingState": {
              "ayes": "Vec<AccountId>",
              "nays": "Vec<AccountId>"
            },
            "RelayAffirmationId": {
              "relayHeaderId": "RelayHeaderId",
              "round": "u32",
              "index": "u32"
            },
            "EthereumRelayProofs": {
              "ethashProof": "Vec<EthashProof>",
              "mmrProof": "Vec<H256>"
            },
            "PowerOf": {
              "power": "Power"
            },
            "PalletStakingIndividualExposure": {
              "who": "AccountId32",
              "value": "Compact<u128>"
            },
            "RewardPoint": "u32",
            "SpanIndex": "u32",
            "UnappliedSlashOther": "(AccountId, RKT)",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "freeKton": "Balance",
              "reservedKton": "Balance"
            },
            "LockReasons": {
              "_enum": {
                "Fee": null,
                "Misc": null,
                "All": null
              }
            },
            "StakingLedgerT": {
              "stash": "AccountId",
              "active": "Compact<Balance>",
              "activeDepositRing": "Compact<Balance>",
              "activeKton": "Compact<Balance>",
              "depositItems": "Vec<TimeDepositItem>",
              "ringStakingLock": "StakingLock",
              "ktonStakingLock": "StakingLock",
              "claimedRewards": "Vec<EraIndex>"
            }
          }
        }
      ]
    },
    "VLN": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Asset": {
              "_enum": {
                "Collateral": "Collateral",
                "Fiat": "Fiat",
                "Usdv": null
              }
            },
            "Collateral": {
              "_enum": [
                "Usdc"
              ]
            },
            "Fiat": {
              "_enum": [
                "Cop",
                "Vez"
              ]
            },
            "CurrencyId": "Asset",
            "OracleKey": "Asset",
            "OracleValue": "FixedU128",
            "CurrencyIdOf": "Asset",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "Share": "Permill"
          }
        }
      ]
    },
    "VLN-PC": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Asset": {
              "_enum": {
                "Collateral": "Collateral",
                "Fiat": "Fiat",
                "Network": "NetworkAsset",
                "Usdv": null
              }
            },
            "Collateral": {
              "_enum": [
                "Usdc"
              ]
            },
            "Fiat": {
              "_enum": [
                "Cop",
                "Vez"
              ]
            },
            "CurrencyId": "NetworkAsset",
            "OracleKey": "Asset",
            "OracleValue": "FixedU128",
            "CurrencyIdOf": "NetworkAsset",
            "Amount": "i64",
            "AmountOf": "Amount",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "Share": "Permill",
            "XCurrencyId": {
              "chain_id": "ChainId",
              "currency_id": "Bytes"
            },
            "ChainId": {
              "_enum": {
                "RelayChain": null,
                "Parachain": "ParaId"
              }
            },
            "NetworkAsset": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT"
              ]
            },
            "BaseAsset": "CurrencyId",
            "AssetPair": {
              "base": "BaseAsset",
              "quote": "CurrencyId"
            },
            "PaymentMethod": {
              "_enum": [
                "BankX",
                "BankY"
              ]
            },
            "RatePremiumType": "FixedU128",
            "SwapKind": {
              "_enum": {
                "In": "SwapIn",
                "Out": "SwapOut"
              }
            },
            "SwapIn": {
              "_enum": {
                "Created": null,
                "Accepted": "Vec<u8>",
                "Rejected": "Vec<u8>",
                "Confirmed": "Vec<u8>",
                "Expired": null,
                "Completed": null
              }
            },
            "SwapOut": {
              "_enum": {
                "Created": null,
                "Accepted": null,
                "Rejected": "Vec<u8>",
                "Confirmed": "Vec<u8>",
                "Expired": null,
                "Completed": null
              }
            },
            "PairPrice": {
              "pair": "AssetPair",
              "price": "FixedU128"
            },
            "Swap": {
              "human": "AccountId",
              "kind": "SwapKind",
              "price": "PairPrice",
              "amount": "FixedU128"
            },
            "RateDetail": {
              "rate": "FixedU128"
            }
          }
        }
      ]
    },
    "acala": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "tokens": {
          "queryExistentialDeposit": {
            "description": "Query Existential Deposit for a given currency.",
            "params": [
              {
                "name": "currencyId",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "NumberOrHex",
            "isSubscription": false,
            "jsonrpc": "tokens_queryExistentialDeposit",
            "method": "queryExistentialDeposit",
            "section": "tokens"
          }
        },
        "dex": {
          "getSupplyAmount": {
            "description": "Get supply amount",
            "params": [
              {
                "name": "supplyCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "targetCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "targetCurrencyAmount",
                "type": "BalanceRequest"
              }
            ],
            "type": "BalanceWrapper",
            "isSubscription": false,
            "jsonrpc": "dex_getSupplyAmount",
            "method": "getSupplyAmount",
            "section": "dex"
          },
          "getTargetAmount": {
            "description": "Get target amount",
            "params": [
              {
                "name": "supplyCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "targetCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "supplyCurrencyAmount",
                "type": "BalanceRequest"
              }
            ],
            "type": "BalanceWrapper",
            "isSubscription": false,
            "jsonrpc": "dex_getTargetAmount",
            "method": "getTargetAmount",
            "section": "dex"
          }
        },
        "evm": {
          "call": {
            "description": "eth call",
            "params": [
              {
                "name": "data",
                "type": "CallRequest"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Raw",
            "isSubscription": false,
            "jsonrpc": "evm_call",
            "method": "call",
            "section": "evm"
          },
          "estimateResources": {
            "description": "eth estimateResources",
            "params": [
              {
                "name": "from",
                "type": "H160"
              },
              {
                "name": "unsignedExtrinsic",
                "type": "Bytes"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "EstimateResourcesResponse",
            "isSubscription": false,
            "jsonrpc": "evm_estimateResources",
            "method": "estimateResources",
            "section": "evm"
          }
        },
        "stakingPool": {
          "getAvailableUnbonded": {
            "description": "Get Available Unbonded",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              }
            ],
            "type": "BalanceInfo",
            "isSubscription": false,
            "jsonrpc": "stakingPool_getAvailableUnbonded",
            "method": "getAvailableUnbonded",
            "section": "stakingPool"
          },
          "getLiquidStakingExchangeRate": {
            "description": "get liquid staking exchange rate",
            "params": [],
            "type": "ExchangeRate",
            "isSubscription": false,
            "jsonrpc": "stakingPool_getLiquidStakingExchangeRate",
            "method": "getLiquidStakingExchangeRate",
            "section": "stakingPool"
          }
        }
      },
      "instances": {
        "council": [
          "generalCouncil"
        ]
      },
      "types": [
        {
          "minmax": [
            600,
            699
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT",
                "XBTC",
                "LDOT",
                "RENBTC"
              ]
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Homa": "Null"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0",
            "Address": "LookupSource",
            "LookupSource": "IndicesLookupSource"
          }
        },
        {
          "minmax": [
            700,
            719
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT",
                "XBTC",
                "LDOT",
                "RENBTC"
              ]
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Homa": "Null"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress"
          }
        },
        {
          "minmax": [
            720,
            722
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "XBTC": 4,
                "RENBTC": 5,
                "POLKABTC": 6,
                "PLM": 7,
                "PHA": 8,
                "HDT": 9,
                "BCG": 11,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "SDN": 135,
                "KILT": 138
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(TokenSymbol, TokenSymbol)",
                "ERC20": "EvmAddress"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Homa": "Null"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            723,
            729
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "XBTC": 4,
                "RENBTC": 5,
                "POLKABTC": 6,
                "PLM": 7,
                "PHA": 8,
                "HDT": 9,
                "BCG": 11,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "SDN": 135,
                "KILT": 138
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(TokenSymbol, TokenSymbol)",
                "ERC20": "EvmAddress"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            730,
            1007
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 4,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "CASH": 140
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1008,
            1008
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1008,
            1009
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1010,
            1013
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "Dex": "CurrencyId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1014,
            1018
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "Dex": "CurrencyId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV1",
            "MultiAsset": "MultiAssetV1",
            "Xcm": "XcmV1",
            "XcmOrder": "XcmOrderV1",
            "XcmError": "XcmErrorV1",
            "Response": "ResponseV1"
          }
        },
        {
          "minmax": [
            1019,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "Dex": "CurrencyId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress"
          }
        }
      ],
      "alias": {
        "stakingPool": {
          "Phase": "StakingPoolPhase"
        },
        "nomineesElection": {
          "UnlockChunk": "HomaUnlockChunk"
        },
        "evm": {
          "AccountInfo": "EvmAccountInfo",
          "ContractInfo": "EvmContractInfo"
        },
        "rewards": {
          "OrmlCurrencyId": "CurrencyId"
        },
        "oracle": {
          "DataProviderId": "AcalaDataProviderId"
        },
        "chainBridge": {
          "ChainId": "ChainBridgeChainId"
        },
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "mandala": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "tokens": {
          "queryExistentialDeposit": {
            "description": "Query Existential Deposit for a given currency.",
            "params": [
              {
                "name": "currencyId",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "NumberOrHex",
            "isSubscription": false,
            "jsonrpc": "tokens_queryExistentialDeposit",
            "method": "queryExistentialDeposit",
            "section": "tokens"
          }
        },
        "dex": {
          "getSupplyAmount": {
            "description": "Get supply amount",
            "params": [
              {
                "name": "supplyCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "targetCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "targetCurrencyAmount",
                "type": "BalanceRequest"
              }
            ],
            "type": "BalanceWrapper",
            "isSubscription": false,
            "jsonrpc": "dex_getSupplyAmount",
            "method": "getSupplyAmount",
            "section": "dex"
          },
          "getTargetAmount": {
            "description": "Get target amount",
            "params": [
              {
                "name": "supplyCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "targetCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "supplyCurrencyAmount",
                "type": "BalanceRequest"
              }
            ],
            "type": "BalanceWrapper",
            "isSubscription": false,
            "jsonrpc": "dex_getTargetAmount",
            "method": "getTargetAmount",
            "section": "dex"
          }
        },
        "evm": {
          "call": {
            "description": "eth call",
            "params": [
              {
                "name": "data",
                "type": "CallRequest"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Raw",
            "isSubscription": false,
            "jsonrpc": "evm_call",
            "method": "call",
            "section": "evm"
          },
          "estimateResources": {
            "description": "eth estimateResources",
            "params": [
              {
                "name": "from",
                "type": "H160"
              },
              {
                "name": "unsignedExtrinsic",
                "type": "Bytes"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "EstimateResourcesResponse",
            "isSubscription": false,
            "jsonrpc": "evm_estimateResources",
            "method": "estimateResources",
            "section": "evm"
          }
        },
        "stakingPool": {
          "getAvailableUnbonded": {
            "description": "Get Available Unbonded",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              }
            ],
            "type": "BalanceInfo",
            "isSubscription": false,
            "jsonrpc": "stakingPool_getAvailableUnbonded",
            "method": "getAvailableUnbonded",
            "section": "stakingPool"
          },
          "getLiquidStakingExchangeRate": {
            "description": "get liquid staking exchange rate",
            "params": [],
            "type": "ExchangeRate",
            "isSubscription": false,
            "jsonrpc": "stakingPool_getLiquidStakingExchangeRate",
            "method": "getLiquidStakingExchangeRate",
            "section": "stakingPool"
          }
        }
      },
      "instances": {
        "council": [
          "generalCouncil"
        ]
      },
      "types": [
        {
          "minmax": [
            600,
            699
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT",
                "XBTC",
                "LDOT",
                "RENBTC"
              ]
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Homa": "Null"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0",
            "Address": "LookupSource",
            "LookupSource": "IndicesLookupSource"
          }
        },
        {
          "minmax": [
            700,
            719
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT",
                "XBTC",
                "LDOT",
                "RENBTC"
              ]
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Homa": "Null"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress"
          }
        },
        {
          "minmax": [
            720,
            722
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "XBTC": 4,
                "RENBTC": 5,
                "POLKABTC": 6,
                "PLM": 7,
                "PHA": 8,
                "HDT": 9,
                "BCG": 11,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "SDN": 135,
                "KILT": 138
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(TokenSymbol, TokenSymbol)",
                "ERC20": "EvmAddress"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Homa": "Null"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            723,
            729
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "XBTC": 4,
                "RENBTC": 5,
                "POLKABTC": 6,
                "PLM": 7,
                "PHA": 8,
                "HDT": 9,
                "BCG": 11,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "SDN": 135,
                "KILT": 138
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(TokenSymbol, TokenSymbol)",
                "ERC20": "EvmAddress"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            730,
            1007
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 4,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "CASH": 140
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1008,
            1008
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1008,
            1009
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1010,
            1013
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "Dex": "CurrencyId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1014,
            1018
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "Dex": "CurrencyId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV1",
            "MultiAsset": "MultiAssetV1",
            "Xcm": "XcmV1",
            "XcmOrder": "XcmOrderV1",
            "XcmError": "XcmErrorV1",
            "Response": "ResponseV1"
          }
        },
        {
          "minmax": [
            1019,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "Dex": "CurrencyId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress"
          }
        }
      ],
      "alias": {
        "stakingPool": {
          "Phase": "StakingPoolPhase"
        },
        "nomineesElection": {
          "UnlockChunk": "HomaUnlockChunk"
        },
        "evm": {
          "AccountInfo": "EvmAccountInfo",
          "ContractInfo": "EvmContractInfo"
        },
        "rewards": {
          "OrmlCurrencyId": "CurrencyId"
        },
        "oracle": {
          "DataProviderId": "AcalaDataProviderId"
        },
        "chainBridge": {
          "ChainId": "ChainBridgeChainId"
        },
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "karura": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "tokens": {
          "queryExistentialDeposit": {
            "description": "Query Existential Deposit for a given currency.",
            "params": [
              {
                "name": "currencyId",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "NumberOrHex",
            "isSubscription": false,
            "jsonrpc": "tokens_queryExistentialDeposit",
            "method": "queryExistentialDeposit",
            "section": "tokens"
          }
        },
        "dex": {
          "getSupplyAmount": {
            "description": "Get supply amount",
            "params": [
              {
                "name": "supplyCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "targetCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "targetCurrencyAmount",
                "type": "BalanceRequest"
              }
            ],
            "type": "BalanceWrapper",
            "isSubscription": false,
            "jsonrpc": "dex_getSupplyAmount",
            "method": "getSupplyAmount",
            "section": "dex"
          },
          "getTargetAmount": {
            "description": "Get target amount",
            "params": [
              {
                "name": "supplyCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "targetCurrencyId",
                "type": "CurrencyId"
              },
              {
                "name": "supplyCurrencyAmount",
                "type": "BalanceRequest"
              }
            ],
            "type": "BalanceWrapper",
            "isSubscription": false,
            "jsonrpc": "dex_getTargetAmount",
            "method": "getTargetAmount",
            "section": "dex"
          }
        },
        "evm": {
          "call": {
            "description": "eth call",
            "params": [
              {
                "name": "data",
                "type": "CallRequest"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Raw",
            "isSubscription": false,
            "jsonrpc": "evm_call",
            "method": "call",
            "section": "evm"
          },
          "estimateResources": {
            "description": "eth estimateResources",
            "params": [
              {
                "name": "from",
                "type": "H160"
              },
              {
                "name": "unsignedExtrinsic",
                "type": "Bytes"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "EstimateResourcesResponse",
            "isSubscription": false,
            "jsonrpc": "evm_estimateResources",
            "method": "estimateResources",
            "section": "evm"
          }
        },
        "stakingPool": {
          "getAvailableUnbonded": {
            "description": "Get Available Unbonded",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              }
            ],
            "type": "BalanceInfo",
            "isSubscription": false,
            "jsonrpc": "stakingPool_getAvailableUnbonded",
            "method": "getAvailableUnbonded",
            "section": "stakingPool"
          },
          "getLiquidStakingExchangeRate": {
            "description": "get liquid staking exchange rate",
            "params": [],
            "type": "ExchangeRate",
            "isSubscription": false,
            "jsonrpc": "stakingPool_getLiquidStakingExchangeRate",
            "method": "getLiquidStakingExchangeRate",
            "section": "stakingPool"
          }
        }
      },
      "instances": {
        "council": [
          "generalCouncil"
        ]
      },
      "types": [
        {
          "minmax": [
            600,
            699
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT",
                "XBTC",
                "LDOT",
                "RENBTC"
              ]
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Homa": "Null"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0",
            "Address": "LookupSource",
            "LookupSource": "IndicesLookupSource"
          }
        },
        {
          "minmax": [
            700,
            719
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT",
                "XBTC",
                "LDOT",
                "RENBTC"
              ]
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Homa": "Null"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress"
          }
        },
        {
          "minmax": [
            720,
            722
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "XBTC": 4,
                "RENBTC": 5,
                "POLKABTC": 6,
                "PLM": 7,
                "PHA": 8,
                "HDT": 9,
                "BCG": 11,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "SDN": 135,
                "KILT": 138
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(TokenSymbol, TokenSymbol)",
                "ERC20": "EvmAddress"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Homa": "Null"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            723,
            729
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "XBTC": 4,
                "RENBTC": 5,
                "POLKABTC": 6,
                "PLM": 7,
                "PHA": 8,
                "HDT": 9,
                "BCG": 11,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "SDN": 135,
                "KILT": 138
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(TokenSymbol, TokenSymbol)",
                "ERC20": "EvmAddress"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            730,
            1007
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 4,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "CASH": 140
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1008,
            1008
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1008,
            1009
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1010,
            1013
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "Dex": "CurrencyId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV0",
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            1014,
            1018
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "Dex": "CurrencyId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress",
            "MultiLocation": "MultiLocationV1",
            "MultiAsset": "MultiAssetV1",
            "Xcm": "XcmV1",
            "XcmOrder": "XcmOrderV1",
            "XcmError": "XcmErrorV1",
            "Response": "ResponseV1"
          }
        },
        {
          "minmax": [
            1019,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "CurrencyId",
            "PoolInfo": {
              "totalShares": "Share",
              "rewards": "BTreeMap<OrmlCurrencyId, (Balance, Balance)>"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "TokenSymbol": {
              "_enum": {
                "ACA": 0,
                "AUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "RENBTC": 20,
                "CASH": 21,
                "KAR": 128,
                "KUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "BNC": 168,
                "VSKSM": 169,
                "PHA": 170,
                "KINT": 171,
                "KBTC": 172
              }
            },
            "DexShare": {
              "_enum": {
                "Token": "TokenSymbol",
                "Erc20": "EvmAddress"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(DexShare, DexShare)",
                "ERC20": "EvmAddress",
                "StableAssetPoolToken": "u32",
                "LiquidCroadloan": "u32",
                "ForeignAsset": "u32"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "AirDropCurrencyId": {
              "_enum": [
                "KAR",
                "ACA"
              ]
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "Treasury",
                "HonzonTreasury",
                "HomaTreasury",
                "TreasuryReserve"
              ]
            },
            "AcalaDataProviderId": {
              "_enum": [
                "Aggregated",
                "Acala",
                "Band"
              ]
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "ChainBridgeChainId": "u8",
            "AcalaAssetMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "minimalBalance": "Balance"
            },
            "NumberOrHex": "u128",
            "PalletBalanceOf": "Balance",
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "interestRatePerSec": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "CandidateInfoOf": "CandidateInfo",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "TradingPairStatus": {
              "_enum": {
                "Disabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "Erc20Info": {
              "address": "EvmAddress",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "EstimateResourcesResponse": {
              "gas": "u256",
              "storage": "i32",
              "weightFee": "u256"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "EvmAddress": "H160",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "AcalaStakingLedge": {
              "bonded": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "AcalaUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "RelaychainAccountId": "AccountId",
            "SlashInfo": {
              "validator": "RelaychainAccountId",
              "relaychainTokenAmount": "Balance"
            },
            "ValidatorBacking": {
              "totalInsurance": "Balance",
              "isFrozen": "bool"
            },
            "Guarantee": {
              "total": "Balance",
              "bonded": "Balance",
              "unbonding": "Option<(Balance, BlockNumber)>"
            },
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "Dex": "CurrencyId"
              }
            },
            "PoolIdV0": {
              "_enum": {
                "LoansIncentive": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "HomaIncentive": "Null",
                "DexSaving": "CurrencyId",
                "HomaValidatorAllowance": "AccountId"
              }
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "CID": "Vec<u8>",
            "Attributes": "BTreeMap<Vec<u8>, Vec<u8>>",
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2,
                "Mintable": 4,
                "ClassPropertiesMutable": 8
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties",
              "attributes": "Attributes"
            },
            "TokenData": {
              "deposit": "Balance",
              "attributes": "Attributes"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "NFTClassId": "u32",
            "ClassIdOf": "ClassId",
            "NFTBalance": "u128",
            "NFTBalanceOf": "NFTBalance",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "NomineeId": "AccountId",
            "HomaUnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "BondingLedger": {
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<HomaUnlockChunk>"
            },
            "OracleKey": "CurrencyId",
            "AsOriginId": "AuthoritysOriginId",
            "ProxyType": {
              "_enum": [
                "Any",
                "CancelProxy",
                "Governance",
                "Auction",
                "Swap",
                "Loan"
              ]
            },
            "AtLeast64BitUnsigned": "u128",
            "StableAssetPoolId": "u32",
            "RelayChainBlockNumberOf": "RelayChainBlockNumber",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "StakingPoolPhase": {
              "_enum": [
                "Started",
                "RelaychainUpdated",
                "LedgerUpdated",
                "Finished"
              ]
            },
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "ExchangeRate": "FixedU128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "PublicKey": "[u8; 20]",
            "DestAddress": "Vec<u8>",
            "PoolTokenIndex": "u32",
            "AssetId": "CurrencyId",
            "Keys": "SessionKeys1",
            "Address": "GenericMultiAddress",
            "LookupSource": "GenericMultiAddress"
          }
        }
      ],
      "alias": {
        "stakingPool": {
          "Phase": "StakingPoolPhase"
        },
        "nomineesElection": {
          "UnlockChunk": "HomaUnlockChunk"
        },
        "evm": {
          "AccountInfo": "EvmAccountInfo",
          "ContractInfo": "EvmContractInfo"
        },
        "rewards": {
          "OrmlCurrencyId": "CurrencyId"
        },
        "oracle": {
          "DataProviderId": "AcalaDataProviderId"
        },
        "chainBridge": {
          "ChainId": "ChainBridgeChainId"
        },
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "ajuna": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress"
          }
        }
      ]
    },
    "altair": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "ParachainAccountIdOf": "AccountId",
            "Proof": {
              "leafHash": "Hash",
              "sortedHashes": "Vec<Hash>"
            },
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "_Staking",
                "NonProxy"
              ]
            },
            "RelayChainAccountId": "AccountId",
            "RootHashOf": "Hash"
          }
        }
      ]
    },
    "apron": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "ares-gladios": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "AskPeriodNum": "u64",
            "AskPointNum": "u32",
            "AuthorityAres": "AccountId",
            "AccountParticipateEstimates": {
              "account": "AccountId",
              "end": "BlockNumber",
              "estimates": "Option<u64>",
              "range_index": "Option<u8>",
              "bsc_address": "Option<Bytes>",
              "multiplier": "MultiplierOption",
              "reward": "u128"
            },
            "AresPriceData": {
              "price": "u64",
              "account_id": "AccountId",
              "create_bn": "BlockNumber",
              "fraction_len": "FractionLength",
              "raw_number": "JsonNumberValue",
              "timestamp": "u64"
            },
            "BalanceOf": "Balance",
            "ChooseWinnersPayload": {
              "block_number": "BlockNumber",
              "winners": "Vec<AccountParticipateEstimates>",
              "public": "AccountId",
              "estimates_id": "u64",
              "symbol": "Bytes",
              "price": "(u64, FractionLength)"
            },
            "EstimatesState": {
              "_enum": [
                "InActive",
                "Active",
                "WaitingPayout",
                "Completed"
              ]
            },
            "EstimatesType": {
              "_enum": [
                "DEVIATION",
                "RANGE"
              ]
            },
            "FractionLength": "u32",
            "HttpError": {
              "_enum": {
                "IoErr": "Bytes",
                "TimeOut": "Bytes",
                "StatusErr": "(Bytes,u16)",
                "ParseErr": "Bytes"
              }
            },
            "HttpErrTracePayload": {
              "trace_data": "HttpErrTraceData<BlockNumber, AuthorityId>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "HttpErrTraceData": {
              "block_number": "BlockNumber",
              "err_auth": "AuthorityId",
              "err_status": "HttpError",
              "tip": "Bytes"
            },
            "JsonNumberValue": {
              "integer": "u64",
              "fraction": "u64",
              "fraction_length": "u32",
              "exponent": "u32"
            },
            "Keys": "SessionKeys3",
            "LookupSource": "MultiAddress",
            "MultiplierOption": {
              "_enum": [
                "Base1",
                "Base2",
                "Base5"
              ]
            },
            "OcwControlData": {
              "need_verifier_check": "bool",
              "open_free_price_reporter": "bool",
              "open_paid_price_reporter": "bool"
            },
            "OffchainSignature": "MultiSignature",
            "PaidValue": {
              "create_bn": "BlockNumber",
              "amount": "BalanceOf",
              "is_income": "bool"
            },
            "PurchasedId": "Bytes",
            "PriceKey": "Vec<u8>",
            "PriceToken": "Bytes",
            "PreCheckPayload": {
              "block_number": "BlockNumber",
              "pre_check_stash": "AccountId",
              "pre_check_auth": "AuthorityId",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PreCheckResultPayload": {
              "block_number": "BlockNumber",
              "pre_check_list": "Vec<PreCheckStruct>",
              "pre_check_stash": "AccountId",
              "pre_check_auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PreCheckCompareLog": {
              "chain_avg_price_list": "BTreeMap<Bytes, (u64, FractionLength)>",
              "validator_up_price_list": "BTreeMap<Bytes, (u64, FractionLength)>",
              "raw_precheck_list": "Vec<PreCheckStruct>"
            },
            "PreCheckStruct": {
              "price_key": "Vec<u8>",
              "number_val": "JsonNumberValue",
              "max_offset": "Percent",
              "timestamp": "u64"
            },
            "PricePayloadSubPrice": "(PriceKey, u64, FractionLength, JsonNumberValue, u64)",
            "PricePayloadSubJumpBlock": "(PriceKey, RequestInterval)",
            "PricePayload": {
              "block_number": "BlockNumber",
              "price": "Vec<PricePayloadSubPrice>",
              "jump_block": "Vec<PricePayloadSubJumpBlock>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PreCheckStatus": {
              "_enum": [
                "Review",
                "Prohibit",
                "Pass"
              ]
            },
            "PurchasedRequestData": {
              "account_id": "AccountId",
              "offer": "BalanceOf",
              "create_bn": "BlockNumber",
              "submit_threshold": "u8",
              "max_duration": "u64",
              "request_keys": "Vec<Vec<u8>>"
            },
            "PurchasedPricePayload": {
              "block_number": "BlockNumber",
              "purchase_id": "Vec<u8>",
              "price": "Vec<PricePayloadSubPrice>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PurchasedAvgPriceData": {
              "create_bn": "u64",
              "reached_type": "u8",
              "price_data": "(u64, FractionLength)"
            },
            "PurchasedDefaultData": {
              "submit_threshold": "u8",
              "max_duration": "u64",
              "avg_keep_duration": "u64"
            },
            "PurchasedForceCleanPayload": {
              "BlockNumber": "BlockNumber",
              "purchase_id_list": "Vec<Vec<u8>>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PurchaseId": "Vec<u8>",
            "Releases": {
              "_enum": [
                "V1_0_0_Ancestral",
                "V1_0_1_HttpErrUpgrade",
                "V1_1_0_HttpErrUpgrade",
                "V1_2_0"
              ]
            },
            "RequestInterval": "u8",
            "StatusErr": "(u16)",
            "SymbolEstimatesConfig": {
              "symbol": "Bytes",
              "estimates_type": "EstimatesType",
              "id": "u64",
              "ticket_price": "Balance",
              "symbol_completed_price": "u64",
              "symbol_fraction": "FractionLength",
              "start": "BlockNumber",
              "end": "BlockNumber",
              "distribute": "BlockNumber",
              "deviation": "Option<Permill>",
              "range": "Option<Vec<u64>>",
              "total_reward": "Balance",
              "state": "EstimatesState"
            }
          }
        }
      ]
    },
    "ares-mars": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "AskPeriodNum": "u64",
            "AskPointNum": "u32",
            "AuthorityAres": "AccountId",
            "AccountParticipateEstimates": {
              "account": "AccountId",
              "end": "BlockNumber",
              "estimates": "Option<u64>",
              "range_index": "Option<u8>",
              "eth_address": "Option<Bytes>",
              "multiplier": "MultiplierOption",
              "reward": "u128"
            },
            "AresPriceData": {
              "price": "u64",
              "account_id": "AccountId",
              "create_bn": "BlockNumber",
              "fraction_len": "FractionLength",
              "raw_number": "JsonNumberValue",
              "timestamp": "u64"
            },
            "BalanceOf": "Balance",
            "ChooseWinnersPayload": {
              "block_number": "BlockNumber",
              "winners": "Vec<AccountParticipateEstimates>",
              "public": "AccountId",
              "estimates_config": "Bytes",
              "symbol": "Bytes",
              "price": "(u64, FractionLength)"
            },
            "EstimatesState": {
              "_enum": [
                "InActive",
                "Active",
                "WaitingPayout",
                "Completed"
              ]
            },
            "EstimatesType": {
              "_enum": [
                "DEVIATION",
                "RANGE"
              ]
            },
            "FractionLength": "u32",
            "HttpError": {
              "_enum": {
                "IoErr": "Bytes",
                "TimeOut": "Bytes",
                "StatusErr": "(Bytes,u16)",
                "ParseErr": "Bytes"
              }
            },
            "HttpErrTracePayload": {
              "trace_data": "HttpErrTraceData<BlockNumber, AuthorityId>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "HttpErrTraceData": {
              "block_number": "BlockNumber",
              "err_auth": "AuthorityId",
              "err_status": "HttpError",
              "tip": "Bytes"
            },
            "JsonNumberValue": {
              "integer": "u64",
              "fraction": "u64",
              "fraction_length": "u32",
              "exponent": "u32"
            },
            "Keys": "SessionKeys4",
            "LookupSource": "MultiAddress",
            "MultiplierOption": {
              "_enum": [
                "Base1",
                "Base2",
                "Base5"
              ]
            },
            "OcwControlData": {
              "need_verifier_check": "bool",
              "open_free_price_reporter": "bool",
              "open_paid_price_reporter": "bool"
            },
            "OffchainSignature": "MultiSignature",
            "PaidValue": {
              "create_bn": "BlockNumber",
              "amount": "BalanceOf",
              "is_income": "bool"
            },
            "PurchasedId": "Bytes",
            "PriceKey": "Vec<u8>",
            "PriceToken": "Bytes",
            "PreCheckPayload": {
              "block_number": "BlockNumber",
              "pre_check_stash": "AccountId",
              "pre_check_auth": "AuthorityId",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PreCheckResultPayload": {
              "block_number": "BlockNumber",
              "pre_check_list": "Vec<PreCheckStruct>",
              "pre_check_stash": "AccountId",
              "pre_check_auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PreCheckCompareLog": {
              "chain_avg_price_list": "BTreeMap<Bytes, (u64, FractionLength)>",
              "validator_up_price_list": "BTreeMap<Bytes, (u64, FractionLength)>",
              "raw_precheck_list": "Vec<PreCheckStruct>"
            },
            "PreCheckStruct": {
              "price_key": "Vec<u8>",
              "number_val": "JsonNumberValue",
              "max_offset": "Percent",
              "timestamp": "u64"
            },
            "PricePayloadSubPrice": "(PriceKey, u64, FractionLength, JsonNumberValue, u64)",
            "PricePayloadSubJumpBlock": "(PriceKey, RequestInterval)",
            "PricePayload": {
              "block_number": "BlockNumber",
              "price": "Vec<PricePayloadSubPrice>",
              "jump_block": "Vec<PricePayloadSubJumpBlock>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PreCheckStatus": {
              "_enum": [
                "Review",
                "Prohibit",
                "Pass"
              ]
            },
            "PurchasedRequestData": {
              "account_id": "AccountId",
              "offer": "BalanceOf",
              "create_bn": "BlockNumber",
              "submit_threshold": "u8",
              "max_duration": "u64",
              "request_keys": "Vec<Vec<u8>>"
            },
            "PurchasedPricePayload": {
              "block_number": "BlockNumber",
              "purchase_id": "Vec<u8>",
              "price": "Vec<PricePayloadSubPrice>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PurchasedAvgPriceData": {
              "create_bn": "u64",
              "reached_type": "u8",
              "price_data": "(u64, FractionLength)"
            },
            "PurchasedDefaultData": {
              "submit_threshold": "u8",
              "max_duration": "u64",
              "avg_keep_duration": "u64"
            },
            "PurchasedForceCleanPayload": {
              "BlockNumber": "BlockNumber",
              "purchase_id_list": "Vec<Vec<u8>>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PurchaseId": "Vec<u8>",
            "Releases": {
              "_enum": [
                "V1_0_0_Ancestral",
                "V1_0_1_HttpErrUpgrade",
                "V1_1_0_HttpErrUpgrade",
                "V1_2_0"
              ]
            },
            "RequestInterval": "u8",
            "StatusErr": "(u16)",
            "SymbolEstimatesConfig": {
              "symbol": "Bytes",
              "estimates_type": "EstimatesType",
              "id": "u64",
              "ticket_price": "Balance",
              "symbol_completed_price": "u64",
              "symbol_fraction": "FractionLength",
              "start": "BlockNumber",
              "end": "BlockNumber",
              "distribute": "BlockNumber",
              "deviation": "Option<Permill>",
              "range": "Option<Vec<u64>>",
              "total_reward": "Balance",
              "state": "EstimatesState"
            }
          }
        }
      ]
    },
    "ares-odyssey": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "AskPeriodNum": "u64",
            "AskPointNum": "u32",
            "AuthorityAres": "AccountId",
            "AccountParticipateEstimates": {
              "account": "AccountId",
              "end": "BlockNumber",
              "estimates": "Option<u64>",
              "range_index": "Option<u8>",
              "eth_address": "Option<Bytes>",
              "multiplier": "MultiplierOption",
              "reward": "u128"
            },
            "AresPriceData": {
              "price": "u64",
              "account_id": "AccountId",
              "create_bn": "BlockNumber",
              "fraction_len": "FractionLength",
              "raw_number": "JsonNumberValue",
              "timestamp": "u64"
            },
            "BalanceOf": "Balance",
            "ChooseWinnersPayload": {
              "block_number": "BlockNumber",
              "winners": "Vec<AccountParticipateEstimates>",
              "public": "AccountId",
              "estimates_config": "Bytes",
              "symbol": "Bytes",
              "price": "(u64, FractionLength)"
            },
            "EstimatesState": {
              "_enum": [
                "InActive",
                "Active",
                "WaitingPayout",
                "Completed"
              ]
            },
            "EstimatesType": {
              "_enum": [
                "DEVIATION",
                "RANGE"
              ]
            },
            "FractionLength": "u32",
            "HttpError": {
              "_enum": {
                "IoErr": "Bytes",
                "TimeOut": "Bytes",
                "StatusErr": "(Bytes,u16)",
                "ParseErr": "Bytes"
              }
            },
            "HttpErrTracePayload": {
              "trace_data": "HttpErrTraceData<BlockNumber, AuthorityId>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "HttpErrTraceData": {
              "block_number": "BlockNumber",
              "err_auth": "AuthorityId",
              "err_status": "HttpError",
              "tip": "Bytes"
            },
            "JsonNumberValue": {
              "integer": "u64",
              "fraction": "u64",
              "fraction_length": "u32",
              "exponent": "u32"
            },
            "Keys": "SessionKeys4",
            "LookupSource": "MultiAddress",
            "MultiplierOption": {
              "_enum": [
                "Base1",
                "Base2",
                "Base5"
              ]
            },
            "OcwControlData": {
              "need_verifier_check": "bool",
              "open_free_price_reporter": "bool",
              "open_paid_price_reporter": "bool"
            },
            "OffchainSignature": "MultiSignature",
            "PaidValue": {
              "create_bn": "BlockNumber",
              "amount": "BalanceOf",
              "is_income": "bool"
            },
            "PurchasedId": "Bytes",
            "PriceKey": "Vec<u8>",
            "PriceToken": "Bytes",
            "PreCheckPayload": {
              "block_number": "BlockNumber",
              "pre_check_stash": "AccountId",
              "pre_check_auth": "AuthorityId",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PreCheckResultPayload": {
              "block_number": "BlockNumber",
              "pre_check_list": "Vec<PreCheckStruct>",
              "pre_check_stash": "AccountId",
              "pre_check_auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PreCheckCompareLog": {
              "chain_avg_price_list": "BTreeMap<Bytes, (u64, FractionLength)>",
              "validator_up_price_list": "BTreeMap<Bytes, (u64, FractionLength)>",
              "raw_precheck_list": "Vec<PreCheckStruct>"
            },
            "PreCheckStruct": {
              "price_key": "Vec<u8>",
              "number_val": "JsonNumberValue",
              "max_offset": "Percent",
              "timestamp": "u64"
            },
            "PricePayloadSubPrice": "(PriceKey, u64, FractionLength, JsonNumberValue, u64)",
            "PricePayloadSubJumpBlock": "(PriceKey, RequestInterval)",
            "PricePayload": {
              "block_number": "BlockNumber",
              "price": "Vec<PricePayloadSubPrice>",
              "jump_block": "Vec<PricePayloadSubJumpBlock>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PreCheckStatus": {
              "_enum": [
                "Review",
                "Prohibit",
                "Pass"
              ]
            },
            "PurchasedRequestData": {
              "account_id": "AccountId",
              "offer": "BalanceOf",
              "create_bn": "BlockNumber",
              "submit_threshold": "u8",
              "max_duration": "u64",
              "request_keys": "Vec<Vec<u8>>"
            },
            "PurchasedPricePayload": {
              "block_number": "BlockNumber",
              "purchase_id": "Vec<u8>",
              "price": "Vec<PricePayloadSubPrice>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PurchasedAvgPriceData": {
              "create_bn": "u64",
              "reached_type": "u8",
              "price_data": "(u64, FractionLength)"
            },
            "PurchasedDefaultData": {
              "submit_threshold": "u8",
              "max_duration": "u64",
              "avg_keep_duration": "u64"
            },
            "PurchasedForceCleanPayload": {
              "BlockNumber": "BlockNumber",
              "purchase_id_list": "Vec<Vec<u8>>",
              "auth": "AuthorityId",
              "public": "MultiSigner"
            },
            "PurchaseId": "Vec<u8>",
            "Releases": {
              "_enum": [
                "V1_0_0_Ancestral",
                "V1_0_1_HttpErrUpgrade",
                "V1_1_0_HttpErrUpgrade",
                "V1_2_0"
              ]
            },
            "RequestInterval": "u8",
            "StatusErr": "(u16)",
            "SymbolEstimatesConfig": {
              "symbol": "Bytes",
              "estimates_type": "EstimatesType",
              "id": "u64",
              "ticket_price": "Balance",
              "symbol_completed_price": "u64",
              "symbol_fraction": "FractionLength",
              "start": "BlockNumber",
              "end": "BlockNumber",
              "distribute": "BlockNumber",
              "deviation": "Option<Permill>",
              "range": "Option<Vec<u64>>",
              "total_reward": "Balance",
              "state": "EstimatesState"
            }
          }
        }
      ]
    },
    "asgard": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "farming": {
          "getFarmingRewards": {
            "description": "Get farming rewards",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "pid",
                "type": "PoolId"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(CurrencyId, Balance)>",
            "isSubscription": false,
            "jsonrpc": "farming_getFarmingRewards",
            "method": "getFarmingRewards",
            "section": "farming"
          },
          "getGaugeRewards": {
            "description": "Get gauge rewards",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "pid",
                "type": "PoolId"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(CurrencyId, Balance)>",
            "isSubscription": false,
            "jsonrpc": "farming_getGaugeRewards",
            "method": "getGaugeRewards",
            "section": "farming"
          }
        },
        "flexibleFee": {
          "getFeeTokenAndAmount": {
            "description": "Get charging token type and amount in terms of flexible transaction fee.",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "extrinsic",
                "type": "Bytes"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(CurrencyId, U256)",
            "isSubscription": false,
            "jsonrpc": "flexibleFee_getFeeTokenAndAmount",
            "method": "getFeeTokenAndAmount",
            "section": "flexibleFee"
          }
        },
        "salp": {
          "getContribution": {
            "description": "salp getContribution",
            "params": [
              {
                "name": "index",
                "type": "ParaId"
              },
              {
                "name": "who",
                "type": "AccountIdOf"
              }
            ],
            "type": "(Balance, ContributionStatus)",
            "isSubscription": false,
            "jsonrpc": "salp_getContribution",
            "method": "getContribution",
            "section": "salp"
          },
          "getLiteContribution": {
            "description": "salp getLiteContribution",
            "params": [
              {
                "name": "index",
                "type": "ParaId"
              },
              {
                "name": "who",
                "type": "AccountIdOf"
              }
            ],
            "type": "(Balance, ContributionStatus)",
            "isSubscription": false,
            "jsonrpc": "salp_getLiteContribution",
            "method": "getLiteContribution",
            "section": "salp"
          }
        },
        "vtokenMint": {
          "getVtokenMintRate": {
            "description": "Get current vtoken mint rate.",
            "params": [
              {
                "name": "asset_id",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "String",
            "isSubscription": false,
            "jsonrpc": "vtokenMint_getVtokenMintRate",
            "method": "getVtokenMintRate",
            "section": "vtokenMint"
          }
        },
        "zenlinkProtocol": {
          "getAllAssets": {
            "description": "zenlinkProtocol getAllAssets",
            "params": [
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<ZenlinkAssetId>",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getAllAssets",
            "method": "getAllAssets",
            "section": "zenlinkProtocol"
          },
          "getBalance": {
            "description": "zenlinkProtocol getBalance",
            "params": [
              {
                "name": "asset_id",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "String",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getBalance",
            "method": "getBalance",
            "section": "zenlinkProtocol"
          },
          "getSovereignsInfo": {
            "description": "Get the ownership of a certain currency for each parachain.",
            "params": [
              {
                "name": "asset_id",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(u32, AccountId, String)",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getSovereignsInfo",
            "method": "getSovereignsInfo",
            "section": "zenlinkProtocol"
          },
          "getPairByAssetId": {
            "description": "Get the detailed information of a particular exchange pair.",
            "params": [
              {
                "name": "asset_0",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "asset_1",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "PairInfo",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getPairByAssetId",
            "method": "getPairByAssetId",
            "section": "zenlinkProtocol"
          },
          "getAmountInPrice": {
            "description": "Get the output token amount for an exact input token amount.",
            "params": [
              {
                "name": "supply",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "path",
                "type": "Vec<ZenlinkAssetId>"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "u128",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getAmountInPrice",
            "method": "getAmountInPrice",
            "section": "zenlinkProtocol"
          },
          "getAmountOutPrice": {
            "description": "Get the input token amount for an exact output token amount.",
            "params": [
              {
                "name": "supply",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "path",
                "type": "Vec<ZenlinkAssetId>"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "u128",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getAmountOutPrice",
            "method": "getAmountOutPrice",
            "section": "zenlinkProtocol"
          },
          "getEstimateLptoken": {
            "description": "Get the estimated number of LP token acquired given the desired and minimum amount for both in-token and out-token.",
            "params": [
              {
                "name": "asset_0",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "asset_1",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "amount_0_desired",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "amount_1_desired",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "amount_0_min",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "amount_1_min",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "u128",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getEstimateLptoken",
            "method": "getEstimateLptoken",
            "section": "zenlinkProtocol"
          }
        },
        "liquidityMining": {
          "getRewards": {
            "description": "Get the rewards users deserve",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "pid",
                "type": "PoolId"
              },
              {
                "name": "pallet_instance",
                "type": "U32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(CurrencyId, Balance)>",
            "isSubscription": false,
            "jsonrpc": "liquidityMining_getRewards",
            "method": "getRewards",
            "section": "liquidityMining"
          }
        }
      },
      "types": [
        {
          "minmax": [
            0,
            901
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "pool_id": "PoolId",
              "keeper": "AccountId",
              "investor": "Option<AccountId>",
              "trading_pair": "(CurrencyId, CurrencyId)",
              "duration": "BlockNumber",
              "type": "PoolType",
              "min_deposit_to_start": "Balance",
              "after_block_to_start": "BlockNumber",
              "deposit": "Balance",
              "rewards": "BTreeMap<CurrencyId, RewardData>",
              "update_b": "BlockNumber",
              "state": "PoolState",
              "block_startup": "Option<BlockNumber>",
              "redeem_limit_time": "BlockNumber",
              "unlock_limit_nums": "u32",
              "pending_unlock_nums": "u32"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "BiddingOrderId": "u64",
            "EraId": "u32",
            "BiddingOrderUnit": {
              "bidder_id": "AccountId",
              "token_id": "AssetId",
              "block_num": "BlockNumber",
              "votes": "Balance",
              "annual_roi": "Permill",
              "validator": "AccountId"
            },
            "BiddingOrderUnitOf": "BiddingOrderUnit",
            "VersionId": "u32",
            "PermissionName": "u64",
            "PermissionLevel": {
              "actor": "AccountName",
              "permission": "PermissionName"
            },
            "Action": {
              "account": "AccountName",
              "name": "ActionName",
              "authorization": "Vec<PermissionLevel>",
              "data": "Vec<u8>"
            },
            "AccountName": "u64",
            "Checksum256": "([u8;32])",
            "ActionName": "u64",
            "FlatMap": {
              "map": "Vec<(ActionName, u64)>"
            },
            "UnsignedInt": "u32",
            "ActionReceipt": {
              "receiver": "AccountName",
              "act_digest": "Checksum256",
              "global_sequence": "u64",
              "recv_sequence": "u64",
              "auth_sequence": "FlatMap<AccountName, u64>",
              "code_sequence": "UnsignedInt",
              "abi_sequence": "UnsignedInt"
            },
            "BlockchainType": {
              "_enum": [
                "BIFROST",
                "EOS",
                "IOST"
              ]
            },
            "Precision": "u32",
            "BridgeAssetSymbol": {
              "blockchain": "BlockchainType",
              "symbol": "Vec<u8>",
              "precision": "Precision"
            },
            "PublicKey": {
              "type_": "UnsignedInt",
              "data": "[u8;33]"
            },
            "ProducerKey": {
              "producer_name": "AccountName",
              "block_signing_key": "PublicKey"
            },
            "ProducerSchedule": {
              "version": "u32",
              "producers": "Vec<ProducerKey>"
            },
            "bridgeEosSignature": {
              "type_": "UnsignedInt",
              "data": "[u8;65]"
            },
            "BlockTimestamp": "(u32)",
            "Extension": "(u16, Vec<u8>)",
            "BlockHeader": {
              "timestamp": "BlockTimestamp",
              "producer": "AccountName",
              "confirmed": "u16",
              "previous": "Checksum256",
              "transaction_mroot": "Checksum256",
              "action_mroot": "Checksum256",
              "schedule_version": "u32",
              "new_producers": "Option<ProducerSchedule>",
              "header_extensions": "Vec<Extension>"
            },
            "SignedBlockHeader": {
              "block_header": "BlockHeader",
              "producer_signature": "bridgeEosSignature"
            },
            "Checksum256Array": "Vec<Checksum256>",
            "IncrementalMerkle": {
              "_node_count": "u64",
              "_active_nodes": "Checksum256Array"
            },
            "TxSig": {
              "signature": "Vec<u8>",
              "author": "AccountId"
            },
            "MultiSig": {
              "signatures": "Vec<TxSig>",
              "threshold": "u8"
            },
            "MultiSigTx": {
              "chain_id": "Vec<u8>",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "Action",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Sent": {
              "tx_id": "Vec<u8>",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Succeeded": {
              "tx_id": "Vec<u8>"
            },
            "Failed": {
              "tx_id": "Vec<u8>",
              "reason": "Vec<u8>"
            },
            "TxOut": {
              "_enum": {
                "Initialized": "MultiSigTx",
                "Created": "MultiSigTx",
                "SignComplete": "MultiSigTx",
                "Sent": "Sent",
                "Succeeded": "Succeeded",
                "Failed": "Failed"
              }
            },
            "TransactionStatus": {
              "_enum": [
                "Initialized",
                "Created",
                "SignComplete",
                "Sent",
                "Succeeded",
                "Failed"
              ]
            },
            "ProducerAuthoritySchedule": {
              "version": "u32",
              "producers": "Vec<ProducerAuthority>"
            },
            "ProducerAuthority": {
              "producer_name": "ActionName",
              "authority": "BlockSigningAuthority"
            },
            "BlockSigningAuthority": "(UnsignedInt, BlockSigningAuthorityV0)",
            "BlockSigningAuthorityV0": {
              "threshold": "u32",
              "keyWeights": "Vec<KeyWeight>"
            },
            "KeyWeight": {
              "key": "PublicKey",
              "weight": "u16"
            },
            "BancorPool": {
              "currency_id": "CurrencyId",
              "token_pool": "Balance",
              "vstoken_pool": "Balance",
              "token_ceiling": "Balance",
              "token_base_supply": "Balance",
              "vstoken_base_supply": "Balance"
            },
            "IostAction": {
              "contract": "Vec<u8>",
              "action_name": "Vec<u8>",
              "data": "Vec<u8>"
            },
            "IostMultiSigTx": {
              "chain_id": "i32",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "IostAction",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Processing": {
              "tx_id": "Vec<u8>",
              "multi_sig_tx": "IostMultiSigTx"
            },
            "IostTxOut": {
              "_enum": {
                "Initial": "IostMultiSigTx",
                "Generated": "IostMultiSigTx",
                "Signed": "IostMultiSigTx",
                "Processing": "Processing",
                "Success": "Vec<u8>",
                "Fail": "Failed"
              }
            },
            "PalletBalanceOf": "Balance",
            "ExtraFeeName": {
              "_enum": [
                "SalpContribute",
                "NoExtraFee"
              ]
            },
            "IsExtended": "bool",
            "SystemPalletId": "PalletId",
            "TimeUnit": {
              "Era": "U32",
              "SlashingSpan": "U32"
            },
            "ledger": {
              "Substrate": "SubstrateLedger"
            },
            "SubstrateLedger": {
              "account": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>"
            },
            "UnlockChunk": {
              "value": "Balance",
              "unlock_time": "TimeUnit"
            },
            "MinimumsMaximums": {
              "delegator_bonded_minimum": "Balance",
              "bond_extra_minimum": "Balance",
              "unbond_minimum": "Balance",
              "rebond_minimum": "Balance",
              "unbond_record_maximum": "U32",
              "validators_back_maximum": "U32",
              "delegator_active_staking_maximum": "Balance"
            },
            "TrieIndex": "u32",
            "FundInfo": {
              "raised": "Balance",
              "cap": "Balance",
              "first_slot": "LeasePeriod",
              "last_slot": "LeasePeriod",
              "trie_index": "TrieIndex",
              "status": "FundStatus"
            },
            "RedeemStatus": "BalanceOf",
            "FundStatus": {
              "_enum": {
                "Ongoing": 0,
                "Retired": 1,
                "Success": 2,
                "Failed": 3,
                "RefundWithdrew": 4,
                "RedeemWithdrew": 5,
                "End": 6
              }
            },
            "ContributionStatus": {
              "_enum": [
                "Idle",
                "Refunded",
                "Redeemed",
                "Unlocked",
                "MigratedIdle",
                "Contributing"
              ]
            },
            "CrowdloanContributeCall": {
              "_enum": {
                "CrowdloanContribute": "ContributeCall"
              }
            },
            "ContributeCall": {
              "_enum": {
                "Contribute": "Contribution"
              }
            },
            "Contribution": {
              "index": "ParaId",
              "value": "BalanceOf",
              "signature": "Option<MultiSignature>"
            },
            "Withdraw": {
              "who": "AccountIdOf",
              "index": "ParaId"
            },
            "WithdrawCall": {
              "_enum": {
                "Withdraw": "Withdraw"
              }
            },
            "ParachainTransactProxyType": {
              "_enum": {
                "Primary": 0,
                "Derived": 1
              }
            },
            "ParachainDerivedProxyAccountType": {
              "_enum": {
                "Salp": 0,
                "Staking": 1
              }
            },
            "Keys": "SessionKeys1",
            "ParachainTransactType": {
              "_enum": {
                "Xcm": 0,
                "Proxy": 1
              }
            },
            "RpcContributionStatus": {
              "_enum": {
                "Idle": 0,
                "Contributing": 1,
                "Refunded": 2,
                "Unlocked": 3,
                "Redeemed": 4
              }
            },
            "RewardRecord": {
              "account_id": "AccountId",
              "record_amount": "Balance"
            },
            "PoolId": "u32",
            "SwapFee": "u128",
            "PoolDetails": {
              "owner": "AccountId",
              "swap_fee_rate": "SwapFee",
              "active": "bool"
            },
            "PoolWeight": "Balance",
            "PoolToken": "u128",
            "PoolCreateTokenDetails": {
              "token_id": "AssetId",
              "token_balance": "Balance",
              "token_weight": "PoolWeight"
            },
            "MaxLocksOf": "u32",
            "BifrostVestingInfo": {
              "locked": "Balance",
              "per_block": "Balance",
              "starting_block": "BlockNumber"
            },
            "OracleKey": "CurrencyId",
            "BlockNumberFor": "BlockNumber",
            "OrderInfo": {
              "owner": "AccountIdOf",
              "vsbond": "CurrencyId",
              "amount": "BalanceOf",
              "remain": "BalanceOf",
              "total_price": "BalanceOf",
              "order_id": "OrderId",
              "order_type": "OrderType",
              "remain_price": "BalanceOf"
            },
            "OrderId": "u64",
            "OrderType": {
              "_enum": {
                "Sell": 0,
                "Buy": 1
              }
            },
            "UnlockId": "U32",
            "ZenlinkAssetId": {
              "chain_id": "u32",
              "asset_type": "u8",
              "asset_index": "u64"
            },
            "ZenlinkAssetBalance": "u128",
            "PairInfo": {
              "asset0": "ZenlinkAssetId",
              "asset1": "ZenlinkAssetId",
              "account": "AccountId",
              "totalLiquidity": "ZenlinkAssetBalance",
              "holdingLiquidity": "ZenlinkAssetBalance",
              "reserve0": "ZenlinkAssetBalance",
              "reserve1": "ZenlinkAssetBalance",
              "lpAssetId": "ZenlinkAssetId"
            },
            "PairMetadata": {
              "pair_account": "AccountId",
              "target_supply": "ZenlinkAssetBalance"
            },
            "BootstrapParamter": {
              "min_contribution": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "target_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "accumulated_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "end_block_number": "BlockNumber",
              "pair_account": "AccountId"
            },
            "PairStatus": {
              "_enum": {
                "Trading": "PairMetadata",
                "Bootstrap": "BootstrapParamter",
                "Disable": null
              }
            },
            "TokenSymbol": {
              "_enum": {
                "ASG": 0,
                "BNC": 1,
                "KUSD": 2,
                "DOT": 3,
                "KSM": 4,
                "ETH": 5,
                "KAR": 6,
                "ZLK": 7,
                "PHA": 8,
                "RMRK": 9,
                "MOVR": 10
              }
            },
            "CurrencyId": {
              "_enum": {
                "Native": "TokenSymbol",
                "VToken": "TokenSymbol",
                "Token": "TokenSymbol",
                "Stable": "TokenSymbol",
                "VSToken": "TokenSymbol",
                "VSBond": "(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",
                "LPToken": "(TokenSymbol, u8, TokenSymbol, u8)"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "TAssetBalance": "Balance",
            "AmountOf": "Balance",
            "StorageVersion": "Releases",
            "ShareWeight": "Balance",
            "Currency": "CurrencyIdOf",
            "Amount": "AmountOf",
            "NodePrimitivesCurrencyCurrencyId": "CurrencyId",
            "OrmlTokensBalanceLock": "BalanceLock",
            "OrmlTokensAccountData": "OrmlAccountData",
            "OrmlTokensReserveData": "(Currency, u8, Amount, u128)",
            "TransferOriginType": {
              "_enum": {
                "FromSelf": 0,
                "FromRelayChain": 1,
                "FromSiblingParaChain": 2
              }
            },
            "PoolType": {
              "_enum": {
                "Mining": 0,
                "Farming": 1,
                "EBFarming": 2
              }
            },
            "PoolState": {
              "_enum": {
                "UnCharged": 0,
                "Charged": 1,
                "Ongoing": 2,
                "Retired": 3,
                "Dead": 4
              }
            },
            "DepositData": {
              "deposit": "Balance",
              "gain_avgs": "BTreeMap<CurrencyId, FixedU128>",
              "update_b": "BlockNumber",
              "pending_unlocks": "Vec<(BlockNumber, Balance)>"
            },
            "RewardData": {
              "total": "Balance",
              "per_block": "Balance",
              "claimed": "Balance",
              "gain_avg": "FixedU128"
            },
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "MultiLocation": "MultiLocationV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            902,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "pool_id": "PoolId",
              "keeper": "AccountId",
              "investor": "Option<AccountId>",
              "trading_pair": "(CurrencyId, CurrencyId)",
              "duration": "BlockNumber",
              "type": "PoolType",
              "min_deposit_to_start": "Balance",
              "after_block_to_start": "BlockNumber",
              "deposit": "Balance",
              "rewards": "BTreeMap<CurrencyId, RewardData>",
              "update_b": "BlockNumber",
              "state": "PoolState",
              "block_startup": "Option<BlockNumber>",
              "redeem_limit_time": "BlockNumber",
              "unlock_limit_nums": "u32",
              "pending_unlock_nums": "u32"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "BiddingOrderId": "u64",
            "EraId": "u32",
            "BiddingOrderUnit": {
              "bidder_id": "AccountId",
              "token_id": "AssetId",
              "block_num": "BlockNumber",
              "votes": "Balance",
              "annual_roi": "Permill",
              "validator": "AccountId"
            },
            "BiddingOrderUnitOf": "BiddingOrderUnit",
            "VersionId": "u32",
            "PermissionName": "u64",
            "PermissionLevel": {
              "actor": "AccountName",
              "permission": "PermissionName"
            },
            "Action": {
              "account": "AccountName",
              "name": "ActionName",
              "authorization": "Vec<PermissionLevel>",
              "data": "Vec<u8>"
            },
            "AccountName": "u64",
            "Checksum256": "([u8;32])",
            "ActionName": "u64",
            "FlatMap": {
              "map": "Vec<(ActionName, u64)>"
            },
            "UnsignedInt": "u32",
            "ActionReceipt": {
              "receiver": "AccountName",
              "act_digest": "Checksum256",
              "global_sequence": "u64",
              "recv_sequence": "u64",
              "auth_sequence": "FlatMap<AccountName, u64>",
              "code_sequence": "UnsignedInt",
              "abi_sequence": "UnsignedInt"
            },
            "BlockchainType": {
              "_enum": [
                "BIFROST",
                "EOS",
                "IOST"
              ]
            },
            "Precision": "u32",
            "BridgeAssetSymbol": {
              "blockchain": "BlockchainType",
              "symbol": "Vec<u8>",
              "precision": "Precision"
            },
            "PublicKey": {
              "type_": "UnsignedInt",
              "data": "[u8;33]"
            },
            "ProducerKey": {
              "producer_name": "AccountName",
              "block_signing_key": "PublicKey"
            },
            "ProducerSchedule": {
              "version": "u32",
              "producers": "Vec<ProducerKey>"
            },
            "bridgeEosSignature": {
              "type_": "UnsignedInt",
              "data": "[u8;65]"
            },
            "BlockTimestamp": "(u32)",
            "Extension": "(u16, Vec<u8>)",
            "BlockHeader": {
              "timestamp": "BlockTimestamp",
              "producer": "AccountName",
              "confirmed": "u16",
              "previous": "Checksum256",
              "transaction_mroot": "Checksum256",
              "action_mroot": "Checksum256",
              "schedule_version": "u32",
              "new_producers": "Option<ProducerSchedule>",
              "header_extensions": "Vec<Extension>"
            },
            "SignedBlockHeader": {
              "block_header": "BlockHeader",
              "producer_signature": "bridgeEosSignature"
            },
            "Checksum256Array": "Vec<Checksum256>",
            "IncrementalMerkle": {
              "_node_count": "u64",
              "_active_nodes": "Checksum256Array"
            },
            "TxSig": {
              "signature": "Vec<u8>",
              "author": "AccountId"
            },
            "MultiSig": {
              "signatures": "Vec<TxSig>",
              "threshold": "u8"
            },
            "MultiSigTx": {
              "chain_id": "Vec<u8>",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "Action",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Sent": {
              "tx_id": "Vec<u8>",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Succeeded": {
              "tx_id": "Vec<u8>"
            },
            "Failed": {
              "tx_id": "Vec<u8>",
              "reason": "Vec<u8>"
            },
            "TxOut": {
              "_enum": {
                "Initialized": "MultiSigTx",
                "Created": "MultiSigTx",
                "SignComplete": "MultiSigTx",
                "Sent": "Sent",
                "Succeeded": "Succeeded",
                "Failed": "Failed"
              }
            },
            "TransactionStatus": {
              "_enum": [
                "Initialized",
                "Created",
                "SignComplete",
                "Sent",
                "Succeeded",
                "Failed"
              ]
            },
            "ProducerAuthoritySchedule": {
              "version": "u32",
              "producers": "Vec<ProducerAuthority>"
            },
            "ProducerAuthority": {
              "producer_name": "ActionName",
              "authority": "BlockSigningAuthority"
            },
            "BlockSigningAuthority": "(UnsignedInt, BlockSigningAuthorityV0)",
            "BlockSigningAuthorityV0": {
              "threshold": "u32",
              "keyWeights": "Vec<KeyWeight>"
            },
            "KeyWeight": {
              "key": "PublicKey",
              "weight": "u16"
            },
            "BancorPool": {
              "currency_id": "CurrencyId",
              "token_pool": "Balance",
              "vstoken_pool": "Balance",
              "token_ceiling": "Balance",
              "token_base_supply": "Balance",
              "vstoken_base_supply": "Balance"
            },
            "IostAction": {
              "contract": "Vec<u8>",
              "action_name": "Vec<u8>",
              "data": "Vec<u8>"
            },
            "IostMultiSigTx": {
              "chain_id": "i32",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "IostAction",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Processing": {
              "tx_id": "Vec<u8>",
              "multi_sig_tx": "IostMultiSigTx"
            },
            "IostTxOut": {
              "_enum": {
                "Initial": "IostMultiSigTx",
                "Generated": "IostMultiSigTx",
                "Signed": "IostMultiSigTx",
                "Processing": "Processing",
                "Success": "Vec<u8>",
                "Fail": "Failed"
              }
            },
            "PalletBalanceOf": "Balance",
            "ExtraFeeName": {
              "_enum": [
                "SalpContribute",
                "NoExtraFee"
              ]
            },
            "IsExtended": "bool",
            "SystemPalletId": "PalletId",
            "TimeUnit": {
              "Era": "U32",
              "SlashingSpan": "U32"
            },
            "ledger": {
              "Substrate": "SubstrateLedger"
            },
            "SubstrateLedger": {
              "account": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>"
            },
            "UnlockChunk": {
              "value": "Balance",
              "unlock_time": "TimeUnit"
            },
            "MinimumsMaximums": {
              "delegator_bonded_minimum": "Balance",
              "bond_extra_minimum": "Balance",
              "unbond_minimum": "Balance",
              "rebond_minimum": "Balance",
              "unbond_record_maximum": "U32",
              "validators_back_maximum": "U32",
              "delegator_active_staking_maximum": "Balance"
            },
            "TrieIndex": "u32",
            "FundInfo": {
              "raised": "Balance",
              "cap": "Balance",
              "first_slot": "LeasePeriod",
              "last_slot": "LeasePeriod",
              "trie_index": "TrieIndex",
              "status": "FundStatus"
            },
            "RedeemStatus": "BalanceOf",
            "FundStatus": {
              "_enum": {
                "Ongoing": 0,
                "Retired": 1,
                "Success": 2,
                "Failed": 3,
                "RefundWithdrew": 4,
                "RedeemWithdrew": 5,
                "End": 6
              }
            },
            "ContributionStatus": {
              "_enum": [
                "Idle",
                "Refunded",
                "Redeemed",
                "Unlocked",
                "MigratedIdle",
                "Contributing"
              ]
            },
            "CrowdloanContributeCall": {
              "_enum": {
                "CrowdloanContribute": "ContributeCall"
              }
            },
            "ContributeCall": {
              "_enum": {
                "Contribute": "Contribution"
              }
            },
            "Contribution": {
              "index": "ParaId",
              "value": "BalanceOf",
              "signature": "Option<MultiSignature>"
            },
            "Withdraw": {
              "who": "AccountIdOf",
              "index": "ParaId"
            },
            "WithdrawCall": {
              "_enum": {
                "Withdraw": "Withdraw"
              }
            },
            "ParachainTransactProxyType": {
              "_enum": {
                "Primary": 0,
                "Derived": 1
              }
            },
            "ParachainDerivedProxyAccountType": {
              "_enum": {
                "Salp": 0,
                "Staking": 1
              }
            },
            "Keys": "SessionKeys1",
            "ParachainTransactType": {
              "_enum": {
                "Xcm": 0,
                "Proxy": 1
              }
            },
            "RpcContributionStatus": {
              "_enum": {
                "Idle": 0,
                "Contributing": 1,
                "Refunded": 2,
                "Unlocked": 3,
                "Redeemed": 4
              }
            },
            "RewardRecord": {
              "account_id": "AccountId",
              "record_amount": "Balance"
            },
            "PoolId": "u32",
            "SwapFee": "u128",
            "PoolDetails": {
              "owner": "AccountId",
              "swap_fee_rate": "SwapFee",
              "active": "bool"
            },
            "PoolWeight": "Balance",
            "PoolToken": "u128",
            "PoolCreateTokenDetails": {
              "token_id": "AssetId",
              "token_balance": "Balance",
              "token_weight": "PoolWeight"
            },
            "MaxLocksOf": "u32",
            "BifrostVestingInfo": {
              "locked": "Balance",
              "per_block": "Balance",
              "starting_block": "BlockNumber"
            },
            "OracleKey": "CurrencyId",
            "BlockNumberFor": "BlockNumber",
            "OrderInfo": {
              "owner": "AccountIdOf",
              "vsbond": "CurrencyId",
              "amount": "BalanceOf",
              "remain": "BalanceOf",
              "total_price": "BalanceOf",
              "order_id": "OrderId",
              "order_type": "OrderType",
              "remain_price": "BalanceOf"
            },
            "OrderId": "u64",
            "OrderType": {
              "_enum": {
                "Sell": 0,
                "Buy": 1
              }
            },
            "UnlockId": "U32",
            "ZenlinkAssetId": {
              "chain_id": "u32",
              "asset_type": "u8",
              "asset_index": "u64"
            },
            "ZenlinkAssetBalance": "u128",
            "PairInfo": {
              "asset0": "ZenlinkAssetId",
              "asset1": "ZenlinkAssetId",
              "account": "AccountId",
              "totalLiquidity": "ZenlinkAssetBalance",
              "holdingLiquidity": "ZenlinkAssetBalance",
              "reserve0": "ZenlinkAssetBalance",
              "reserve1": "ZenlinkAssetBalance",
              "lpAssetId": "ZenlinkAssetId"
            },
            "PairMetadata": {
              "pair_account": "AccountId",
              "target_supply": "ZenlinkAssetBalance"
            },
            "BootstrapParamter": {
              "min_contribution": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "target_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "accumulated_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "end_block_number": "BlockNumber",
              "pair_account": "AccountId"
            },
            "PairStatus": {
              "_enum": {
                "Trading": "PairMetadata",
                "Bootstrap": "BootstrapParamter",
                "Disable": null
              }
            },
            "TokenSymbol": {
              "_enum": {
                "ASG": 0,
                "BNC": 1,
                "KUSD": 2,
                "DOT": 3,
                "KSM": 4,
                "ETH": 5,
                "KAR": 6,
                "ZLK": 7,
                "PHA": 8,
                "RMRK": 9,
                "MOVR": 10
              }
            },
            "CurrencyId": {
              "_enum": {
                "Native": "TokenSymbol",
                "VToken": "TokenSymbol",
                "Token": "TokenSymbol",
                "Stable": "TokenSymbol",
                "VSToken": "TokenSymbol",
                "VSBond": "(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",
                "LPToken": "(TokenSymbol, u8, TokenSymbol, u8)"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "TAssetBalance": "Balance",
            "AmountOf": "Balance",
            "StorageVersion": "Releases",
            "ShareWeight": "Balance",
            "Currency": "CurrencyIdOf",
            "Amount": "AmountOf",
            "NodePrimitivesCurrencyCurrencyId": "CurrencyId",
            "OrmlTokensBalanceLock": "BalanceLock",
            "OrmlTokensAccountData": "OrmlAccountData",
            "OrmlTokensReserveData": "(Currency, u8, Amount, u128)",
            "TransferOriginType": {
              "_enum": {
                "FromSelf": 0,
                "FromRelayChain": 1,
                "FromSiblingParaChain": 2
              }
            },
            "PoolType": {
              "_enum": {
                "Mining": 0,
                "Farming": 1,
                "EBFarming": 2
              }
            },
            "PoolState": {
              "_enum": {
                "UnCharged": 0,
                "Charged": 1,
                "Ongoing": 2,
                "Retired": 3,
                "Dead": 4
              }
            },
            "DepositData": {
              "deposit": "Balance",
              "gain_avgs": "BTreeMap<CurrencyId, FixedU128>",
              "update_b": "BlockNumber",
              "pending_unlocks": "Vec<(BlockNumber, Balance)>"
            },
            "RewardData": {
              "total": "Balance",
              "per_block": "Balance",
              "claimed": "Balance",
              "gain_avg": "FixedU128"
            },
            "MultiAsset": "MultiAssetV1",
            "Xcm": "XcmV1",
            "XcmOrder": "XcmOrderV1",
            "MultiLocation": "MultiLocationV1",
            "XcmError": "XcmErrorV1",
            "Response": "ResponseV1"
          }
        }
      ],
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "astar": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Keys": "AccountId",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AmountOf": "Amount",
            "Amount": "i128",
            "SmartContract": {
              "_enum": {
                "Evm": "H160",
                "Wasm": "AccountId"
              }
            },
            "EraStakingPoints": {
              "total": "Balance",
              "stakers": "BTreeMap<AccountId, Balance>",
              "formerStakedEra": "EraIndex",
              "claimedRewards": "Balance"
            },
            "EraRewardAndStake": {
              "rewards": "Balance",
              "staked": "Balance"
            },
            "EraIndex": "u32"
          }
        }
      ]
    },
    "automata": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "ResourceId": "[u8; 32]",
            "DepositNonce": "u64",
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "ProposalStatus"
            },
            "BridgeTokenId": "U256",
            "BridgeChainId": "u8",
            "VestingPlan": {
              "start_time": "u64",
              "cliff_duration": "u64",
              "total_duration": "u64",
              "interval": "u64",
              "initial_amount": "Balance",
              "total_amount": "Balance",
              "vesting_during_cliff": "bool"
            },
            "ProposalId": "u32",
            "ProjectId": "u32",
            "ChainIndex": "u32",
            "Protocol": {
              "_enum": [
                "Solidity",
                "Substrate"
              ]
            },
            "Chain": {
              "_protocol": "Protocol"
            },
            "CrossChainAccount": {
              "_enum": {
                "Solidity": "H160",
                "Substrate": "AccountId"
              }
            },
            "IpfsHash": "Text",
            "SolidityStrategy": {
              "_enum": {
                "ERC20Balance": "H160"
              }
            },
            "SubstrateStrategy": {
              "_enum": [
                "NativeBalance"
              ]
            },
            "Strategy": {
              "_enum": {
                "Solidity": "SolidityStrategy",
                "Substrate": "SubstrateStrategy"
              }
            },
            "Workspace": {
              "_chain": "ChainIndex",
              "strategies": "Vec<Strategy>"
            },
            "UserGroup": {
              "owner": "CrossChainAccount",
              "admins": "Vec<CrossChainAccount>",
              "maintainers": "Vec<CrossChainAccount>",
              "proposers": "Option<Vec<CrossChainAccount>>"
            },
            "Project": {
              "usergroup": "UserGroup",
              "data": "IpfsHash",
              "workspaces": "Vec<Workspace>"
            },
            "VotingFormat": {
              "_enum": [
                "SingleChoice",
                "SplitVote"
              ]
            },
            "OptionIndex": "u8",
            "PrivacyLevel": {
              "_enum": {
                "Opaque": "u8",
                "Rank": "Null",
                "Private": "Null",
                "Public": "Null",
                "Mixed": "Null"
              }
            },
            "VotingPower": "U256",
            "DAOProposalState": {
              "finalized": "bool",
              "snapshots": "Vec<Option<U256>>",
              "blacklisted": "bool",
              "votes": "Vec<VotingPower>",
              "pub_voters": "Option<IpfsHash>",
              "updates": "u32"
            },
            "DAOProposal": {
              "_author": "CrossChainAccount",
              "_voting_format": "VotingFormat",
              "_option_count": "OptionIndex",
              "_data": "IpfsHash",
              "_privacy": "PrivacyLevel",
              "_start": "u64",
              "_end": "u64",
              "_frequency": "Option<u64>",
              "_workspaces": "Vec<Workspace>",
              "state": "DAOProposalState"
            },
            "VoteUpdate": {
              "project": "ProjectId",
              "proposal": "ProposalId",
              "votes": "Vec<VotingPower>",
              "pub_voters": "Option<IpfsHash>"
            }
          }
        }
      ]
    },
    "bajun": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress"
          }
        }
      ]
    },
    "basilisk": {
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData"
        }
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AssetPair": {
              "asset_in": "AssetId",
              "asset_out": "AssetId"
            },
            "Amount": "i128",
            "AmountOf": "Amount",
            "Address": "AccountId",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "Fee": {
              "numerator": "u32",
              "denominator": "u32"
            },
            "BalanceInfo": {
              "amount": "Balance",
              "assetId": "AssetId"
            },
            "Chain": {
              "genesisHash": "Vec<u8>",
              "lastBlockHash": "Vec<u8>"
            },
            "Currency": "AssetId",
            "CurrencyId": "AssetId",
            "CurrencyIdOf": "AssetId",
            "Intention": {
              "who": "AccountId",
              "asset_sell": "AssetId",
              "asset_buy": "AssetId",
              "amount": "Balance",
              "discount": "bool",
              "sell_or_buy": "IntentionType"
            },
            "IntentionId": "Hash",
            "IntentionType": {
              "_enum": [
                "SELL",
                "BUY"
              ]
            },
            "LookupSource": "AccountId",
            "Price": "Balance",
            "ClassId": "u64",
            "TokenId": "u64",
            "ClassData": {
              "is_pool": "bool"
            },
            "TokenData": {
              "locked": "bool"
            },
            "ClassInfo": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "TokenInfo": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "ClassInfoOf": "ClassInfo",
            "TokenInfoOf": "TokenInfo",
            "ClassIdOf": "ClassId",
            "TokenIdOf": "TokenId",
            "OrderedSet": "Vec<AssetId>",
            "VestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "period_count": "u32",
              "per_period": "Compact<Balance>"
            },
            "VestingScheduleOf": "VestingSchedule",
            "LBPWeight": "u32",
            "WeightCurveType": {
              "_enum": [
                "Linear"
              ]
            },
            "PoolId": "AccountId",
            "BalanceOf": "Balance",
            "AssetType": {
              "_enum": {
                "Token": "Null",
                "PoolShare": "(AssetId,AssetId)"
              }
            },
            "Pool": {
              "owner": "AccountId",
              "start": "BlockNumber",
              "end": "BlockNumber",
              "assets": "AssetPair",
              "initial_weights": "LBPWeight",
              "final_weights": "LBPWeight",
              "weight_curve": "WeightCurveType",
              "pausable": "bool",
              "paused": "bool",
              "fee": "Fee",
              "fee_receiver": "AccountId"
            },
            "AssetDetails": {
              "name": "Vec<u8>",
              "asset_type": "AssetType",
              "existential_deposit": "Balance",
              "locked": "bool"
            },
            "AssetDetailsT": "AssetDetails",
            "AssetMetadata": {
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "AssetInstance": "AssetInstanceV1",
            "MultiLocation": "MultiLocationV1",
            "MultiAsset": "MultiAssetV1",
            "Xcm": "XcmV1",
            "XcmOrder": "XcmOrderV1"
          }
        }
      ]
    },
    "beresheet": {
      "alias": {
        "voting": {
          "Tally": "VotingTally"
        }
      },
      "types": [
        {
          "minmax": [
            0,
            31
          ],
          "types": {
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "Balance2": "u128",
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "voting::VoteType": "VoteType",
            "voting::TallyType": "TallyType",
            "voting::Tally": "VotingTally",
            "Keys": "SessionKeys4",
            "StakingLedger": "StakingLedgerTo240",
            "Votes": "VotesTo230",
            "ReferendumInfo": "ReferendumInfoTo239",
            "Weight": "u32",
            "DispatchInfo": "DispatchInfoTo244",
            "OpenTip": "OpenTipTo225",
            "ContractExecResult": "ContractExecResultTo255",
            "CompactAssignments": "CompactAssignmentsTo257",
            "RewardDestination": "RewardDestinationTo257",
            "RefCount": "RefCountTo259",
            "AccountInfo": "AccountInfoWithRefCount",
            "Address": "IndicesLookupSource",
            "LookupSource": "IndicesLookupSource"
          }
        },
        {
          "minmax": [
            32,
            38
          ],
          "types": {
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "Balance2": "u128",
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "voting::VoteType": "VoteType",
            "voting::TallyType": "TallyType",
            "voting::Tally": "VotingTally",
            "CompactAssignments": "CompactAssignmentsTo257",
            "ContractExecResult": "ContractExecResultTo255",
            "RewardDestination": "RewardDestinationTo257",
            "RefCount": "u32",
            "AccountInfo": "AccountInfoWithRefCount",
            "Address": "IndicesLookupSource",
            "LookupSource": "IndicesLookupSource"
          }
        },
        {
          "minmax": [
            39,
            41
          ],
          "types": {
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "Balance2": "u128",
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "voting::VoteType": "VoteType",
            "voting::TallyType": "TallyType",
            "voting::Tally": "VotingTally",
            "RefCount": "u32",
            "AccountInfo": "AccountInfoWithRefCount",
            "Address": "IndicesLookupSource",
            "LookupSource": "IndicesLookupSource"
          }
        },
        {
          "minmax": [
            42,
            46
          ],
          "types": {
            "Balance2": "u128",
            "ChainId": "u8",
            "DepositNonce": "u64",
            "ResourceId": "[u8; 32]",
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "staus": "ProposalStatus",
              "expiry": "BlockNumber"
            },
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "AccountInfo": "AccountInfoWithRefCount",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress"
          }
        },
        {
          "minmax": [
            47,
            null
          ],
          "types": {
            "Balance2": "u128",
            "DepositNonce": "u64",
            "ResourceId": "[u8; 32]",
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "staus": "ProposalStatus",
              "expiry": "BlockNumber"
            },
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "CID": "Vec<u8>",
            "Properties": {
              "_set": {
                "Transferable": 1,
                "Burnable": 2
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties"
            },
            "TokenData": {
              "deposit": "Balance"
            },
            "ClassInfo": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "ClassInfoOf": "ClassInfo",
            "TokenInfo": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "TokenInfoOf": "TokenInfo",
            "TokenId": "u64",
            "ClassIdOf": "ClassId",
            "TokenIdOf": "TokenId",
            "Amount": "i128",
            "AmountOf": "Amount",
            "Approval": {
              "amount": "Balance",
              "deposit": "Balance"
            },
            "ApprovalKey": {
              "owner": "AccountId",
              "delegate": "AccountId"
            },
            "Commitment": "ScalarData",
            "CurrencyId": "u64",
            "CurrencyIdOf": "CurrencyId",
            "DustHandlerType": {
              "_enum": {
                "Burn": "Null",
                "Transfer": "AccountId"
              }
            },
            "HashFunction": {
              "_enum": [
                "PoseidonDefault",
                "PoseidonExp3",
                "PoseidonExp5",
                "PoseidonExp17",
                "MiMC",
                "Blake2",
                "Sha256"
              ]
            },
            "Manager": {
              "accountId": "AccountId",
              "required": "bool"
            },
            "MerkleTree": {
              "leaf_count": "u32",
              "max_leaves": "u32",
              "depth": "u8",
              "root_hash": "ScalarData",
              "edge_nodes": "Vec<ScalarData>",
              "hasher": "HashFunction",
              "should_store_leaves": "bool"
            },
            "MixerInfo": {
              "minimum_deposit_length_for_reward": "BlockNumber",
              "fixed_deposit_size": "Balance",
              "currency_id": "CurrencyIdOf"
            },
            "Nullifier": "ScalarData",
            "ScalarData": "[u8; 32]",
            "TokenDetails": {
              "owner": "AccountId",
              "issuer": "AccountId",
              "admin": "AccountId",
              "freezer": "AccountId",
              "supply": "Balance",
              "deposit": "Balance",
              "min_balance": "Balance",
              "approvals": "u32",
              "is_frozen": "bool",
              "dust_type": "DustHandlerType"
            },
            "TokenMetadata": {
              "deposit": "Balance",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "is_frozen": "bool"
            },
            "TreeId": "u32",
            "WithdrawProof": {
              "mixer_id": "TreeId",
              "cached_block": "BlockNumber",
              "cached_root": "ScalarData",
              "comms": "Vec<Commitment>",
              "nullifier_hash": "ScalarData",
              "proof_bytes": "Vec<u8>",
              "leaf_index_commitments": "Vec<Commitment>",
              "proof_commitments": "Vec<Commitment>",
              "recipient": "Option<AccountId>",
              "relayer": "Option<AccountId>"
            },
            "ETHBlock": {
              "inner": "Block"
            },
            "ETHReceipts": {
              "inner": "Vec<EthReceipt>"
            },
            "ETHTxStatuses": {
              "inner": "Vec<EthTransactionStatus>"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress"
          }
        }
      ]
    },
    "bifrost": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "farming": {
          "getFarmingRewards": {
            "description": "Get farming rewards",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "pid",
                "type": "PoolId"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(CurrencyId, Balance)>",
            "isSubscription": false,
            "jsonrpc": "farming_getFarmingRewards",
            "method": "getFarmingRewards",
            "section": "farming"
          },
          "getGaugeRewards": {
            "description": "Get gauge rewards",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "pid",
                "type": "PoolId"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(CurrencyId, Balance)>",
            "isSubscription": false,
            "jsonrpc": "farming_getGaugeRewards",
            "method": "getGaugeRewards",
            "section": "farming"
          }
        },
        "flexibleFee": {
          "getFeeTokenAndAmount": {
            "description": "Get charging token type and amount in terms of flexible transaction fee.",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "extrinsic",
                "type": "Bytes"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(CurrencyId, U256)",
            "isSubscription": false,
            "jsonrpc": "flexibleFee_getFeeTokenAndAmount",
            "method": "getFeeTokenAndAmount",
            "section": "flexibleFee"
          }
        },
        "salp": {
          "getContribution": {
            "description": "salp getContribution",
            "params": [
              {
                "name": "index",
                "type": "ParaId"
              },
              {
                "name": "who",
                "type": "AccountIdOf"
              }
            ],
            "type": "(Balance, ContributionStatus)",
            "isSubscription": false,
            "jsonrpc": "salp_getContribution",
            "method": "getContribution",
            "section": "salp"
          },
          "getLiteContribution": {
            "description": "salp getLiteContribution",
            "params": [
              {
                "name": "index",
                "type": "ParaId"
              },
              {
                "name": "who",
                "type": "AccountIdOf"
              }
            ],
            "type": "(Balance, ContributionStatus)",
            "isSubscription": false,
            "jsonrpc": "salp_getLiteContribution",
            "method": "getLiteContribution",
            "section": "salp"
          }
        },
        "vtokenMint": {
          "getVtokenMintRate": {
            "description": "Get current vtoken mint rate.",
            "params": [
              {
                "name": "asset_id",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "String",
            "isSubscription": false,
            "jsonrpc": "vtokenMint_getVtokenMintRate",
            "method": "getVtokenMintRate",
            "section": "vtokenMint"
          }
        },
        "zenlinkProtocol": {
          "getAllAssets": {
            "description": "zenlinkProtocol getAllAssets",
            "params": [
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<ZenlinkAssetId>",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getAllAssets",
            "method": "getAllAssets",
            "section": "zenlinkProtocol"
          },
          "getBalance": {
            "description": "zenlinkProtocol getBalance",
            "params": [
              {
                "name": "asset_id",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "String",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getBalance",
            "method": "getBalance",
            "section": "zenlinkProtocol"
          },
          "getSovereignsInfo": {
            "description": "Get the ownership of a certain currency for each parachain.",
            "params": [
              {
                "name": "asset_id",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(u32, AccountId, String)",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getSovereignsInfo",
            "method": "getSovereignsInfo",
            "section": "zenlinkProtocol"
          },
          "getPairByAssetId": {
            "description": "Get the detailed information of a particular exchange pair.",
            "params": [
              {
                "name": "asset_0",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "asset_1",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "PairInfo",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getPairByAssetId",
            "method": "getPairByAssetId",
            "section": "zenlinkProtocol"
          },
          "getAmountInPrice": {
            "description": "Get the output token amount for an exact input token amount.",
            "params": [
              {
                "name": "supply",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "path",
                "type": "Vec<ZenlinkAssetId>"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "u128",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getAmountInPrice",
            "method": "getAmountInPrice",
            "section": "zenlinkProtocol"
          },
          "getAmountOutPrice": {
            "description": "Get the input token amount for an exact output token amount.",
            "params": [
              {
                "name": "supply",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "path",
                "type": "Vec<ZenlinkAssetId>"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "u128",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getAmountOutPrice",
            "method": "getAmountOutPrice",
            "section": "zenlinkProtocol"
          },
          "getEstimateLptoken": {
            "description": "Get the estimated number of LP token acquired given the desired and minimum amount for both in-token and out-token.",
            "params": [
              {
                "name": "asset_0",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "asset_1",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "amount_0_desired",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "amount_1_desired",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "amount_0_min",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "amount_1_min",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "u128",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getEstimateLptoken",
            "method": "getEstimateLptoken",
            "section": "zenlinkProtocol"
          }
        },
        "liquidityMining": {
          "getRewards": {
            "description": "Get the rewards users deserve",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "pid",
                "type": "PoolId"
              },
              {
                "name": "pallet_instance",
                "type": "U32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(CurrencyId, Balance)>",
            "isSubscription": false,
            "jsonrpc": "liquidityMining_getRewards",
            "method": "getRewards",
            "section": "liquidityMining"
          }
        }
      },
      "types": [
        {
          "minmax": [
            0,
            901
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "pool_id": "PoolId",
              "keeper": "AccountId",
              "investor": "Option<AccountId>",
              "trading_pair": "(CurrencyId, CurrencyId)",
              "duration": "BlockNumber",
              "type": "PoolType",
              "min_deposit_to_start": "Balance",
              "after_block_to_start": "BlockNumber",
              "deposit": "Balance",
              "rewards": "BTreeMap<CurrencyId, RewardData>",
              "update_b": "BlockNumber",
              "state": "PoolState",
              "block_startup": "Option<BlockNumber>",
              "redeem_limit_time": "BlockNumber",
              "unlock_limit_nums": "u32",
              "pending_unlock_nums": "u32"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "BiddingOrderId": "u64",
            "EraId": "u32",
            "BiddingOrderUnit": {
              "bidder_id": "AccountId",
              "token_id": "AssetId",
              "block_num": "BlockNumber",
              "votes": "Balance",
              "annual_roi": "Permill",
              "validator": "AccountId"
            },
            "BiddingOrderUnitOf": "BiddingOrderUnit",
            "VersionId": "u32",
            "PermissionName": "u64",
            "PermissionLevel": {
              "actor": "AccountName",
              "permission": "PermissionName"
            },
            "Action": {
              "account": "AccountName",
              "name": "ActionName",
              "authorization": "Vec<PermissionLevel>",
              "data": "Vec<u8>"
            },
            "AccountName": "u64",
            "Checksum256": "([u8;32])",
            "ActionName": "u64",
            "FlatMap": {
              "map": "Vec<(ActionName, u64)>"
            },
            "UnsignedInt": "u32",
            "ActionReceipt": {
              "receiver": "AccountName",
              "act_digest": "Checksum256",
              "global_sequence": "u64",
              "recv_sequence": "u64",
              "auth_sequence": "FlatMap<AccountName, u64>",
              "code_sequence": "UnsignedInt",
              "abi_sequence": "UnsignedInt"
            },
            "BlockchainType": {
              "_enum": [
                "BIFROST",
                "EOS",
                "IOST"
              ]
            },
            "Precision": "u32",
            "BridgeAssetSymbol": {
              "blockchain": "BlockchainType",
              "symbol": "Vec<u8>",
              "precision": "Precision"
            },
            "PublicKey": {
              "type_": "UnsignedInt",
              "data": "[u8;33]"
            },
            "ProducerKey": {
              "producer_name": "AccountName",
              "block_signing_key": "PublicKey"
            },
            "ProducerSchedule": {
              "version": "u32",
              "producers": "Vec<ProducerKey>"
            },
            "bridgeEosSignature": {
              "type_": "UnsignedInt",
              "data": "[u8;65]"
            },
            "BlockTimestamp": "(u32)",
            "Extension": "(u16, Vec<u8>)",
            "BlockHeader": {
              "timestamp": "BlockTimestamp",
              "producer": "AccountName",
              "confirmed": "u16",
              "previous": "Checksum256",
              "transaction_mroot": "Checksum256",
              "action_mroot": "Checksum256",
              "schedule_version": "u32",
              "new_producers": "Option<ProducerSchedule>",
              "header_extensions": "Vec<Extension>"
            },
            "SignedBlockHeader": {
              "block_header": "BlockHeader",
              "producer_signature": "bridgeEosSignature"
            },
            "Checksum256Array": "Vec<Checksum256>",
            "IncrementalMerkle": {
              "_node_count": "u64",
              "_active_nodes": "Checksum256Array"
            },
            "TxSig": {
              "signature": "Vec<u8>",
              "author": "AccountId"
            },
            "MultiSig": {
              "signatures": "Vec<TxSig>",
              "threshold": "u8"
            },
            "MultiSigTx": {
              "chain_id": "Vec<u8>",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "Action",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Sent": {
              "tx_id": "Vec<u8>",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Succeeded": {
              "tx_id": "Vec<u8>"
            },
            "Failed": {
              "tx_id": "Vec<u8>",
              "reason": "Vec<u8>"
            },
            "TxOut": {
              "_enum": {
                "Initialized": "MultiSigTx",
                "Created": "MultiSigTx",
                "SignComplete": "MultiSigTx",
                "Sent": "Sent",
                "Succeeded": "Succeeded",
                "Failed": "Failed"
              }
            },
            "TransactionStatus": {
              "_enum": [
                "Initialized",
                "Created",
                "SignComplete",
                "Sent",
                "Succeeded",
                "Failed"
              ]
            },
            "ProducerAuthoritySchedule": {
              "version": "u32",
              "producers": "Vec<ProducerAuthority>"
            },
            "ProducerAuthority": {
              "producer_name": "ActionName",
              "authority": "BlockSigningAuthority"
            },
            "BlockSigningAuthority": "(UnsignedInt, BlockSigningAuthorityV0)",
            "BlockSigningAuthorityV0": {
              "threshold": "u32",
              "keyWeights": "Vec<KeyWeight>"
            },
            "KeyWeight": {
              "key": "PublicKey",
              "weight": "u16"
            },
            "BancorPool": {
              "currency_id": "CurrencyId",
              "token_pool": "Balance",
              "vstoken_pool": "Balance",
              "token_ceiling": "Balance",
              "token_base_supply": "Balance",
              "vstoken_base_supply": "Balance"
            },
            "IostAction": {
              "contract": "Vec<u8>",
              "action_name": "Vec<u8>",
              "data": "Vec<u8>"
            },
            "IostMultiSigTx": {
              "chain_id": "i32",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "IostAction",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Processing": {
              "tx_id": "Vec<u8>",
              "multi_sig_tx": "IostMultiSigTx"
            },
            "IostTxOut": {
              "_enum": {
                "Initial": "IostMultiSigTx",
                "Generated": "IostMultiSigTx",
                "Signed": "IostMultiSigTx",
                "Processing": "Processing",
                "Success": "Vec<u8>",
                "Fail": "Failed"
              }
            },
            "PalletBalanceOf": "Balance",
            "ExtraFeeName": {
              "_enum": [
                "SalpContribute",
                "NoExtraFee"
              ]
            },
            "IsExtended": "bool",
            "SystemPalletId": "PalletId",
            "TimeUnit": {
              "Era": "U32",
              "SlashingSpan": "U32"
            },
            "ledger": {
              "Substrate": "SubstrateLedger"
            },
            "SubstrateLedger": {
              "account": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>"
            },
            "UnlockChunk": {
              "value": "Balance",
              "unlock_time": "TimeUnit"
            },
            "MinimumsMaximums": {
              "delegator_bonded_minimum": "Balance",
              "bond_extra_minimum": "Balance",
              "unbond_minimum": "Balance",
              "rebond_minimum": "Balance",
              "unbond_record_maximum": "U32",
              "validators_back_maximum": "U32",
              "delegator_active_staking_maximum": "Balance"
            },
            "TrieIndex": "u32",
            "FundInfo": {
              "raised": "Balance",
              "cap": "Balance",
              "first_slot": "LeasePeriod",
              "last_slot": "LeasePeriod",
              "trie_index": "TrieIndex",
              "status": "FundStatus"
            },
            "RedeemStatus": "BalanceOf",
            "FundStatus": {
              "_enum": {
                "Ongoing": 0,
                "Retired": 1,
                "Success": 2,
                "Failed": 3,
                "RefundWithdrew": 4,
                "RedeemWithdrew": 5,
                "End": 6
              }
            },
            "ContributionStatus": {
              "_enum": [
                "Idle",
                "Refunded",
                "Redeemed",
                "Unlocked",
                "MigratedIdle",
                "Contributing"
              ]
            },
            "CrowdloanContributeCall": {
              "_enum": {
                "CrowdloanContribute": "ContributeCall"
              }
            },
            "ContributeCall": {
              "_enum": {
                "Contribute": "Contribution"
              }
            },
            "Contribution": {
              "index": "ParaId",
              "value": "BalanceOf",
              "signature": "Option<MultiSignature>"
            },
            "Withdraw": {
              "who": "AccountIdOf",
              "index": "ParaId"
            },
            "WithdrawCall": {
              "_enum": {
                "Withdraw": "Withdraw"
              }
            },
            "ParachainTransactProxyType": {
              "_enum": {
                "Primary": 0,
                "Derived": 1
              }
            },
            "ParachainDerivedProxyAccountType": {
              "_enum": {
                "Salp": 0,
                "Staking": 1
              }
            },
            "Keys": "SessionKeys1",
            "ParachainTransactType": {
              "_enum": {
                "Xcm": 0,
                "Proxy": 1
              }
            },
            "RpcContributionStatus": {
              "_enum": {
                "Idle": 0,
                "Contributing": 1,
                "Refunded": 2,
                "Unlocked": 3,
                "Redeemed": 4
              }
            },
            "RewardRecord": {
              "account_id": "AccountId",
              "record_amount": "Balance"
            },
            "PoolId": "u32",
            "SwapFee": "u128",
            "PoolDetails": {
              "owner": "AccountId",
              "swap_fee_rate": "SwapFee",
              "active": "bool"
            },
            "PoolWeight": "Balance",
            "PoolToken": "u128",
            "PoolCreateTokenDetails": {
              "token_id": "AssetId",
              "token_balance": "Balance",
              "token_weight": "PoolWeight"
            },
            "MaxLocksOf": "u32",
            "BifrostVestingInfo": {
              "locked": "Balance",
              "per_block": "Balance",
              "starting_block": "BlockNumber"
            },
            "OracleKey": "CurrencyId",
            "BlockNumberFor": "BlockNumber",
            "OrderInfo": {
              "owner": "AccountIdOf",
              "vsbond": "CurrencyId",
              "amount": "BalanceOf",
              "remain": "BalanceOf",
              "total_price": "BalanceOf",
              "order_id": "OrderId",
              "order_type": "OrderType",
              "remain_price": "BalanceOf"
            },
            "OrderId": "u64",
            "OrderType": {
              "_enum": {
                "Sell": 0,
                "Buy": 1
              }
            },
            "UnlockId": "U32",
            "ZenlinkAssetId": {
              "chain_id": "u32",
              "asset_type": "u8",
              "asset_index": "u64"
            },
            "ZenlinkAssetBalance": "u128",
            "PairInfo": {
              "asset0": "ZenlinkAssetId",
              "asset1": "ZenlinkAssetId",
              "account": "AccountId",
              "totalLiquidity": "ZenlinkAssetBalance",
              "holdingLiquidity": "ZenlinkAssetBalance",
              "reserve0": "ZenlinkAssetBalance",
              "reserve1": "ZenlinkAssetBalance",
              "lpAssetId": "ZenlinkAssetId"
            },
            "PairMetadata": {
              "pair_account": "AccountId",
              "target_supply": "ZenlinkAssetBalance"
            },
            "BootstrapParamter": {
              "min_contribution": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "target_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "accumulated_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "end_block_number": "BlockNumber",
              "pair_account": "AccountId"
            },
            "PairStatus": {
              "_enum": {
                "Trading": "PairMetadata",
                "Bootstrap": "BootstrapParamter",
                "Disable": null
              }
            },
            "TokenSymbol": {
              "_enum": {
                "ASG": 0,
                "BNC": 1,
                "KUSD": 2,
                "DOT": 3,
                "KSM": 4,
                "KAR": 6,
                "ZLK": 7,
                "PHA": 8,
                "RMRK": 9,
                "MOVR": 10
              }
            },
            "CurrencyId": {
              "_enum": {
                "Native": "TokenSymbol",
                "VToken": "TokenSymbol",
                "Token": "TokenSymbol",
                "Stable": "TokenSymbol",
                "VSToken": "TokenSymbol",
                "VSBond": "(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",
                "LPToken": "(TokenSymbol, u8, TokenSymbol, u8)"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "TAssetBalance": "Balance",
            "AmountOf": "Balance",
            "StorageVersion": "Releases",
            "ShareWeight": "Balance",
            "Currency": "CurrencyIdOf",
            "Amount": "AmountOf",
            "NodePrimitivesCurrencyCurrencyId": "CurrencyId",
            "OrmlTokensBalanceLock": "BalanceLock",
            "OrmlTokensAccountData": "OrmlAccountData",
            "OrmlTokensReserveData": "(Currency, u8, Amount, u128)",
            "TransferOriginType": {
              "_enum": {
                "FromSelf": 0,
                "FromRelayChain": 1,
                "FromSiblingParaChain": 2
              }
            },
            "PoolType": {
              "_enum": {
                "Mining": 0,
                "Farming": 1,
                "EBFarming": 2
              }
            },
            "PoolState": {
              "_enum": {
                "UnCharged": 0,
                "Charged": 1,
                "Ongoing": 2,
                "Retired": 3,
                "Dead": 4
              }
            },
            "DepositData": {
              "deposit": "Balance",
              "gain_avgs": "BTreeMap<CurrencyId, FixedU128>",
              "update_b": "BlockNumber",
              "pending_unlocks": "Vec<(BlockNumber, Balance)>"
            },
            "RewardData": {
              "total": "Balance",
              "per_block": "Balance",
              "claimed": "Balance",
              "gain_avg": "FixedU128"
            },
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "MultiLocation": "MultiLocationV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            902,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "pool_id": "PoolId",
              "keeper": "AccountId",
              "investor": "Option<AccountId>",
              "trading_pair": "(CurrencyId, CurrencyId)",
              "duration": "BlockNumber",
              "type": "PoolType",
              "min_deposit_to_start": "Balance",
              "after_block_to_start": "BlockNumber",
              "deposit": "Balance",
              "rewards": "BTreeMap<CurrencyId, RewardData>",
              "update_b": "BlockNumber",
              "state": "PoolState",
              "block_startup": "Option<BlockNumber>",
              "redeem_limit_time": "BlockNumber",
              "unlock_limit_nums": "u32",
              "pending_unlock_nums": "u32"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "BiddingOrderId": "u64",
            "EraId": "u32",
            "BiddingOrderUnit": {
              "bidder_id": "AccountId",
              "token_id": "AssetId",
              "block_num": "BlockNumber",
              "votes": "Balance",
              "annual_roi": "Permill",
              "validator": "AccountId"
            },
            "BiddingOrderUnitOf": "BiddingOrderUnit",
            "VersionId": "u32",
            "PermissionName": "u64",
            "PermissionLevel": {
              "actor": "AccountName",
              "permission": "PermissionName"
            },
            "Action": {
              "account": "AccountName",
              "name": "ActionName",
              "authorization": "Vec<PermissionLevel>",
              "data": "Vec<u8>"
            },
            "AccountName": "u64",
            "Checksum256": "([u8;32])",
            "ActionName": "u64",
            "FlatMap": {
              "map": "Vec<(ActionName, u64)>"
            },
            "UnsignedInt": "u32",
            "ActionReceipt": {
              "receiver": "AccountName",
              "act_digest": "Checksum256",
              "global_sequence": "u64",
              "recv_sequence": "u64",
              "auth_sequence": "FlatMap<AccountName, u64>",
              "code_sequence": "UnsignedInt",
              "abi_sequence": "UnsignedInt"
            },
            "BlockchainType": {
              "_enum": [
                "BIFROST",
                "EOS",
                "IOST"
              ]
            },
            "Precision": "u32",
            "BridgeAssetSymbol": {
              "blockchain": "BlockchainType",
              "symbol": "Vec<u8>",
              "precision": "Precision"
            },
            "PublicKey": {
              "type_": "UnsignedInt",
              "data": "[u8;33]"
            },
            "ProducerKey": {
              "producer_name": "AccountName",
              "block_signing_key": "PublicKey"
            },
            "ProducerSchedule": {
              "version": "u32",
              "producers": "Vec<ProducerKey>"
            },
            "bridgeEosSignature": {
              "type_": "UnsignedInt",
              "data": "[u8;65]"
            },
            "BlockTimestamp": "(u32)",
            "Extension": "(u16, Vec<u8>)",
            "BlockHeader": {
              "timestamp": "BlockTimestamp",
              "producer": "AccountName",
              "confirmed": "u16",
              "previous": "Checksum256",
              "transaction_mroot": "Checksum256",
              "action_mroot": "Checksum256",
              "schedule_version": "u32",
              "new_producers": "Option<ProducerSchedule>",
              "header_extensions": "Vec<Extension>"
            },
            "SignedBlockHeader": {
              "block_header": "BlockHeader",
              "producer_signature": "bridgeEosSignature"
            },
            "Checksum256Array": "Vec<Checksum256>",
            "IncrementalMerkle": {
              "_node_count": "u64",
              "_active_nodes": "Checksum256Array"
            },
            "TxSig": {
              "signature": "Vec<u8>",
              "author": "AccountId"
            },
            "MultiSig": {
              "signatures": "Vec<TxSig>",
              "threshold": "u8"
            },
            "MultiSigTx": {
              "chain_id": "Vec<u8>",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "Action",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Sent": {
              "tx_id": "Vec<u8>",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Succeeded": {
              "tx_id": "Vec<u8>"
            },
            "Failed": {
              "tx_id": "Vec<u8>",
              "reason": "Vec<u8>"
            },
            "TxOut": {
              "_enum": {
                "Initialized": "MultiSigTx",
                "Created": "MultiSigTx",
                "SignComplete": "MultiSigTx",
                "Sent": "Sent",
                "Succeeded": "Succeeded",
                "Failed": "Failed"
              }
            },
            "TransactionStatus": {
              "_enum": [
                "Initialized",
                "Created",
                "SignComplete",
                "Sent",
                "Succeeded",
                "Failed"
              ]
            },
            "ProducerAuthoritySchedule": {
              "version": "u32",
              "producers": "Vec<ProducerAuthority>"
            },
            "ProducerAuthority": {
              "producer_name": "ActionName",
              "authority": "BlockSigningAuthority"
            },
            "BlockSigningAuthority": "(UnsignedInt, BlockSigningAuthorityV0)",
            "BlockSigningAuthorityV0": {
              "threshold": "u32",
              "keyWeights": "Vec<KeyWeight>"
            },
            "KeyWeight": {
              "key": "PublicKey",
              "weight": "u16"
            },
            "BancorPool": {
              "currency_id": "CurrencyId",
              "token_pool": "Balance",
              "vstoken_pool": "Balance",
              "token_ceiling": "Balance",
              "token_base_supply": "Balance",
              "vstoken_base_supply": "Balance"
            },
            "IostAction": {
              "contract": "Vec<u8>",
              "action_name": "Vec<u8>",
              "data": "Vec<u8>"
            },
            "IostMultiSigTx": {
              "chain_id": "i32",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "IostAction",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Processing": {
              "tx_id": "Vec<u8>",
              "multi_sig_tx": "IostMultiSigTx"
            },
            "IostTxOut": {
              "_enum": {
                "Initial": "IostMultiSigTx",
                "Generated": "IostMultiSigTx",
                "Signed": "IostMultiSigTx",
                "Processing": "Processing",
                "Success": "Vec<u8>",
                "Fail": "Failed"
              }
            },
            "PalletBalanceOf": "Balance",
            "ExtraFeeName": {
              "_enum": [
                "SalpContribute",
                "NoExtraFee"
              ]
            },
            "IsExtended": "bool",
            "SystemPalletId": "PalletId",
            "TimeUnit": {
              "Era": "U32",
              "SlashingSpan": "U32"
            },
            "ledger": {
              "Substrate": "SubstrateLedger"
            },
            "SubstrateLedger": {
              "account": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>"
            },
            "UnlockChunk": {
              "value": "Balance",
              "unlock_time": "TimeUnit"
            },
            "MinimumsMaximums": {
              "delegator_bonded_minimum": "Balance",
              "bond_extra_minimum": "Balance",
              "unbond_minimum": "Balance",
              "rebond_minimum": "Balance",
              "unbond_record_maximum": "U32",
              "validators_back_maximum": "U32",
              "delegator_active_staking_maximum": "Balance"
            },
            "TrieIndex": "u32",
            "FundInfo": {
              "raised": "Balance",
              "cap": "Balance",
              "first_slot": "LeasePeriod",
              "last_slot": "LeasePeriod",
              "trie_index": "TrieIndex",
              "status": "FundStatus"
            },
            "RedeemStatus": "BalanceOf",
            "FundStatus": {
              "_enum": {
                "Ongoing": 0,
                "Retired": 1,
                "Success": 2,
                "Failed": 3,
                "RefundWithdrew": 4,
                "RedeemWithdrew": 5,
                "End": 6
              }
            },
            "ContributionStatus": {
              "_enum": [
                "Idle",
                "Refunded",
                "Redeemed",
                "Unlocked",
                "MigratedIdle",
                "Contributing"
              ]
            },
            "CrowdloanContributeCall": {
              "_enum": {
                "CrowdloanContribute": "ContributeCall"
              }
            },
            "ContributeCall": {
              "_enum": {
                "Contribute": "Contribution"
              }
            },
            "Contribution": {
              "index": "ParaId",
              "value": "BalanceOf",
              "signature": "Option<MultiSignature>"
            },
            "Withdraw": {
              "who": "AccountIdOf",
              "index": "ParaId"
            },
            "WithdrawCall": {
              "_enum": {
                "Withdraw": "Withdraw"
              }
            },
            "ParachainTransactProxyType": {
              "_enum": {
                "Primary": 0,
                "Derived": 1
              }
            },
            "ParachainDerivedProxyAccountType": {
              "_enum": {
                "Salp": 0,
                "Staking": 1
              }
            },
            "Keys": "SessionKeys1",
            "ParachainTransactType": {
              "_enum": {
                "Xcm": 0,
                "Proxy": 1
              }
            },
            "RpcContributionStatus": {
              "_enum": {
                "Idle": 0,
                "Contributing": 1,
                "Refunded": 2,
                "Unlocked": 3,
                "Redeemed": 4
              }
            },
            "RewardRecord": {
              "account_id": "AccountId",
              "record_amount": "Balance"
            },
            "PoolId": "u32",
            "SwapFee": "u128",
            "PoolDetails": {
              "owner": "AccountId",
              "swap_fee_rate": "SwapFee",
              "active": "bool"
            },
            "PoolWeight": "Balance",
            "PoolToken": "u128",
            "PoolCreateTokenDetails": {
              "token_id": "AssetId",
              "token_balance": "Balance",
              "token_weight": "PoolWeight"
            },
            "MaxLocksOf": "u32",
            "BifrostVestingInfo": {
              "locked": "Balance",
              "per_block": "Balance",
              "starting_block": "BlockNumber"
            },
            "OracleKey": "CurrencyId",
            "BlockNumberFor": "BlockNumber",
            "OrderInfo": {
              "owner": "AccountIdOf",
              "vsbond": "CurrencyId",
              "amount": "BalanceOf",
              "remain": "BalanceOf",
              "total_price": "BalanceOf",
              "order_id": "OrderId",
              "order_type": "OrderType",
              "remain_price": "BalanceOf"
            },
            "OrderId": "u64",
            "OrderType": {
              "_enum": {
                "Sell": 0,
                "Buy": 1
              }
            },
            "UnlockId": "U32",
            "ZenlinkAssetId": {
              "chain_id": "u32",
              "asset_type": "u8",
              "asset_index": "u64"
            },
            "ZenlinkAssetBalance": "u128",
            "PairInfo": {
              "asset0": "ZenlinkAssetId",
              "asset1": "ZenlinkAssetId",
              "account": "AccountId",
              "totalLiquidity": "ZenlinkAssetBalance",
              "holdingLiquidity": "ZenlinkAssetBalance",
              "reserve0": "ZenlinkAssetBalance",
              "reserve1": "ZenlinkAssetBalance",
              "lpAssetId": "ZenlinkAssetId"
            },
            "PairMetadata": {
              "pair_account": "AccountId",
              "target_supply": "ZenlinkAssetBalance"
            },
            "BootstrapParamter": {
              "min_contribution": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "target_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "accumulated_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "end_block_number": "BlockNumber",
              "pair_account": "AccountId"
            },
            "PairStatus": {
              "_enum": {
                "Trading": "PairMetadata",
                "Bootstrap": "BootstrapParamter",
                "Disable": null
              }
            },
            "TokenSymbol": {
              "_enum": {
                "ASG": 0,
                "BNC": 1,
                "KUSD": 2,
                "DOT": 3,
                "KSM": 4,
                "KAR": 6,
                "ZLK": 7,
                "PHA": 8,
                "RMRK": 9,
                "MOVR": 10
              }
            },
            "CurrencyId": {
              "_enum": {
                "Native": "TokenSymbol",
                "VToken": "TokenSymbol",
                "Token": "TokenSymbol",
                "Stable": "TokenSymbol",
                "VSToken": "TokenSymbol",
                "VSBond": "(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",
                "LPToken": "(TokenSymbol, u8, TokenSymbol, u8)"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "TAssetBalance": "Balance",
            "AmountOf": "Balance",
            "StorageVersion": "Releases",
            "ShareWeight": "Balance",
            "Currency": "CurrencyIdOf",
            "Amount": "AmountOf",
            "NodePrimitivesCurrencyCurrencyId": "CurrencyId",
            "OrmlTokensBalanceLock": "BalanceLock",
            "OrmlTokensAccountData": "OrmlAccountData",
            "OrmlTokensReserveData": "(Currency, u8, Amount, u128)",
            "TransferOriginType": {
              "_enum": {
                "FromSelf": 0,
                "FromRelayChain": 1,
                "FromSiblingParaChain": 2
              }
            },
            "PoolType": {
              "_enum": {
                "Mining": 0,
                "Farming": 1,
                "EBFarming": 2
              }
            },
            "PoolState": {
              "_enum": {
                "UnCharged": 0,
                "Charged": 1,
                "Ongoing": 2,
                "Retired": 3,
                "Dead": 4
              }
            },
            "DepositData": {
              "deposit": "Balance",
              "gain_avgs": "BTreeMap<CurrencyId, FixedU128>",
              "update_b": "BlockNumber",
              "pending_unlocks": "Vec<(BlockNumber, Balance)>"
            },
            "RewardData": {
              "total": "Balance",
              "per_block": "Balance",
              "claimed": "Balance",
              "gain_avg": "FixedU128"
            },
            "MultiAsset": "MultiAssetV1",
            "Xcm": "XcmV1",
            "XcmOrder": "XcmOrderV1",
            "MultiLocation": "MultiLocationV1",
            "XcmError": "XcmErrorV1",
            "Response": "ResponseV1"
          }
        }
      ],
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "bifrost-parachain": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "farming": {
          "getFarmingRewards": {
            "description": "Get farming rewards",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "pid",
                "type": "PoolId"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(CurrencyId, Balance)>",
            "isSubscription": false,
            "jsonrpc": "farming_getFarmingRewards",
            "method": "getFarmingRewards",
            "section": "farming"
          },
          "getGaugeRewards": {
            "description": "Get gauge rewards",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "pid",
                "type": "PoolId"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(CurrencyId, Balance)>",
            "isSubscription": false,
            "jsonrpc": "farming_getGaugeRewards",
            "method": "getGaugeRewards",
            "section": "farming"
          }
        },
        "flexibleFee": {
          "getFeeTokenAndAmount": {
            "description": "Get charging token type and amount in terms of flexible transaction fee.",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "extrinsic",
                "type": "Bytes"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(CurrencyId, U256)",
            "isSubscription": false,
            "jsonrpc": "flexibleFee_getFeeTokenAndAmount",
            "method": "getFeeTokenAndAmount",
            "section": "flexibleFee"
          }
        },
        "salp": {
          "getContribution": {
            "description": "salp getContribution",
            "params": [
              {
                "name": "index",
                "type": "ParaId"
              },
              {
                "name": "who",
                "type": "AccountIdOf"
              }
            ],
            "type": "(Balance, ContributionStatus)",
            "isSubscription": false,
            "jsonrpc": "salp_getContribution",
            "method": "getContribution",
            "section": "salp"
          },
          "getLiteContribution": {
            "description": "salp getLiteContribution",
            "params": [
              {
                "name": "index",
                "type": "ParaId"
              },
              {
                "name": "who",
                "type": "AccountIdOf"
              }
            ],
            "type": "(Balance, ContributionStatus)",
            "isSubscription": false,
            "jsonrpc": "salp_getLiteContribution",
            "method": "getLiteContribution",
            "section": "salp"
          }
        },
        "vtokenMint": {
          "getVtokenMintRate": {
            "description": "Get current vtoken mint rate.",
            "params": [
              {
                "name": "asset_id",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "String",
            "isSubscription": false,
            "jsonrpc": "vtokenMint_getVtokenMintRate",
            "method": "getVtokenMintRate",
            "section": "vtokenMint"
          }
        },
        "zenlinkProtocol": {
          "getAllAssets": {
            "description": "zenlinkProtocol getAllAssets",
            "params": [
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<ZenlinkAssetId>",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getAllAssets",
            "method": "getAllAssets",
            "section": "zenlinkProtocol"
          },
          "getBalance": {
            "description": "zenlinkProtocol getBalance",
            "params": [
              {
                "name": "asset_id",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "String",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getBalance",
            "method": "getBalance",
            "section": "zenlinkProtocol"
          },
          "getSovereignsInfo": {
            "description": "Get the ownership of a certain currency for each parachain.",
            "params": [
              {
                "name": "asset_id",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(u32, AccountId, String)",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getSovereignsInfo",
            "method": "getSovereignsInfo",
            "section": "zenlinkProtocol"
          },
          "getPairByAssetId": {
            "description": "Get the detailed information of a particular exchange pair.",
            "params": [
              {
                "name": "asset_0",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "asset_1",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "PairInfo",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getPairByAssetId",
            "method": "getPairByAssetId",
            "section": "zenlinkProtocol"
          },
          "getAmountInPrice": {
            "description": "Get the output token amount for an exact input token amount.",
            "params": [
              {
                "name": "supply",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "path",
                "type": "Vec<ZenlinkAssetId>"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "u128",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getAmountInPrice",
            "method": "getAmountInPrice",
            "section": "zenlinkProtocol"
          },
          "getAmountOutPrice": {
            "description": "Get the input token amount for an exact output token amount.",
            "params": [
              {
                "name": "supply",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "path",
                "type": "Vec<ZenlinkAssetId>"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "u128",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getAmountOutPrice",
            "method": "getAmountOutPrice",
            "section": "zenlinkProtocol"
          },
          "getEstimateLptoken": {
            "description": "Get the estimated number of LP token acquired given the desired and minimum amount for both in-token and out-token.",
            "params": [
              {
                "name": "asset_0",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "asset_1",
                "type": "ZenlinkAssetId"
              },
              {
                "name": "amount_0_desired",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "amount_1_desired",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "amount_0_min",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "amount_1_min",
                "type": "ZenlinkAssetBalance"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "u128",
            "isSubscription": false,
            "jsonrpc": "zenlinkProtocol_getEstimateLptoken",
            "method": "getEstimateLptoken",
            "section": "zenlinkProtocol"
          }
        },
        "liquidityMining": {
          "getRewards": {
            "description": "Get the rewards users deserve",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "pid",
                "type": "PoolId"
              },
              {
                "name": "pallet_instance",
                "type": "U32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(CurrencyId, Balance)>",
            "isSubscription": false,
            "jsonrpc": "liquidityMining_getRewards",
            "method": "getRewards",
            "section": "liquidityMining"
          }
        }
      },
      "types": [
        {
          "minmax": [
            0,
            901
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "pool_id": "PoolId",
              "keeper": "AccountId",
              "investor": "Option<AccountId>",
              "trading_pair": "(CurrencyId, CurrencyId)",
              "duration": "BlockNumber",
              "type": "PoolType",
              "min_deposit_to_start": "Balance",
              "after_block_to_start": "BlockNumber",
              "deposit": "Balance",
              "rewards": "BTreeMap<CurrencyId, RewardData>",
              "update_b": "BlockNumber",
              "state": "PoolState",
              "block_startup": "Option<BlockNumber>",
              "redeem_limit_time": "BlockNumber",
              "unlock_limit_nums": "u32",
              "pending_unlock_nums": "u32"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "BiddingOrderId": "u64",
            "EraId": "u32",
            "BiddingOrderUnit": {
              "bidder_id": "AccountId",
              "token_id": "AssetId",
              "block_num": "BlockNumber",
              "votes": "Balance",
              "annual_roi": "Permill",
              "validator": "AccountId"
            },
            "BiddingOrderUnitOf": "BiddingOrderUnit",
            "VersionId": "u32",
            "PermissionName": "u64",
            "PermissionLevel": {
              "actor": "AccountName",
              "permission": "PermissionName"
            },
            "Action": {
              "account": "AccountName",
              "name": "ActionName",
              "authorization": "Vec<PermissionLevel>",
              "data": "Vec<u8>"
            },
            "AccountName": "u64",
            "Checksum256": "([u8;32])",
            "ActionName": "u64",
            "FlatMap": {
              "map": "Vec<(ActionName, u64)>"
            },
            "UnsignedInt": "u32",
            "ActionReceipt": {
              "receiver": "AccountName",
              "act_digest": "Checksum256",
              "global_sequence": "u64",
              "recv_sequence": "u64",
              "auth_sequence": "FlatMap<AccountName, u64>",
              "code_sequence": "UnsignedInt",
              "abi_sequence": "UnsignedInt"
            },
            "BlockchainType": {
              "_enum": [
                "BIFROST",
                "EOS",
                "IOST"
              ]
            },
            "Precision": "u32",
            "BridgeAssetSymbol": {
              "blockchain": "BlockchainType",
              "symbol": "Vec<u8>",
              "precision": "Precision"
            },
            "PublicKey": {
              "type_": "UnsignedInt",
              "data": "[u8;33]"
            },
            "ProducerKey": {
              "producer_name": "AccountName",
              "block_signing_key": "PublicKey"
            },
            "ProducerSchedule": {
              "version": "u32",
              "producers": "Vec<ProducerKey>"
            },
            "bridgeEosSignature": {
              "type_": "UnsignedInt",
              "data": "[u8;65]"
            },
            "BlockTimestamp": "(u32)",
            "Extension": "(u16, Vec<u8>)",
            "BlockHeader": {
              "timestamp": "BlockTimestamp",
              "producer": "AccountName",
              "confirmed": "u16",
              "previous": "Checksum256",
              "transaction_mroot": "Checksum256",
              "action_mroot": "Checksum256",
              "schedule_version": "u32",
              "new_producers": "Option<ProducerSchedule>",
              "header_extensions": "Vec<Extension>"
            },
            "SignedBlockHeader": {
              "block_header": "BlockHeader",
              "producer_signature": "bridgeEosSignature"
            },
            "Checksum256Array": "Vec<Checksum256>",
            "IncrementalMerkle": {
              "_node_count": "u64",
              "_active_nodes": "Checksum256Array"
            },
            "TxSig": {
              "signature": "Vec<u8>",
              "author": "AccountId"
            },
            "MultiSig": {
              "signatures": "Vec<TxSig>",
              "threshold": "u8"
            },
            "MultiSigTx": {
              "chain_id": "Vec<u8>",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "Action",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Sent": {
              "tx_id": "Vec<u8>",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Succeeded": {
              "tx_id": "Vec<u8>"
            },
            "Failed": {
              "tx_id": "Vec<u8>",
              "reason": "Vec<u8>"
            },
            "TxOut": {
              "_enum": {
                "Initialized": "MultiSigTx",
                "Created": "MultiSigTx",
                "SignComplete": "MultiSigTx",
                "Sent": "Sent",
                "Succeeded": "Succeeded",
                "Failed": "Failed"
              }
            },
            "TransactionStatus": {
              "_enum": [
                "Initialized",
                "Created",
                "SignComplete",
                "Sent",
                "Succeeded",
                "Failed"
              ]
            },
            "ProducerAuthoritySchedule": {
              "version": "u32",
              "producers": "Vec<ProducerAuthority>"
            },
            "ProducerAuthority": {
              "producer_name": "ActionName",
              "authority": "BlockSigningAuthority"
            },
            "BlockSigningAuthority": "(UnsignedInt, BlockSigningAuthorityV0)",
            "BlockSigningAuthorityV0": {
              "threshold": "u32",
              "keyWeights": "Vec<KeyWeight>"
            },
            "KeyWeight": {
              "key": "PublicKey",
              "weight": "u16"
            },
            "BancorPool": {
              "currency_id": "CurrencyId",
              "token_pool": "Balance",
              "vstoken_pool": "Balance",
              "token_ceiling": "Balance",
              "token_base_supply": "Balance",
              "vstoken_base_supply": "Balance"
            },
            "IostAction": {
              "contract": "Vec<u8>",
              "action_name": "Vec<u8>",
              "data": "Vec<u8>"
            },
            "IostMultiSigTx": {
              "chain_id": "i32",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "IostAction",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Processing": {
              "tx_id": "Vec<u8>",
              "multi_sig_tx": "IostMultiSigTx"
            },
            "IostTxOut": {
              "_enum": {
                "Initial": "IostMultiSigTx",
                "Generated": "IostMultiSigTx",
                "Signed": "IostMultiSigTx",
                "Processing": "Processing",
                "Success": "Vec<u8>",
                "Fail": "Failed"
              }
            },
            "PalletBalanceOf": "Balance",
            "ExtraFeeName": {
              "_enum": [
                "SalpContribute",
                "NoExtraFee"
              ]
            },
            "IsExtended": "bool",
            "SystemPalletId": "PalletId",
            "TimeUnit": {
              "Era": "U32",
              "SlashingSpan": "U32"
            },
            "ledger": {
              "Substrate": "SubstrateLedger"
            },
            "SubstrateLedger": {
              "account": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>"
            },
            "UnlockChunk": {
              "value": "Balance",
              "unlock_time": "TimeUnit"
            },
            "MinimumsMaximums": {
              "delegator_bonded_minimum": "Balance",
              "bond_extra_minimum": "Balance",
              "unbond_minimum": "Balance",
              "rebond_minimum": "Balance",
              "unbond_record_maximum": "U32",
              "validators_back_maximum": "U32",
              "delegator_active_staking_maximum": "Balance"
            },
            "TrieIndex": "u32",
            "FundInfo": {
              "raised": "Balance",
              "cap": "Balance",
              "first_slot": "LeasePeriod",
              "last_slot": "LeasePeriod",
              "trie_index": "TrieIndex",
              "status": "FundStatus"
            },
            "RedeemStatus": "BalanceOf",
            "FundStatus": {
              "_enum": {
                "Ongoing": 0,
                "Retired": 1,
                "Success": 2,
                "Failed": 3,
                "RefundWithdrew": 4,
                "RedeemWithdrew": 5,
                "End": 6
              }
            },
            "ContributionStatus": {
              "_enum": [
                "Idle",
                "Refunded",
                "Redeemed",
                "Unlocked",
                "MigratedIdle",
                "Contributing"
              ]
            },
            "CrowdloanContributeCall": {
              "_enum": {
                "CrowdloanContribute": "ContributeCall"
              }
            },
            "ContributeCall": {
              "_enum": {
                "Contribute": "Contribution"
              }
            },
            "Contribution": {
              "index": "ParaId",
              "value": "BalanceOf",
              "signature": "Option<MultiSignature>"
            },
            "Withdraw": {
              "who": "AccountIdOf",
              "index": "ParaId"
            },
            "WithdrawCall": {
              "_enum": {
                "Withdraw": "Withdraw"
              }
            },
            "ParachainTransactProxyType": {
              "_enum": {
                "Primary": 0,
                "Derived": 1
              }
            },
            "ParachainDerivedProxyAccountType": {
              "_enum": {
                "Salp": 0,
                "Staking": 1
              }
            },
            "Keys": "SessionKeys1",
            "ParachainTransactType": {
              "_enum": {
                "Xcm": 0,
                "Proxy": 1
              }
            },
            "RpcContributionStatus": {
              "_enum": {
                "Idle": 0,
                "Contributing": 1,
                "Refunded": 2,
                "Unlocked": 3,
                "Redeemed": 4
              }
            },
            "RewardRecord": {
              "account_id": "AccountId",
              "record_amount": "Balance"
            },
            "PoolId": "u32",
            "SwapFee": "u128",
            "PoolDetails": {
              "owner": "AccountId",
              "swap_fee_rate": "SwapFee",
              "active": "bool"
            },
            "PoolWeight": "Balance",
            "PoolToken": "u128",
            "PoolCreateTokenDetails": {
              "token_id": "AssetId",
              "token_balance": "Balance",
              "token_weight": "PoolWeight"
            },
            "MaxLocksOf": "u32",
            "BifrostVestingInfo": {
              "locked": "Balance",
              "per_block": "Balance",
              "starting_block": "BlockNumber"
            },
            "OracleKey": "CurrencyId",
            "BlockNumberFor": "BlockNumber",
            "OrderInfo": {
              "owner": "AccountIdOf",
              "vsbond": "CurrencyId",
              "amount": "BalanceOf",
              "remain": "BalanceOf",
              "total_price": "BalanceOf",
              "order_id": "OrderId",
              "order_type": "OrderType",
              "remain_price": "BalanceOf"
            },
            "OrderId": "u64",
            "OrderType": {
              "_enum": {
                "Sell": 0,
                "Buy": 1
              }
            },
            "UnlockId": "U32",
            "ZenlinkAssetId": {
              "chain_id": "u32",
              "asset_type": "u8",
              "asset_index": "u64"
            },
            "ZenlinkAssetBalance": "u128",
            "PairInfo": {
              "asset0": "ZenlinkAssetId",
              "asset1": "ZenlinkAssetId",
              "account": "AccountId",
              "totalLiquidity": "ZenlinkAssetBalance",
              "holdingLiquidity": "ZenlinkAssetBalance",
              "reserve0": "ZenlinkAssetBalance",
              "reserve1": "ZenlinkAssetBalance",
              "lpAssetId": "ZenlinkAssetId"
            },
            "PairMetadata": {
              "pair_account": "AccountId",
              "target_supply": "ZenlinkAssetBalance"
            },
            "BootstrapParamter": {
              "min_contribution": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "target_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "accumulated_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "end_block_number": "BlockNumber",
              "pair_account": "AccountId"
            },
            "PairStatus": {
              "_enum": {
                "Trading": "PairMetadata",
                "Bootstrap": "BootstrapParamter",
                "Disable": null
              }
            },
            "TokenSymbol": {
              "_enum": {
                "ASG": 0,
                "BNC": 1,
                "KUSD": 2,
                "DOT": 3,
                "KSM": 4,
                "KAR": 6,
                "ZLK": 7,
                "PHA": 8,
                "RMRK": 9,
                "MOVR": 10
              }
            },
            "CurrencyId": {
              "_enum": {
                "Native": "TokenSymbol",
                "VToken": "TokenSymbol",
                "Token": "TokenSymbol",
                "Stable": "TokenSymbol",
                "VSToken": "TokenSymbol",
                "VSBond": "(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",
                "LPToken": "(TokenSymbol, u8, TokenSymbol, u8)"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "TAssetBalance": "Balance",
            "AmountOf": "Balance",
            "StorageVersion": "Releases",
            "ShareWeight": "Balance",
            "Currency": "CurrencyIdOf",
            "Amount": "AmountOf",
            "NodePrimitivesCurrencyCurrencyId": "CurrencyId",
            "OrmlTokensBalanceLock": "BalanceLock",
            "OrmlTokensAccountData": "OrmlAccountData",
            "OrmlTokensReserveData": "(Currency, u8, Amount, u128)",
            "TransferOriginType": {
              "_enum": {
                "FromSelf": 0,
                "FromRelayChain": 1,
                "FromSiblingParaChain": 2
              }
            },
            "PoolType": {
              "_enum": {
                "Mining": 0,
                "Farming": 1,
                "EBFarming": 2
              }
            },
            "PoolState": {
              "_enum": {
                "UnCharged": 0,
                "Charged": 1,
                "Ongoing": 2,
                "Retired": 3,
                "Dead": 4
              }
            },
            "DepositData": {
              "deposit": "Balance",
              "gain_avgs": "BTreeMap<CurrencyId, FixedU128>",
              "update_b": "BlockNumber",
              "pending_unlocks": "Vec<(BlockNumber, Balance)>"
            },
            "RewardData": {
              "total": "Balance",
              "per_block": "Balance",
              "claimed": "Balance",
              "gain_avg": "FixedU128"
            },
            "MultiAsset": "MultiAssetV0",
            "Xcm": "XcmV0",
            "XcmOrder": "XcmOrderV0",
            "MultiLocation": "MultiLocationV0",
            "XcmError": "XcmErrorV0",
            "Response": "ResponseV0"
          }
        },
        {
          "minmax": [
            902,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "pool_id": "PoolId",
              "keeper": "AccountId",
              "investor": "Option<AccountId>",
              "trading_pair": "(CurrencyId, CurrencyId)",
              "duration": "BlockNumber",
              "type": "PoolType",
              "min_deposit_to_start": "Balance",
              "after_block_to_start": "BlockNumber",
              "deposit": "Balance",
              "rewards": "BTreeMap<CurrencyId, RewardData>",
              "update_b": "BlockNumber",
              "state": "PoolState",
              "block_startup": "Option<BlockNumber>",
              "redeem_limit_time": "BlockNumber",
              "unlock_limit_nums": "u32",
              "pending_unlock_nums": "u32"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "BiddingOrderId": "u64",
            "EraId": "u32",
            "BiddingOrderUnit": {
              "bidder_id": "AccountId",
              "token_id": "AssetId",
              "block_num": "BlockNumber",
              "votes": "Balance",
              "annual_roi": "Permill",
              "validator": "AccountId"
            },
            "BiddingOrderUnitOf": "BiddingOrderUnit",
            "VersionId": "u32",
            "PermissionName": "u64",
            "PermissionLevel": {
              "actor": "AccountName",
              "permission": "PermissionName"
            },
            "Action": {
              "account": "AccountName",
              "name": "ActionName",
              "authorization": "Vec<PermissionLevel>",
              "data": "Vec<u8>"
            },
            "AccountName": "u64",
            "Checksum256": "([u8;32])",
            "ActionName": "u64",
            "FlatMap": {
              "map": "Vec<(ActionName, u64)>"
            },
            "UnsignedInt": "u32",
            "ActionReceipt": {
              "receiver": "AccountName",
              "act_digest": "Checksum256",
              "global_sequence": "u64",
              "recv_sequence": "u64",
              "auth_sequence": "FlatMap<AccountName, u64>",
              "code_sequence": "UnsignedInt",
              "abi_sequence": "UnsignedInt"
            },
            "BlockchainType": {
              "_enum": [
                "BIFROST",
                "EOS",
                "IOST"
              ]
            },
            "Precision": "u32",
            "BridgeAssetSymbol": {
              "blockchain": "BlockchainType",
              "symbol": "Vec<u8>",
              "precision": "Precision"
            },
            "PublicKey": {
              "type_": "UnsignedInt",
              "data": "[u8;33]"
            },
            "ProducerKey": {
              "producer_name": "AccountName",
              "block_signing_key": "PublicKey"
            },
            "ProducerSchedule": {
              "version": "u32",
              "producers": "Vec<ProducerKey>"
            },
            "bridgeEosSignature": {
              "type_": "UnsignedInt",
              "data": "[u8;65]"
            },
            "BlockTimestamp": "(u32)",
            "Extension": "(u16, Vec<u8>)",
            "BlockHeader": {
              "timestamp": "BlockTimestamp",
              "producer": "AccountName",
              "confirmed": "u16",
              "previous": "Checksum256",
              "transaction_mroot": "Checksum256",
              "action_mroot": "Checksum256",
              "schedule_version": "u32",
              "new_producers": "Option<ProducerSchedule>",
              "header_extensions": "Vec<Extension>"
            },
            "SignedBlockHeader": {
              "block_header": "BlockHeader",
              "producer_signature": "bridgeEosSignature"
            },
            "Checksum256Array": "Vec<Checksum256>",
            "IncrementalMerkle": {
              "_node_count": "u64",
              "_active_nodes": "Checksum256Array"
            },
            "TxSig": {
              "signature": "Vec<u8>",
              "author": "AccountId"
            },
            "MultiSig": {
              "signatures": "Vec<TxSig>",
              "threshold": "u8"
            },
            "MultiSigTx": {
              "chain_id": "Vec<u8>",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "Action",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Sent": {
              "tx_id": "Vec<u8>",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Succeeded": {
              "tx_id": "Vec<u8>"
            },
            "Failed": {
              "tx_id": "Vec<u8>",
              "reason": "Vec<u8>"
            },
            "TxOut": {
              "_enum": {
                "Initialized": "MultiSigTx",
                "Created": "MultiSigTx",
                "SignComplete": "MultiSigTx",
                "Sent": "Sent",
                "Succeeded": "Succeeded",
                "Failed": "Failed"
              }
            },
            "TransactionStatus": {
              "_enum": [
                "Initialized",
                "Created",
                "SignComplete",
                "Sent",
                "Succeeded",
                "Failed"
              ]
            },
            "ProducerAuthoritySchedule": {
              "version": "u32",
              "producers": "Vec<ProducerAuthority>"
            },
            "ProducerAuthority": {
              "producer_name": "ActionName",
              "authority": "BlockSigningAuthority"
            },
            "BlockSigningAuthority": "(UnsignedInt, BlockSigningAuthorityV0)",
            "BlockSigningAuthorityV0": {
              "threshold": "u32",
              "keyWeights": "Vec<KeyWeight>"
            },
            "KeyWeight": {
              "key": "PublicKey",
              "weight": "u16"
            },
            "BancorPool": {
              "currency_id": "CurrencyId",
              "token_pool": "Balance",
              "vstoken_pool": "Balance",
              "token_ceiling": "Balance",
              "token_base_supply": "Balance",
              "vstoken_base_supply": "Balance"
            },
            "IostAction": {
              "contract": "Vec<u8>",
              "action_name": "Vec<u8>",
              "data": "Vec<u8>"
            },
            "IostMultiSigTx": {
              "chain_id": "i32",
              "raw_tx": "Vec<u8>",
              "multi_sig": "MultiSig",
              "action": "IostAction",
              "from": "AccountId",
              "asset_id": "AssetId"
            },
            "Processing": {
              "tx_id": "Vec<u8>",
              "multi_sig_tx": "IostMultiSigTx"
            },
            "IostTxOut": {
              "_enum": {
                "Initial": "IostMultiSigTx",
                "Generated": "IostMultiSigTx",
                "Signed": "IostMultiSigTx",
                "Processing": "Processing",
                "Success": "Vec<u8>",
                "Fail": "Failed"
              }
            },
            "PalletBalanceOf": "Balance",
            "ExtraFeeName": {
              "_enum": [
                "SalpContribute",
                "NoExtraFee"
              ]
            },
            "IsExtended": "bool",
            "SystemPalletId": "PalletId",
            "TimeUnit": {
              "Era": "U32",
              "SlashingSpan": "U32"
            },
            "ledger": {
              "Substrate": "SubstrateLedger"
            },
            "SubstrateLedger": {
              "account": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>"
            },
            "UnlockChunk": {
              "value": "Balance",
              "unlock_time": "TimeUnit"
            },
            "MinimumsMaximums": {
              "delegator_bonded_minimum": "Balance",
              "bond_extra_minimum": "Balance",
              "unbond_minimum": "Balance",
              "rebond_minimum": "Balance",
              "unbond_record_maximum": "U32",
              "validators_back_maximum": "U32",
              "delegator_active_staking_maximum": "Balance"
            },
            "TrieIndex": "u32",
            "FundInfo": {
              "raised": "Balance",
              "cap": "Balance",
              "first_slot": "LeasePeriod",
              "last_slot": "LeasePeriod",
              "trie_index": "TrieIndex",
              "status": "FundStatus"
            },
            "RedeemStatus": "BalanceOf",
            "FundStatus": {
              "_enum": {
                "Ongoing": 0,
                "Retired": 1,
                "Success": 2,
                "Failed": 3,
                "RefundWithdrew": 4,
                "RedeemWithdrew": 5,
                "End": 6
              }
            },
            "ContributionStatus": {
              "_enum": [
                "Idle",
                "Refunded",
                "Redeemed",
                "Unlocked",
                "MigratedIdle",
                "Contributing"
              ]
            },
            "CrowdloanContributeCall": {
              "_enum": {
                "CrowdloanContribute": "ContributeCall"
              }
            },
            "ContributeCall": {
              "_enum": {
                "Contribute": "Contribution"
              }
            },
            "Contribution": {
              "index": "ParaId",
              "value": "BalanceOf",
              "signature": "Option<MultiSignature>"
            },
            "Withdraw": {
              "who": "AccountIdOf",
              "index": "ParaId"
            },
            "WithdrawCall": {
              "_enum": {
                "Withdraw": "Withdraw"
              }
            },
            "ParachainTransactProxyType": {
              "_enum": {
                "Primary": 0,
                "Derived": 1
              }
            },
            "ParachainDerivedProxyAccountType": {
              "_enum": {
                "Salp": 0,
                "Staking": 1
              }
            },
            "Keys": "SessionKeys1",
            "ParachainTransactType": {
              "_enum": {
                "Xcm": 0,
                "Proxy": 1
              }
            },
            "RpcContributionStatus": {
              "_enum": {
                "Idle": 0,
                "Contributing": 1,
                "Refunded": 2,
                "Unlocked": 3,
                "Redeemed": 4
              }
            },
            "RewardRecord": {
              "account_id": "AccountId",
              "record_amount": "Balance"
            },
            "PoolId": "u32",
            "SwapFee": "u128",
            "PoolDetails": {
              "owner": "AccountId",
              "swap_fee_rate": "SwapFee",
              "active": "bool"
            },
            "PoolWeight": "Balance",
            "PoolToken": "u128",
            "PoolCreateTokenDetails": {
              "token_id": "AssetId",
              "token_balance": "Balance",
              "token_weight": "PoolWeight"
            },
            "MaxLocksOf": "u32",
            "BifrostVestingInfo": {
              "locked": "Balance",
              "per_block": "Balance",
              "starting_block": "BlockNumber"
            },
            "OracleKey": "CurrencyId",
            "BlockNumberFor": "BlockNumber",
            "OrderInfo": {
              "owner": "AccountIdOf",
              "vsbond": "CurrencyId",
              "amount": "BalanceOf",
              "remain": "BalanceOf",
              "total_price": "BalanceOf",
              "order_id": "OrderId",
              "order_type": "OrderType",
              "remain_price": "BalanceOf"
            },
            "OrderId": "u64",
            "OrderType": {
              "_enum": {
                "Sell": 0,
                "Buy": 1
              }
            },
            "UnlockId": "U32",
            "ZenlinkAssetId": {
              "chain_id": "u32",
              "asset_type": "u8",
              "asset_index": "u64"
            },
            "ZenlinkAssetBalance": "u128",
            "PairInfo": {
              "asset0": "ZenlinkAssetId",
              "asset1": "ZenlinkAssetId",
              "account": "AccountId",
              "totalLiquidity": "ZenlinkAssetBalance",
              "holdingLiquidity": "ZenlinkAssetBalance",
              "reserve0": "ZenlinkAssetBalance",
              "reserve1": "ZenlinkAssetBalance",
              "lpAssetId": "ZenlinkAssetId"
            },
            "PairMetadata": {
              "pair_account": "AccountId",
              "target_supply": "ZenlinkAssetBalance"
            },
            "BootstrapParamter": {
              "min_contribution": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "target_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "accumulated_supply": "(ZenlinkAssetBalance, ZenlinkAssetBalance)",
              "end_block_number": "BlockNumber",
              "pair_account": "AccountId"
            },
            "PairStatus": {
              "_enum": {
                "Trading": "PairMetadata",
                "Bootstrap": "BootstrapParamter",
                "Disable": null
              }
            },
            "TokenSymbol": {
              "_enum": {
                "ASG": 0,
                "BNC": 1,
                "KUSD": 2,
                "DOT": 3,
                "KSM": 4,
                "KAR": 6,
                "ZLK": 7,
                "PHA": 8,
                "RMRK": 9,
                "MOVR": 10
              }
            },
            "CurrencyId": {
              "_enum": {
                "Native": "TokenSymbol",
                "VToken": "TokenSymbol",
                "Token": "TokenSymbol",
                "Stable": "TokenSymbol",
                "VSToken": "TokenSymbol",
                "VSBond": "(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",
                "LPToken": "(TokenSymbol, u8, TokenSymbol, u8)"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "TAssetBalance": "Balance",
            "AmountOf": "Balance",
            "StorageVersion": "Releases",
            "ShareWeight": "Balance",
            "Currency": "CurrencyIdOf",
            "Amount": "AmountOf",
            "NodePrimitivesCurrencyCurrencyId": "CurrencyId",
            "OrmlTokensBalanceLock": "BalanceLock",
            "OrmlTokensAccountData": "OrmlAccountData",
            "OrmlTokensReserveData": "(Currency, u8, Amount, u128)",
            "TransferOriginType": {
              "_enum": {
                "FromSelf": 0,
                "FromRelayChain": 1,
                "FromSiblingParaChain": 2
              }
            },
            "PoolType": {
              "_enum": {
                "Mining": 0,
                "Farming": 1,
                "EBFarming": 2
              }
            },
            "PoolState": {
              "_enum": {
                "UnCharged": 0,
                "Charged": 1,
                "Ongoing": 2,
                "Retired": 3,
                "Dead": 4
              }
            },
            "DepositData": {
              "deposit": "Balance",
              "gain_avgs": "BTreeMap<CurrencyId, FixedU128>",
              "update_b": "BlockNumber",
              "pending_unlocks": "Vec<(BlockNumber, Balance)>"
            },
            "RewardData": {
              "total": "Balance",
              "per_block": "Balance",
              "claimed": "Balance",
              "gain_avg": "FixedU128"
            },
            "MultiAsset": "MultiAssetV1",
            "Xcm": "XcmV1",
            "XcmOrder": "XcmOrderV1",
            "MultiLocation": "MultiLocationV1",
            "XcmError": "XcmErrorV1",
            "Response": "ResponseV1"
          }
        }
      ],
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "bitcountry-node": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AssetInfo": {
              "owner": "AccountId",
              "data": "AssetData"
            },
            "AssetData": {
              "name": "Text",
              "description": "Text",
              "properties": "Text",
              "supporters": "Vec<AccountId>"
            },
            "AuctionId": "u64",
            "AuctionItem": {
              "asset_id": "TokenId",
              "class_id": "ClassId",
              "recipient": "AccountId",
              "initial_amount": "Balance",
              "amount": "Balance",
              "start_time": "u32",
              "end_time": "u32"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId,Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "RentId": "u64",
            "RentalInfo": {
              "owner": "AccountId",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>",
              "price_per_block": "Balance"
            },
            "CountryId": "u64",
            "CountryCurrencyId": "u32",
            "CollectionId": "u64",
            "ClassId": "u32",
            "TokenId": "u64",
            "ClassInfoOf": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "data": "NftClassData"
            },
            "TokenInfoOf": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "data": "NftAssetData"
            },
            "NftCollectionData": {
              "name": "Vec<u8>",
              "owner": "AccountId",
              "properties": "Vec<u8>"
            },
            "CurrencyId": "u32",
            "CurrencyIdOf": "CurrencyId",
            "BalanceIdOf": "Balance",
            "GroupCollectionId": "u64",
            "ClassIdOf": "u32",
            "TokenIdOf": "u32",
            "SpotId": "u32"
          }
        }
      ]
    },
    "bitcountry-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AssetInfo": {
              "owner": "AccountId",
              "data": "AssetData"
            },
            "AssetData": {
              "name": "Text",
              "description": "Text",
              "properties": "Text",
              "supporters": "Vec<AccountId>"
            },
            "AuctionId": "u64",
            "AuctionItem": {
              "asset_id": "TokenId",
              "class_id": "ClassId",
              "recipient": "AccountId",
              "initial_amount": "Balance",
              "amount": "Balance",
              "start_time": "u32",
              "end_time": "u32"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId,Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "RentId": "u64",
            "RentalInfo": {
              "owner": "AccountId",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>",
              "price_per_block": "Balance"
            },
            "CountryId": "u64",
            "CollectionId": "u64",
            "ClassId": "u32",
            "TokenId": "u64",
            "ClassInfoOf": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "data": "NftClassData"
            },
            "TokenInfoOf": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "data": "NftAssetData"
            },
            "NftCollectionData": {
              "name": "Vec<u8>",
              "owner": "AccountId",
              "properties": "Vec<u8>"
            },
            "TokenType": {
              "_enum": [
                "Transferrable",
                "BoundToAddress"
              ]
            },
            "NftAssetData": {
              "name": "Vec<u8>",
              "description": "Vec<u8>",
              "properties": "Vec<u8>"
            },
            "NftClassData": {
              "deposit": "Balance",
              "properties": "Vec<u8>",
              "token_type": "TokenType"
            },
            "NetworkId": {
              "_enum": {
                "Any": "Null",
                "Named": "Vec<u8>",
                "Polkadot": "Null",
                "Kusama": "Null"
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol"
              }
            },
            "TokenSymbol": {
              "_enum": [
                "NUUM",
                "AUSD",
                "ACA",
                "DOT"
              ]
            },
            "CountryCurrencyId": "u32",
            "CurrencyIdOf": "CurrencyId",
            "BalanceIdOf": "Balance",
            "ChainId": {
              "_enum": {
                "RelayChain": "Null",
                "ParaChain": "ParaId"
              }
            },
            "XCurrencyId": {
              "chain_id": "ChainId",
              "currency_id": "CurrencyId"
            },
            "GroupCollectionId": "u64",
            "ClassIdOf": "u32",
            "TokenIdOf": "u32",
            "SpotId": "u32"
          }
        }
      ]
    },
    "centrifuge": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AnchorData": {
              "id": "Hash",
              "docRoot": "Hash",
              "anchoredBlock": "u64"
            },
            "ChainId": "u8",
            "chainbridge::ChainId": "u8",
            "DepositNonce": "u64",
            "Fee": {
              "key": "Hash",
              "price": "Balance"
            },
            "ParachainAccountIdOf": "AccountId",
            "PreCommitData": {
              "signingRoot": "Hash",
              "identity": "AccountId",
              "expirationBlock": "u64"
            },
            "Proof": {
              "leafHash": "Hash",
              "sortedHashes": "Vec<Hash>"
            },
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "_Staking",
                "NonProxy"
              ]
            },
            "ResourceId": "[u8; 32]",
            "RelayChainAccountId": "AccountId",
            "RootHashOf": "Hash"
          }
        }
      ]
    },
    "centrifuge-chain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AnchorData": {
              "id": "H256",
              "docRoot": "H256",
              "anchoredBlock": "u64"
            },
            "Fee": {
              "key": "Hash",
              "price": "Balance"
            },
            "PreCommitData": {
              "signingRoot": "H256",
              "identity": "H256",
              "expirationBlock": "u64"
            },
            "Proof": {
              "leafHash": "H256",
              "sortedHashes": "H256"
            },
            "MultiAccountData": {
              "threshold": "u16",
              "signatories": "Vec<AccountId>",
              "deposit": "Balance",
              "depositor": "AccountId"
            },
            "ChainId": "u8",
            "ResourceId": "[u8; 32]",
            "chainbridge::ChainId": "u8",
            "DepositNonce": "u64",
            "RegistryId": "H160",
            "TokenId": "U256",
            "AssetId": {
              "registryId": "RegistryId",
              "tokenId": "TokenId"
            },
            "RegistryInfo": {
              "ownerCanBurn": "bool",
              "fields": "Vec<Bytes>"
            },
            "AssetInfo": {
              "metadata": "Bytes"
            },
            "ProofMint": {
              "value": "Bytes",
              "property": "Bytes",
              "salt": "[u8; 32]",
              "hashes": "Vec<Hash>"
            },
            "MintInfo": {
              "anchorId": "Hash",
              "staticHashes": "[Hash; 3]",
              "proofs": "Vec<ProofMint>"
            }
          }
        }
      ]
    },
    "chainx": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "Chain": {
              "_enum": [
                "ChainX",
                "Bitcoin",
                "Ethereum",
                "Polkadot"
              ]
            },
            "NetworkType": {
              "_enum": [
                "Mainnet",
                "Testnet"
              ]
            },
            "AssetType": {
              "_enum": [
                "Usable",
                "Locked",
                "Reserved",
                "ReservedWithdrawal",
                "ReservedDexSpot"
              ]
            },
            "OrderType": {
              "_enum": [
                "Limit",
                "Market"
              ]
            },
            "Side": {
              "_enum": [
                "Buy",
                "Sell"
              ]
            },
            "LockedType": {
              "_enum": [
                "Bonded",
                "BondedWithdrawal"
              ]
            },
            "Memo": "Text",
            "AssetInfo": {
              "token": "String",
              "tokenName": "String",
              "chain": "Chain",
              "decimals": "Decimals",
              "desc": "String"
            },
            "TradingPairProfile": {
              "id": "TradingPairId",
              "currencyPair": "CurrencyPair",
              "pipDecimals": "u32",
              "tickDecimals": "u32",
              "tradable": "bool"
            },
            "Order": {
              "props": "OrderProperty",
              "status": "OrderStatus",
              "remaining": "Balance",
              "executedIndices": "Vec<TradingHistoryIndex>",
              "alreadyFilled": "Balance",
              "lastUpdateAt": "BlockNumber"
            },
            "TradingPairInfo": {
              "latestPrice": "Price",
              "lastUpdated": "BlockNumber"
            },
            "OrderExecutedInfo": {
              "tradingHistoryIdx": "TradingHistoryIndex",
              "pairId": "TradingPairId",
              "price": "Price",
              "maker": "AccountId",
              "taker": "AccountId",
              "makerOrderId": "OrderId",
              "takerOrderId": "OrderId",
              "turnover": "Balance",
              "executedAt": "BlockNumber"
            },
            "BtcHeaderInfo": {
              "header": "BtcHeader",
              "height": "u32"
            },
            "BtcParams": {
              "maxBits": "u32",
              "blockMaxFuture": "u32",
              "targetTimespanSeconds": "u32",
              "targetSpacingSeconds": "u32",
              "retargetingFactor": "u32",
              "retargetingInterval": "u32",
              "minTimespan": "u32",
              "maxTimespan": "u32"
            },
            "MiningAssetInfo": {
              "assetId": "AssetId",
              "miningPower": "FixedAssetPower",
              "rewardPot": "AccountId",
              "rewardPotBalance": "RpcBalance",
              "lastTotalMiningWeight": "RpcMiningWeight",
              "lastTotalMiningWeightUpdate": "BlockNumber"
            },
            "MiningDividendInfo": {
              "own": "Balance",
              "other": "Balance",
              "insufficientStake": "Balance"
            },
            "AssetLedger": {
              "lastTotalMiningWeight": "MiningWeight",
              "lastTotalMiningWeightUpdate": "BlockNumber"
            },
            "MinerLedger": {
              "lastMiningWeight": "MiningWeight",
              "lastMiningWeightUpdate": "BlockNumber",
              "lastClaim": "Option<BlockNumber>"
            },
            "ClaimRestriction": {
              "stakingRequirement": "StakingRequirement",
              "frequencyLimit": "BlockNumber"
            },
            "NominatorInfo": {
              "lastRebond": "Option<BlockNumber>"
            },
            "BondRequirement": {
              "selfBonded": "Balance",
              "total": "Balance"
            },
            "Unbonded": {
              "value": "Balance",
              "lockedUntil": "BlockNumber"
            },
            "ValidatorLedger": {
              "totalNomination": "Balance",
              "lastTotalVoteWeight": "VoteWeight",
              "lastTotalVoteWeightUpdate": "BlockNumber"
            },
            "NominatorLedger": {
              "nomination": "Balance",
              "lastVoteWeight": "VoteWeight",
              "lastVoteWeightUpdate": "BlockNumber",
              "unbondedChunks": "Vec<Unbonded>"
            },
            "ValidatorProfile": {
              "registeredAt": "BlockNumber",
              "isChilled": "bool",
              "lastChilled": "Option<BlockNumber>",
              "referralId": "ReferralId"
            },
            "GlobalDistribution": {
              "treasury": "u32",
              "mining": "u32"
            },
            "MiningDistribution": {
              "asset": "u32",
              "staking": "u32"
            },
            "InclusionFee": {
              "baseFee": "Balance",
              "lenFee": "Balance",
              "adjustedWeightFee": "Balance"
            },
            "FeeDetails": {
              "inclusionFee": "Option<InclusionFee<Balance>>",
              "extraFee": "Balance",
              "tip": "Balance",
              "finalFee": "Balance"
            },
            "UnbondedIndex": "u32",
            "Token": "Text",
            "Desc": "Text",
            "AddrStr": "Text",
            "HandicapInfo": "Handicap",
            "Price": "u128",
            "OrderId": "u64",
            "TradingPairId": "u32",
            "TradingHistoryIndex": "u64",
            "PriceFluctuation": "u32",
            "BtcAddress": "Text",
            "FixedAssetPower": "u32",
            "StakingRequirement": "u32",
            "Decimals": "u8",
            "CurrencyPair": {
              "base": "AssetId",
              "quote": "AssetId"
            },
            "OrderStatus": {
              "_enum": [
                "Created",
                "PartialFill",
                "Filled",
                "PartialFillAndCanceled",
                "Canceled"
              ]
            },
            "AssetId": "u32",
            "MiningWeight": "u128",
            "VoteWeight": "u128",
            "ReferralId": "Text",
            "AssetRestriction": {
              "_enum": [
                "Move",
                "Transfer",
                "Deposit",
                "Withdraw",
                "DestroyWithdrawal",
                "DestroyFree"
              ]
            },
            "AssetRestrictions": {
              "bits": "u32"
            },
            "BtcHeader": "Vec<u8>",
            "BtcNetwork": {
              "_enum": [
                "Mainnet",
                "Testnet"
              ]
            },
            "OrderInfo": "Order",
            "Amount": "i128",
            "AmountOf": "Amount",
            "CurrencyIdOf": "AssetId",
            "CurrencyId": "AssetId",
            "Handicap": {
              "highestBid": "Price",
              "lowestAsk": "Price"
            },
            "OrderProperty": {
              "id": "OrderId",
              "side": "Side",
              "price": "Price",
              "amount": "Amount",
              "pairId": "TradingPairId",
              "submitter": "AccountId",
              "orderType": "OrderType",
              "createdAt": "BlockNumber"
            },
            "TotalAssetInfo": {
              "info": "AssetInfo",
              "balance": "BTreeMap<AssetType, Balance>",
              "isOnline": "bool",
              "restrictions": "AssetRestrictions"
            },
            "WithdrawalRecordId": "u32",
            "WithdrawalState": {
              "_enum": [
                "Applying",
                "Processing",
                "NormalFinish",
                "RootFinish",
                "NormalCancel",
                "RootCancel"
              ]
            },
            "WithdrawalRecord": {
              "assetId": "AssetId",
              "applicant": "AccountId",
              "balance": "Balance",
              "addr": "AddrStr",
              "ext": "Memo",
              "height": "BlockNumber"
            },
            "WithdrawalLimit": {
              "minimalWithdrawal": "Balance",
              "fee": "Balance"
            },
            "TrusteeInfoConfig": {
              "minTrusteeCount": "u32",
              "maxTrusteeCount": "u32"
            },
            "GenericTrusteeIntentionProps": {
              "about": "Text",
              "hotEntity": "Vec<u8>",
              "coldEntity": "Vec<u8>"
            },
            "GenericTrusteeSessionInfo": {
              "trusteeList": "Vec<AccountId>",
              "threshold": "u16",
              "hotAddress": "Vec<u8>",
              "coldAddress": "Vec<u8>"
            },
            "ChainAddress": "Vec<u8>",
            "BtcTrusteeType": "Vec<u8>",
            "BtcTrusteeAddrInfo": {
              "addr": "BtcAddress",
              "redeemScript": "Vec<u8>"
            },
            "BtcTrusteeIntentionProps": {
              "about": "Text",
              "hotEntity": "BtcTrusteeType",
              "coldEntity": "BtcTrusteeType"
            },
            "BtcTrusteeSessionInfo": {
              "trusteeList": "Vec<AccountId>",
              "threshold": "u16",
              "hotAddress": "BtcTrusteeAddrInfo",
              "coldAddress": "BtcTrusteeAddrInfo"
            },
            "BtcTransaction": "Vec<u8>",
            "BtcPartialMerkleTree": "Vec<u8>",
            "BtcRelayedTxInfo": {
              "blockHash": "H256",
              "merkleProof": "BtcPartialMerkleTree"
            },
            "BtcHeaderIndex": {
              "hash": "H256",
              "height": "u32"
            },
            "BtcTxResult": {
              "_enum": [
                "Success",
                "Failure"
              ]
            },
            "BtcTxState": {
              "txType": "BtcTxType",
              "result": "BtcTxResult"
            },
            "BtcTxType": {
              "_enum": [
                "Withdrawal",
                "Deposit",
                "HotAndCold",
                "TrusteeTransition",
                "Irrelevance"
              ]
            },
            "BtcDepositCache": {
              "txid": "H256",
              "balance": "u64"
            },
            "BtcVoteResult": {
              "_enum": [
                "Unfinish",
                "Finish"
              ]
            },
            "BtcWithdrawalProposal": {
              "sigState": "BtcVoteResult",
              "withdrawalIdList": "Vec<u32>",
              "tx": "BtcTransaction",
              "trusteeList": "Vec<(AccountId, bool)>"
            },
            "BtcTxVerifier": {
              "_enum": [
                "Recover",
                "RuntimeInterface"
              ]
            },
            "RpcTotalAssetInfo": {
              "info": "AssetInfo",
              "balance": "BTreeMap<AssetType, RpcBalance>",
              "isOnline": "bool",
              "restrictions": "AssetRestrictions"
            },
            "RpcOrder": {
              "id": "OrderId",
              "side": "Side",
              "price": "RpcPrice",
              "amount": "RpcBalance",
              "pairId": "TradingPairId",
              "submitter": "AccountId",
              "orderType": "OrderType",
              "createdAt": "BlockNumber",
              "status": "OrderStatus",
              "remaining": "RpcBalance",
              "executedIndices": "Vec<TradingHistoryIndex>",
              "alreadyFilled": "RpcBalance",
              "reservedBalance": "RpcBalance",
              "lastUpdateAt": "BlockNumber"
            },
            "RpcWithdrawalRecord": {
              "assetId": "AssetId",
              "applicant": "AccountId",
              "balance": "RpcBalance",
              "addr": "String",
              "ext": "String",
              "height": "BlockNumber",
              "state": "WithdrawalState"
            },
            "RpcMiningDividendInfo": {
              "own": "RpcBalance",
              "other": "RpcBalance",
              "insufficientStake": "RpcBalance"
            },
            "RpcInclusionFee": {
              "baseFee": "RpcBalance",
              "lenFee": "RpcBalance",
              "adjustedWeightFee": "RpcBalance"
            },
            "RpcFeeDetails": {
              "inclusionFee": "Option<RpcInclusionFee>",
              "tip": "RpcBalance",
              "extraFee": "RpcBalance",
              "finalFee": "RpcBalance"
            },
            "ValidatorInfo": {
              "account": "AccountId",
              "registeredAt": "BlockNumber",
              "isChilled": "bool",
              "lastChilled": "Option<BlockNumber>",
              "totalNomination": "RpcBalance",
              "lastTotalVoteWeight": "RpcVoteWeight",
              "lastTotalVoteWeightUpdate": "BlockNumber",
              "isValidating": "bool",
              "selfBonded": "RpcBalance",
              "referralId": "String",
              "rewardPotAccount": "AccountId",
              "rewardPotBalance": "RpcBalance"
            },
            "FullPairInfo": {
              "baseCurrency": "AssetId",
              "highestBid": "RpcPrice",
              "id": "TradingPairId",
              "latestPrice": "RpcPrice",
              "latestPriceUpdatedAt": "BlockNumber",
              "lowestAsk": "RpcPrice",
              "maxValidBid": "RpcPrice",
              "minValidAsk": "RpcPrice",
              "pipDecimals": "u32",
              "quoteCurrency": "AssetId",
              "tickDecimals": "u32",
              "tradable": "bool"
            },
            "Depth": {
              "asks": "Vec<(RpcPrice, RpcBalance)>",
              "bids": "Vec<(RpcPrice, RpcBalance)>"
            },
            "Page": {
              "pageIndex": "u32",
              "pageSize": "u32",
              "data": "Vec<RpcOrder>"
            },
            "String": "Text",
            "Balance": "u128",
            "RpcPrice": "String",
            "RpcBalance": "String",
            "RpcMiningWeight": "String",
            "RpcVoteWeight": "String",
            "FullIdentification": "ValidatorId",
            "WithdrawalRecordOf": "WithdrawalRecord"
          }
        }
      ]
    },
    "chainx-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "Chain": {
              "_enum": [
                "ChainX",
                "Bitcoin",
                "Ethereum",
                "Polkadot"
              ]
            },
            "NetworkType": {
              "_enum": [
                "Mainnet",
                "Testnet"
              ]
            },
            "AssetType": {
              "_enum": [
                "Usable",
                "Locked",
                "Reserved",
                "ReservedWithdrawal",
                "ReservedDexSpot"
              ]
            },
            "OrderType": {
              "_enum": [
                "Limit",
                "Market"
              ]
            },
            "Side": {
              "_enum": [
                "Buy",
                "Sell"
              ]
            },
            "LockedType": {
              "_enum": [
                "Bonded",
                "BondedWithdrawal"
              ]
            },
            "Memo": "Text",
            "AssetInfo": {
              "token": "String",
              "tokenName": "String",
              "chain": "Chain",
              "decimals": "Decimals",
              "desc": "String"
            },
            "TradingPairProfile": {
              "id": "TradingPairId",
              "currencyPair": "CurrencyPair",
              "pipDecimals": "u32",
              "tickDecimals": "u32",
              "tradable": "bool"
            },
            "Order": {
              "props": "OrderProperty",
              "status": "OrderStatus",
              "remaining": "Balance",
              "executedIndices": "Vec<TradingHistoryIndex>",
              "alreadyFilled": "Balance",
              "lastUpdateAt": "BlockNumber"
            },
            "TradingPairInfo": {
              "latestPrice": "Price",
              "lastUpdated": "BlockNumber"
            },
            "OrderExecutedInfo": {
              "tradingHistoryIdx": "TradingHistoryIndex",
              "pairId": "TradingPairId",
              "price": "Price",
              "maker": "AccountId",
              "taker": "AccountId",
              "makerOrderId": "OrderId",
              "takerOrderId": "OrderId",
              "turnover": "Balance",
              "executedAt": "BlockNumber"
            },
            "BtcHeaderInfo": {
              "header": "BtcHeader",
              "height": "u32"
            },
            "BtcParams": {
              "maxBits": "u32",
              "blockMaxFuture": "u32",
              "targetTimespanSeconds": "u32",
              "targetSpacingSeconds": "u32",
              "retargetingFactor": "u32",
              "retargetingInterval": "u32",
              "minTimespan": "u32",
              "maxTimespan": "u32"
            },
            "MiningAssetInfo": {
              "assetId": "AssetId",
              "miningPower": "FixedAssetPower",
              "rewardPot": "AccountId",
              "rewardPotBalance": "RpcBalance",
              "lastTotalMiningWeight": "RpcMiningWeight",
              "lastTotalMiningWeightUpdate": "BlockNumber"
            },
            "MiningDividendInfo": {
              "own": "Balance",
              "other": "Balance",
              "insufficientStake": "Balance"
            },
            "AssetLedger": {
              "lastTotalMiningWeight": "MiningWeight",
              "lastTotalMiningWeightUpdate": "BlockNumber"
            },
            "MinerLedger": {
              "lastMiningWeight": "MiningWeight",
              "lastMiningWeightUpdate": "BlockNumber",
              "lastClaim": "Option<BlockNumber>"
            },
            "ClaimRestriction": {
              "stakingRequirement": "StakingRequirement",
              "frequencyLimit": "BlockNumber"
            },
            "NominatorInfo": {
              "lastRebond": "Option<BlockNumber>"
            },
            "BondRequirement": {
              "selfBonded": "Balance",
              "total": "Balance"
            },
            "Unbonded": {
              "value": "Balance",
              "lockedUntil": "BlockNumber"
            },
            "ValidatorLedger": {
              "totalNomination": "Balance",
              "lastTotalVoteWeight": "VoteWeight",
              "lastTotalVoteWeightUpdate": "BlockNumber"
            },
            "NominatorLedger": {
              "nomination": "Balance",
              "lastVoteWeight": "VoteWeight",
              "lastVoteWeightUpdate": "BlockNumber",
              "unbondedChunks": "Vec<Unbonded>"
            },
            "ValidatorProfile": {
              "registeredAt": "BlockNumber",
              "isChilled": "bool",
              "lastChilled": "Option<BlockNumber>",
              "referralId": "ReferralId"
            },
            "GlobalDistribution": {
              "treasury": "u32",
              "mining": "u32"
            },
            "MiningDistribution": {
              "asset": "u32",
              "staking": "u32"
            },
            "InclusionFee": {
              "baseFee": "Balance",
              "lenFee": "Balance",
              "adjustedWeightFee": "Balance"
            },
            "FeeDetails": {
              "inclusionFee": "Option<InclusionFee<Balance>>",
              "extraFee": "Balance",
              "tip": "Balance",
              "finalFee": "Balance"
            },
            "UnbondedIndex": "u32",
            "Token": "Text",
            "Desc": "Text",
            "AddrStr": "Text",
            "HandicapInfo": "Handicap",
            "Price": "u128",
            "OrderId": "u64",
            "TradingPairId": "u32",
            "TradingHistoryIndex": "u64",
            "PriceFluctuation": "u32",
            "BtcAddress": "Text",
            "FixedAssetPower": "u32",
            "StakingRequirement": "u32",
            "Decimals": "u8",
            "CurrencyPair": {
              "base": "AssetId",
              "quote": "AssetId"
            },
            "OrderStatus": {
              "_enum": [
                "Created",
                "PartialFill",
                "Filled",
                "PartialFillAndCanceled",
                "Canceled"
              ]
            },
            "AssetId": "u32",
            "MiningWeight": "u128",
            "VoteWeight": "u128",
            "ReferralId": "Text",
            "AssetRestriction": {
              "_enum": [
                "Move",
                "Transfer",
                "Deposit",
                "Withdraw",
                "DestroyWithdrawal",
                "DestroyFree"
              ]
            },
            "AssetRestrictions": {
              "bits": "u32"
            },
            "BtcHeader": "Vec<u8>",
            "BtcNetwork": {
              "_enum": [
                "Mainnet",
                "Testnet"
              ]
            },
            "OrderInfo": "Order",
            "Amount": "i128",
            "AmountOf": "Amount",
            "CurrencyIdOf": "AssetId",
            "CurrencyId": "AssetId",
            "Handicap": {
              "highestBid": "Price",
              "lowestAsk": "Price"
            },
            "OrderProperty": {
              "id": "OrderId",
              "side": "Side",
              "price": "Price",
              "amount": "Amount",
              "pairId": "TradingPairId",
              "submitter": "AccountId",
              "orderType": "OrderType",
              "createdAt": "BlockNumber"
            },
            "TotalAssetInfo": {
              "info": "AssetInfo",
              "balance": "BTreeMap<AssetType, Balance>",
              "isOnline": "bool",
              "restrictions": "AssetRestrictions"
            },
            "WithdrawalRecordId": "u32",
            "WithdrawalState": {
              "_enum": [
                "Applying",
                "Processing",
                "NormalFinish",
                "RootFinish",
                "NormalCancel",
                "RootCancel"
              ]
            },
            "WithdrawalRecord": {
              "assetId": "AssetId",
              "applicant": "AccountId",
              "balance": "Balance",
              "addr": "AddrStr",
              "ext": "Memo",
              "height": "BlockNumber"
            },
            "WithdrawalLimit": {
              "minimalWithdrawal": "Balance",
              "fee": "Balance"
            },
            "TrusteeInfoConfig": {
              "minTrusteeCount": "u32",
              "maxTrusteeCount": "u32"
            },
            "GenericTrusteeIntentionProps": {
              "about": "Text",
              "hotEntity": "Vec<u8>",
              "coldEntity": "Vec<u8>"
            },
            "GenericTrusteeSessionInfo": {
              "trusteeList": "Vec<AccountId>",
              "threshold": "u16",
              "hotAddress": "Vec<u8>",
              "coldAddress": "Vec<u8>"
            },
            "ChainAddress": "Vec<u8>",
            "BtcTrusteeType": "Vec<u8>",
            "BtcTrusteeAddrInfo": {
              "addr": "BtcAddress",
              "redeemScript": "Vec<u8>"
            },
            "BtcTrusteeIntentionProps": {
              "about": "Text",
              "hotEntity": "BtcTrusteeType",
              "coldEntity": "BtcTrusteeType"
            },
            "BtcTrusteeSessionInfo": {
              "trusteeList": "Vec<AccountId>",
              "threshold": "u16",
              "hotAddress": "BtcTrusteeAddrInfo",
              "coldAddress": "BtcTrusteeAddrInfo"
            },
            "BtcTransaction": "Vec<u8>",
            "BtcPartialMerkleTree": "Vec<u8>",
            "BtcRelayedTxInfo": {
              "blockHash": "H256",
              "merkleProof": "BtcPartialMerkleTree"
            },
            "BtcHeaderIndex": {
              "hash": "H256",
              "height": "u32"
            },
            "BtcTxResult": {
              "_enum": [
                "Success",
                "Failure"
              ]
            },
            "BtcTxState": {
              "txType": "BtcTxType",
              "result": "BtcTxResult"
            },
            "BtcTxType": {
              "_enum": [
                "Withdrawal",
                "Deposit",
                "HotAndCold",
                "TrusteeTransition",
                "Irrelevance"
              ]
            },
            "BtcDepositCache": {
              "txid": "H256",
              "balance": "u64"
            },
            "BtcVoteResult": {
              "_enum": [
                "Unfinish",
                "Finish"
              ]
            },
            "BtcWithdrawalProposal": {
              "sigState": "BtcVoteResult",
              "withdrawalIdList": "Vec<u32>",
              "tx": "BtcTransaction",
              "trusteeList": "Vec<(AccountId, bool)>"
            },
            "BtcTxVerifier": {
              "_enum": [
                "Recover",
                "RuntimeInterface"
              ]
            },
            "RpcTotalAssetInfo": {
              "info": "AssetInfo",
              "balance": "BTreeMap<AssetType, RpcBalance>",
              "isOnline": "bool",
              "restrictions": "AssetRestrictions"
            },
            "RpcOrder": {
              "id": "OrderId",
              "side": "Side",
              "price": "RpcPrice",
              "amount": "RpcBalance",
              "pairId": "TradingPairId",
              "submitter": "AccountId",
              "orderType": "OrderType",
              "createdAt": "BlockNumber",
              "status": "OrderStatus",
              "remaining": "RpcBalance",
              "executedIndices": "Vec<TradingHistoryIndex>",
              "alreadyFilled": "RpcBalance",
              "reservedBalance": "RpcBalance",
              "lastUpdateAt": "BlockNumber"
            },
            "RpcWithdrawalRecord": {
              "assetId": "AssetId",
              "applicant": "AccountId",
              "balance": "RpcBalance",
              "addr": "String",
              "ext": "String",
              "height": "BlockNumber",
              "state": "WithdrawalState"
            },
            "RpcMiningDividendInfo": {
              "own": "RpcBalance",
              "other": "RpcBalance",
              "insufficientStake": "RpcBalance"
            },
            "RpcInclusionFee": {
              "baseFee": "RpcBalance",
              "lenFee": "RpcBalance",
              "adjustedWeightFee": "RpcBalance"
            },
            "RpcFeeDetails": {
              "inclusionFee": "Option<RpcInclusionFee>",
              "tip": "RpcBalance",
              "extraFee": "RpcBalance",
              "finalFee": "RpcBalance"
            },
            "ValidatorInfo": {
              "account": "AccountId",
              "registeredAt": "BlockNumber",
              "isChilled": "bool",
              "lastChilled": "Option<BlockNumber>",
              "totalNomination": "RpcBalance",
              "lastTotalVoteWeight": "RpcVoteWeight",
              "lastTotalVoteWeightUpdate": "BlockNumber",
              "isValidating": "bool",
              "selfBonded": "RpcBalance",
              "referralId": "String",
              "rewardPotAccount": "AccountId",
              "rewardPotBalance": "RpcBalance"
            },
            "FullPairInfo": {
              "baseCurrency": "AssetId",
              "highestBid": "RpcPrice",
              "id": "TradingPairId",
              "latestPrice": "RpcPrice",
              "latestPriceUpdatedAt": "BlockNumber",
              "lowestAsk": "RpcPrice",
              "maxValidBid": "RpcPrice",
              "minValidAsk": "RpcPrice",
              "pipDecimals": "u32",
              "quoteCurrency": "AssetId",
              "tickDecimals": "u32",
              "tradable": "bool"
            },
            "Depth": {
              "asks": "Vec<(RpcPrice, RpcBalance)>",
              "bids": "Vec<(RpcPrice, RpcBalance)>"
            },
            "Page": {
              "pageIndex": "u32",
              "pageSize": "u32",
              "data": "Vec<RpcOrder>"
            },
            "String": "Text",
            "Balance": "u128",
            "RpcPrice": "String",
            "RpcBalance": "String",
            "RpcMiningWeight": "String",
            "RpcVoteWeight": "String",
            "FullIdentification": "ValidatorId",
            "WithdrawalRecordOf": "WithdrawalRecord"
          }
        }
      ]
    },
    "clover": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Amount": "i128",
            "Keys": "SessionKeys4",
            "AmountOf": "Amount",
            "Balance": "u128",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "EcdsaSignature": "[u8; 65]",
            "EvmAddress": "H160",
            "EthereumTxHash": "H256",
            "BridgeNetworks": {
              "_enum": [
                "BSC",
                "Ethereum",
                "CloverPara"
              ]
            }
          }
        }
      ]
    },
    "clover-rococo": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Amount": "i128",
            "AmountOf": "Amount",
            "Balance": "u128",
            "CurrencyId": {
              "_enum": [
                "CLV",
                "CUSDT",
                "DOT",
                "CETH"
              ]
            },
            "CurrencyIdOf": "CurrencyId",
            "CurrencyTypeEnum": {
              "_enum": [
                "CLV",
                "CUSDT",
                "DOT",
                "CETH"
              ]
            },
            "PairKey": "u64",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "Price": "FixedU128",
            "Share": "u128",
            "OracleKey": "CurrencyId",
            "CurrencyInfo": {
              "id": "CurrencyId",
              "name": "CurrencyTypeEnum"
            },
            "ExchangeInfo": {
              "balance": "Balance",
              "routes": "Vec<CurrencyTypeEnum>"
            },
            "PoolId": {
              "_enum": {
                "Swap": "u64"
              }
            },
            "EcdsaSignature": "[u8; 65]",
            "EvmAddress": "H160",
            "ExitSucceed": {
              "_enum": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "ExitRevert": {
              "_enum": [
                "Reverted"
              ]
            },
            "ExitError": {
              "_enum": [
                "StackUnderflow",
                "StackOverflow",
                "InvalidJump",
                "InvalidRange",
                "DesignatedInvalid",
                "CallTooDeep",
                "CreateCollision",
                "CreateContractLimit",
                "OutOfOffset",
                "OutOfGas",
                "OutOfFund",
                "PCUnderflow",
                "CreateEmpty",
                "Other<String>"
              ]
            },
            "ExitFatal": {
              "_enum": [
                "NotSupported",
                "UnhandledInterrupt",
                "CallErrorAsFatal",
                "Other<String>"
              ]
            },
            "ExitReason": {
              "_enum": [
                "Succeed<ExitSucceed>",
                "Error<ExitError>",
                "Revert<ExitRevert>",
                "Fatal<ExitFatal>"
              ]
            }
          }
        }
      ]
    },
    "coinversation": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "competitors-club": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "ClassId": "u64",
            "ClassInfoOf": "ClassId",
            "BalanceOf": "Balance",
            "BalanceReservableOf": "BalanceOf",
            "Moment": "u64",
            "Place": {
              "spot": "u32",
              "payout": "Balance"
            },
            "Competitor": {
              "vie_id": "[u8;16]",
              "staked": "bool",
              "submitted_winner": "bool"
            },
            "Vie": {
              "operator": "AccountId",
              "stake": "Balance",
              "places": "Vec<Place>",
              "time": "Moment",
              "competitors": "Vec<AccountId>",
              "memo": "Vec<u8>"
            },
            "VieOf": "Vie",
            "VieReq": {
              "stake": "Balance",
              "places": "Vec<Place>",
              "competitors": "Vec<AccountId>",
              "memo": "Vec<u8>"
            },
            "VieRequestOf": "VieReq",
            "Participants": {
              "AccountId": "[u8;16]"
            },
            "Operators": {
              "AccountId": "[u8;16]"
            },
            "StandingReq": {
              "competitor": "AccountId",
              "spot": "u32"
            },
            "PodiumReq": {
              "champion": "AccountId",
              "podium": "Vec<StandingReq>"
            },
            "PodiumReqOf": "PodiumReq",
            "Trophy": {
              "trophy": "[u8; 16]",
              "competitors": "Vec<AccountId>",
              "stake": "Balance",
              "memo": "Vec<u8>",
              "time": "u64",
              "podium": "Vec<StandingReq>"
            },
            "TokenId": "u64",
            "TokenInfo": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "data": "Trophy"
            },
            "TokenInfoOf": "TokenInfo"
          }
        }
      ]
    },
    "contextfree": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "ResourceId": "[u8; 32]",
            "DepositNonce": "u64",
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "ProposalStatus"
            },
            "BridgeTokenId": "U256",
            "BridgeChainId": "u8",
            "VestingPlan": {
              "start_time": "u64",
              "cliff_duration": "u64",
              "total_duration": "u64",
              "interval": "u64",
              "initial_amount": "Balance",
              "total_amount": "Balance",
              "vesting_during_cliff": "bool"
            },
            "ProposalId": "u32",
            "ProjectId": "u32",
            "ChainIndex": "u32",
            "Protocol": {
              "_enum": [
                "Solidity",
                "Substrate"
              ]
            },
            "Chain": {
              "_protocol": "Protocol"
            },
            "CrossChainAccount": {
              "_enum": {
                "Solidity": "H160",
                "Substrate": "AccountId"
              }
            },
            "IpfsHash": "Text",
            "SolidityStrategy": {
              "_enum": {
                "ERC20Balance": "H160"
              }
            },
            "SubstrateStrategy": {
              "_enum": [
                "NativeBalance"
              ]
            },
            "Strategy": {
              "_enum": {
                "Solidity": "SolidityStrategy",
                "Substrate": "SubstrateStrategy"
              }
            },
            "Workspace": {
              "_chain": "ChainIndex",
              "strategies": "Vec<Strategy>"
            },
            "UserGroup": {
              "owner": "CrossChainAccount",
              "admins": "Vec<CrossChainAccount>",
              "maintainers": "Vec<CrossChainAccount>",
              "proposers": "Option<Vec<CrossChainAccount>>"
            },
            "Project": {
              "usergroup": "UserGroup",
              "data": "IpfsHash",
              "workspaces": "Vec<Workspace>"
            },
            "VotingFormat": {
              "_enum": [
                "SingleChoice",
                "SplitVote"
              ]
            },
            "OptionIndex": "u8",
            "PrivacyLevel": {
              "_enum": {
                "Opaque": "u8",
                "Rank": "Null",
                "Private": "Null",
                "Public": "Null",
                "Mixed": "Null"
              }
            },
            "VotingPower": "U256",
            "DAOProposalState": {
              "finalized": "bool",
              "snapshots": "Vec<Option<U256>>",
              "blacklisted": "bool",
              "votes": "Vec<VotingPower>",
              "pub_voters": "Option<IpfsHash>",
              "updates": "u32"
            },
            "DAOProposal": {
              "_author": "CrossChainAccount",
              "_voting_format": "VotingFormat",
              "_option_count": "OptionIndex",
              "_data": "IpfsHash",
              "_privacy": "PrivacyLevel",
              "_start": "u64",
              "_end": "u64",
              "_frequency": "Option<u64>",
              "_workspaces": "Vec<Workspace>",
              "state": "DAOProposalState"
            },
            "VoteUpdate": {
              "project": "ProjectId",
              "proposal": "ProposalId",
              "votes": "Vec<VotingPower>",
              "pub_voters": "Option<IpfsHash>"
            }
          }
        }
      ]
    },
    "contracts": {
      "types": [
        {
          "minmax": [
            0,
            8
          ],
          "types": {
            "Address": "AccountId",
            "Keys": "SessionKeys2",
            "LookupSource": "AccountId",
            "Schedule": "ScheduleTo258"
          }
        },
        {
          "minmax": [
            9,
            null
          ],
          "types": {
            "Keys": "SessionKeys2"
          }
        }
      ]
    },
    "crown-sterling": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AccountInfo": {
              "nonce": "Index",
              "consumers": "RefCount",
              "providers": "RefCount",
              "data": "AccountData"
            },
            "Balance": "u128",
            "BalanceOf": "Balance",
            "AuthorityOf": "AccountId",
            "PaymentId": "[u8;16]",
            "Payment": {
              "id": "PaymentId",
              "account_id": "AccountId",
              "success_url": "Vec<u8>",
              "failure_url": "Vec<u8>",
              "paid": "bool",
              "pay_to": "AccountId"
            },
            "PeerId": "(Vec<u8>)",
            "Amendment": {
              "statement": "Vec<u8>",
              "owners": "Vec<AccountId>"
            },
            "BlockNumber": "u32",
            "VestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "period_count": "BlockNumber",
              "per_period": "Compact<Balance>"
            },
            "VestingScheduleOf": "VestingSchedule"
          }
        }
      ]
    },
    "crust": {
      "rpc": {},
      "types": [
        {
          "minmax": [
            null,
            null
          ],
          "types": {
            "AccountInfo": "AccountInfoWithProviders",
            "Address": "AccountId",
            "AddressInfo": "Vec<u8>",
            "LookupSource": "AccountId",
            "EraBenefits": {
              "total_fee_reduction_quota": "Compact<Balance>",
              "total_market_active_funds": "Compact<Balance>",
              "used_fee_reduction_quota": "Compact<Balance>",
              "active_era": "Compact<EraIndex>"
            },
            "FundsType": {
              "_enum": [
                "SWORK",
                "MARKET"
              ]
            },
            "FundsUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "MarketBenefit": {
              "total_funds": "Compact<Balance>",
              "active_funds": "Compact<Balance>",
              "used_fee_reduction_quota": "Compact<Balance>",
              "file_reward": "Compact<Balance>",
              "refreshed_at": "Compact<EraIndex>",
              "unlocking_funds": "Vec<FundsUnlockChunk<Balance>>"
            },
            "SworkBenefit": {
              "total_funds": "Compact<Balance>",
              "active_funds": "Compact<Balance>",
              "total_fee_reduction_count": "u32",
              "used_fee_reduction_count": "u32",
              "refreshed_at": "Compact<EraIndex>",
              "unlocking_funds": "Vec<FundsUnlockChunk<Balance>>"
            },
            "BridgeChainId": "u8",
            "ChainId": "u8",
            "ResourceId": "H256",
            "DepositNonce": "u64",
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "ProposalStatus",
              "expiry": "BlockNumber"
            },
            "Erc721Token": {
              "id": "TokenId",
              "metadata": "Vec<u8>"
            },
            "TokenId": "U256",
            "ETHAddress": "Vec<u8>",
            "EthereumTxHash": "H256",
            "Lock": {
              "total": "Compact<Balance>",
              "last_unlock_at": "BlockNumber",
              "lock_type": "LockType"
            },
            "LockType": {
              "delay": "BlockNumber",
              "lock_period": "u32"
            },
            "FileInfo": {
              "file_size": "u64",
              "spower": "u64",
              "expired_at": "BlockNumber",
              "calculated_at": "BlockNumber",
              "amount": "Compact<Balance>",
              "prepaid": "Compact<Balance>",
              "reported_replica_count": "u32",
              "replicas": "Vec<Replica<AccountId>>"
            },
            "FileInfoV2": {
              "file_size": "u64",
              "spower": "u64",
              "expired_at": "BlockNumber",
              "calculated_at": "BlockNumber",
              "amount": "Compact<Balance>",
              "prepaid": "Compact<Balance>",
              "reported_replica_count": "u32",
              "remaining_paid_count": "u32",
              "replicas": "BTreeMap<AccountId, Replica<AccountId>>"
            },
            "Replica": {
              "who": "AccountId",
              "valid_at": "BlockNumber",
              "anchor": "SworkerAnchor",
              "is_reported": "bool",
              "created_at": "Option<BlockNumber>"
            },
            "Guarantee": {
              "targets": "Vec<IndividualExposure<AccountId, Balance>>",
              "total": "Compact<Balance>",
              "submitted_in": "EraIndex",
              "suppressed": "bool"
            },
            "ValidatorPrefs": {
              "guarantee_fee": "Compact<Perbill>"
            },
            "Group": {
              "members": "BTreeSet<AccountId>",
              "allowlist": "BTreeSet<AccountId>"
            },
            "IASSig": "Vec<u8>",
            "Identity": {
              "anchor": "SworkerAnchor",
              "punishment_deadline": "u64",
              "group": "Option<AccountId>"
            },
            "ISVBody": "Vec<u8>",
            "MerkleRoot": "Vec<u8>",
            "ReportSlot": "u64",
            "PKInfo": {
              "code": "SworkerCode",
              "anchor": "Option<SworkerAnchor>"
            },
            "SworkerAnchor": "Vec<u8>",
            "SworkerCert": "Vec<u8>",
            "SworkerCode": "Vec<u8>",
            "SworkerPubKey": "Vec<u8>",
            "SworkerSignature": "Vec<u8>",
            "WorkReport": {
              "report_slot": "u64",
              "spower": "u64",
              "free": "u64",
              "reported_files_size": "u64",
              "reported_srd_root": "MerkleRoot",
              "reported_files_root": "MerkleRoot"
            }
          }
        }
      ],
      "alias": {}
    },
    "crust-parachain": {
      "rpc": {},
      "types": [
        {
          "minmax": [
            null,
            null
          ],
          "types": {
            "AccountInfo": "AccountInfoWithProviders",
            "Address": "AccountId",
            "AddressInfo": "Vec<u8>",
            "LookupSource": "AccountId",
            "EraBenefits": {
              "total_fee_reduction_quota": "Compact<Balance>",
              "total_market_active_funds": "Compact<Balance>",
              "used_fee_reduction_quota": "Compact<Balance>",
              "active_era": "Compact<EraIndex>"
            },
            "FundsType": {
              "_enum": [
                "SWORK",
                "MARKET"
              ]
            },
            "FundsUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "MarketBenefit": {
              "total_funds": "Compact<Balance>",
              "active_funds": "Compact<Balance>",
              "used_fee_reduction_quota": "Compact<Balance>",
              "file_reward": "Compact<Balance>",
              "refreshed_at": "Compact<EraIndex>",
              "unlocking_funds": "Vec<FundsUnlockChunk<Balance>>"
            },
            "SworkBenefit": {
              "total_funds": "Compact<Balance>",
              "active_funds": "Compact<Balance>",
              "total_fee_reduction_count": "u32",
              "used_fee_reduction_count": "u32",
              "refreshed_at": "Compact<EraIndex>",
              "unlocking_funds": "Vec<FundsUnlockChunk<Balance>>"
            },
            "BridgeChainId": "u8",
            "ChainId": "u8",
            "ResourceId": "H256",
            "DepositNonce": "u64",
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "ProposalStatus",
              "expiry": "BlockNumber"
            },
            "Erc721Token": {
              "id": "TokenId",
              "metadata": "Vec<u8>"
            },
            "TokenId": "U256",
            "ETHAddress": "Vec<u8>",
            "EthereumTxHash": "H256",
            "Lock": {
              "total": "Compact<Balance>",
              "last_unlock_at": "BlockNumber",
              "lock_type": "LockType"
            },
            "LockType": {
              "delay": "BlockNumber",
              "lock_period": "u32"
            },
            "FileInfo": {
              "file_size": "u64",
              "spower": "u64",
              "expired_at": "BlockNumber",
              "calculated_at": "BlockNumber",
              "amount": "Compact<Balance>",
              "prepaid": "Compact<Balance>",
              "reported_replica_count": "u32",
              "replicas": "Vec<Replica<AccountId>>"
            },
            "FileInfoV2": {
              "file_size": "u64",
              "spower": "u64",
              "expired_at": "BlockNumber",
              "calculated_at": "BlockNumber",
              "amount": "Compact<Balance>",
              "prepaid": "Compact<Balance>",
              "reported_replica_count": "u32",
              "remaining_paid_count": "u32",
              "replicas": "BTreeMap<AccountId, Replica<AccountId>>"
            },
            "Replica": {
              "who": "AccountId",
              "valid_at": "BlockNumber",
              "anchor": "SworkerAnchor",
              "is_reported": "bool",
              "created_at": "Option<BlockNumber>"
            },
            "Guarantee": {
              "targets": "Vec<IndividualExposure<AccountId, Balance>>",
              "total": "Compact<Balance>",
              "submitted_in": "EraIndex",
              "suppressed": "bool"
            },
            "ValidatorPrefs": {
              "guarantee_fee": "Compact<Perbill>"
            },
            "Group": {
              "members": "BTreeSet<AccountId>",
              "allowlist": "BTreeSet<AccountId>"
            },
            "IASSig": "Vec<u8>",
            "Identity": {
              "anchor": "SworkerAnchor",
              "punishment_deadline": "u64",
              "group": "Option<AccountId>"
            },
            "ISVBody": "Vec<u8>",
            "MerkleRoot": "Vec<u8>",
            "ReportSlot": "u64",
            "PKInfo": {
              "code": "SworkerCode",
              "anchor": "Option<SworkerAnchor>"
            },
            "SworkerAnchor": "Vec<u8>",
            "SworkerCert": "Vec<u8>",
            "SworkerCode": "Vec<u8>",
            "SworkerPubKey": "Vec<u8>",
            "SworkerSignature": "Vec<u8>",
            "WorkReport": {
              "report_slot": "u64",
              "spower": "u64",
              "free": "u64",
              "reported_files_size": "u64",
              "reported_srd_root": "MerkleRoot",
              "reported_files_root": "MerkleRoot"
            }
          }
        }
      ],
      "alias": {}
    },
    "cumulus-test-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "datahighway": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountInfo": "AccountInfoWithDualRefCount",
            "Date": "i64",
            "Keys": "SessionKeys2",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "RoamingOperator": "[u8; 16]",
            "RoamingOperatorIndex": "u64",
            "RoamingNetwork": "[u8; 16]",
            "RoamingNetworkIndex": "u64",
            "RoamingOrganization": "[u8; 16]",
            "RoamingOrganizationIndex": "u64",
            "RoamingNetworkServer": "[u8; 16]",
            "RoamingNetworkServerIndex": "u64",
            "RoamingDevice": "[u8; 16]",
            "RoamingDeviceIndex": "u64",
            "RoamingRoutingProfile": "[u8; 16]",
            "RoamingRoutingProfileIndex": "u64",
            "RoamingRoutingProfileAppServer": "Text",
            "RoamingServiceProfile": "[u8; 16]",
            "RoamingServiceProfileIndex": "u64",
            "RoamingServiceProfileUplinkRate": "u32",
            "RoamingServiceProfileDownlinkRate": "u32",
            "RoamingAccountingPolicy": "[u8; 16]",
            "RoamingAccountingPolicyIndex": "u64",
            "RoamingAccountingPolicyType": "Text",
            "RoamingAccountingPolicyUplinkFeeFactor": "u32",
            "RoamingAccountingPolicyDownlinkFeeFactor": "u32",
            "RoamingAccountingPolicySetting": {
              "policy_type": "Text",
              "subscription_fee": "Balance",
              "uplink_fee_factor": "u32",
              "downlink_fee_factor": "u32"
            },
            "RoamingAgreementPolicy": "[u8; 16]",
            "RoamingAgreementPolicyIndex": "u64",
            "RoamingAgreementPolicyActivationType": "Text",
            "RoamingAgreementPolicySetting": {
              "policy_activation_type": "Text",
              "policy_expiry_block": "Moment"
            },
            "RoamingNetworkProfile": "[u8; 16]",
            "RoamingNetworkProfileIndex": "u64",
            "RoamingDeviceProfile": "[u8; 16]",
            "RoamingDeviceProfileIndex": "u64",
            "RoamingDeviceProfileDevAddr": "Text",
            "RoamingDeviceProfileDevEUI": "Text",
            "RoamingDeviceProfileJoinEUI": "Text",
            "RoamingDeviceProfileVendorID": "Text",
            "RoamingDeviceProfileSetting": {
              "device_profile_devaddr": "Text",
              "device_profile_deveui": "Text",
              "device_profile_joineui": "Text",
              "device_profile_vendorid": "Text"
            },
            "RoamingSession": "[u8; 16]",
            "RoamingSessionIndex": "u64",
            "RoamingSessionJoinRequest": {
              "session_network_server_id": "Moment",
              "session_join_requested_at_block": "Moment"
            },
            "RoamingSessionJoinAccept": {
              "session_join_request_accept_expiry": "Moment",
              "session_join_request_accept_accepted_at_block": "Moment"
            },
            "RoamingBillingPolicy": "[u8; 16]",
            "RoamingBillingPolicyIndex": "u64",
            "RoamingBillingPolicySetting": {
              "policy_next_billing_at_block": "Moment",
              "policy_frequency_in_blocks": "Moment"
            },
            "RoamingChargingPolicy": "[u8; 16]",
            "RoamingChargingPolicyIndex": "u64",
            "RoamingChargingPolicySetting": {
              "policy_next_charging_at_block": "Moment",
              "policy_delay_after_billing_in_blocks": "u64"
            },
            "RoamingPacketBundle": "[u8; 16]",
            "RoamingPacketBundleIndex": "u64",
            "RoamingPacketBundleReceivedAtHome": "bool",
            "RoamingPacketBundleReceivedPacketsCount": "u64",
            "RoamingPacketBundleReceivedPacketsOkCount": "u64",
            "RoamingPacketBundleExternalDataStorageHash": "Hash",
            "RoamingPacketBundleReceiver": {
              "packet_bundle_received_at_home": "bool",
              "packet_bundle_received_packets_count": "u64",
              "packet_bundle_received_packets_ok_count": "u64",
              "packet_bundle_received_started_at_block": "Moment",
              "packet_bundle_received_ended_at_block": "Moment",
              "packet_bundle_external_data_storage_hash": "Hash"
            },
            "MiningRatesToken": "[u8; 16]",
            "MiningRatesTokenIndex": "u64",
            "MiningRatesTokenTokenDOT": "u32",
            "MiningRatesTokenTokenMXC": "u32",
            "MiningRatesTokenTokenIOTA": "u32",
            "MiningRatesTokenMaxToken": "u32",
            "MiningRatesTokenMaxLoyalty": "u32",
            "MiningRatesTokenSetting": {
              "token_token_mxc": "u32",
              "token_token_iota": "u32",
              "token_token_dot": "u32",
              "token_max_token": "u32",
              "token_max_loyalty": "u32"
            },
            "MiningRatesHardware": "[u8; 16]",
            "MiningRatesHardwareIndex": "u64",
            "MiningRatesHardwareSecure": "u32",
            "MiningRatesHardwareInsecure": "u32",
            "MiningRatesHardwareMaxHardware": "u32",
            "MiningRatesHardwareCategory1MaxTokenBonusPerGateway": "u32",
            "MiningRatesHardwareCategory2MaxTokenBonusPerGateway": "u32",
            "MiningRatesHardwareCategory3MaxTokenBonusPerGateway": "u32",
            "MiningRatesHardwareSetting": {
              "hardware_hardware_secure": "u32",
              "hardware_hardware_insecure": "u32",
              "hardware_max_hardware": "u32",
              "hardware_category_1_max_token_bonus_per_gateway": "u32",
              "hardware_category_2_max_token_bonus_per_gateway": "u32",
              "hardware_category_3_max_token_bonus_per_gateway": "u32"
            },
            "MiningSettingToken": "[u8; 16]",
            "MiningSettingTokenIndex": "u64",
            "MiningSettingTokenType": "Text",
            "MiningSettingTokenLockAmount": "u64",
            "MiningSettingTokenSetting": {
              "token_type": "Text",
              "token_lock_amount": "u64",
              "token_lock_start_block": "Moment",
              "token_lock_interval_blocks": "Moment"
            },
            "MiningSettingTokenRequirementsSetting": {
              "token_type": "Text",
              "token_lock_min_amount": "u64",
              "token_lock_min_blocks": "u32"
            },
            "MiningSettingHardware": "[u8; 16]",
            "MiningSettingHardwareIndex": "u64",
            "MiningSettingHardwareSecure": "bool",
            "MiningSettingHardwareType": "Text",
            "MiningSettingHardwareID": "u64",
            "MiningSettingHardwareDevEUI": "u64",
            "MiningSettingHardwareSetting": {
              "hardware_secure": "bool",
              "hardware_type": "Text",
              "hardware_id": "u64",
              "hardware_dev_eui": "u64",
              "hardware_lock_start_block": "Moment",
              "hardware_lock_interval_blocks": "Moment"
            },
            "MiningSamplingToken": "[u8; 16]",
            "MiningSamplingTokenIndex": "u64",
            "MiningSamplingTokenSampleLockedAmount": "u64",
            "MiningSamplingTokenSetting": {
              "token_sample_block": "Moment",
              "token_sample_locked_amount": "u64"
            },
            "MiningSamplingHardware": "[u8; 16]",
            "MiningSamplingHardwareIndex": "u64",
            "MiningSamplingHardwareSampleHardwareOnline": "u64",
            "MiningSamplingHardwareSetting": {
              "hardware_sample_block": "Moment",
              "hardware_sample_hardware_online": "bool"
            },
            "MiningEligibilityToken": "[u8; 16]",
            "MiningEligibilityTokenIndex": "u64",
            "MiningEligibilityTokenCalculatedEligibility": "u64",
            "MiningEligibilityTokenLockedPercentage": "u32",
            "MiningEligibilityTokenAuditorAccountID": "u64",
            "MiningEligibilityTokenResult": {
              "token_calculated_eligibility": "u64",
              "token_token_locked_percentage": "u32",
              "token_date_audited": "Moment",
              "token_auditor_account_id": "u64"
            },
            "MiningEligibilityHardware": "[u8; 16]",
            "MiningEligibilityHardwareIndex": "u64",
            "MiningEligibilityHardwareCalculatedEligibility": "u64",
            "MiningEligibilityHardwareUptimePercentage": "u32",
            "MiningEligibilityHardwareAuditorAccountID": "u64",
            "MiningEligibilityHardwareResult": {
              "hardware_calculated_eligibility": "u64",
              "hardware_uptime_percentage": "u32",
              "hardware_block_audited": "Moment",
              "hardware_auditor_account_id": "u64"
            },
            "MiningEligibilityProxy": "[u8; 16]",
            "MiningEligibilityProxyIndex": "u64",
            "MiningEligibilityProxyRewardRequest": {
              "proxy_claim_requestor_account_id": "AccountId",
              "proxy_claim_total_reward_amount": "Balance",
              "proxy_claim_timestamp_redeemed": "Moment"
            },
            "MiningEligibilityProxyClaimRewardeeData": {
              "proxy_claim_rewardee_account_id": "AccountId",
              "proxy_claim_reward_amount": "Balance",
              "proxy_claim_start_date": "Date",
              "proxy_claim_end_date": "Date"
            },
            "RewardeeData": {
              "proxy_claim_rewardee_account_id": "AccountId",
              "proxy_claim_reward_amount": "Balance",
              "proxy_claim_start_date": "Date",
              "proxy_claim_end_date": "Date"
            },
            "RewardRequestorData": {
              "mining_eligibility_proxy_id": "MiningEligibilityProxyIndex",
              "total_amt": "Balance",
              "rewardee_count": "u64",
              "member_kind": "u32",
              "requested_date": "Moment"
            },
            "RequestorData": {
              "mining_eligibility_proxy_id": "MiningEligibilityProxyIndex",
              "total_amt": "Balance",
              "rewardee_count": "u64",
              "member_kind": "u32",
              "requested_date": "Moment"
            },
            "RewardTransferData": {
              "mining_eligibility_proxy_id": "MiningEligibilityProxyIndex",
              "is_sent": "bool",
              "total_amt": "Balance",
              "rewardee_count": "u64",
              "member_kind": "u32",
              "requested_date": "Moment"
            },
            "TransferData": {
              "mining_eligibility_proxy_id": "MiningEligibilityProxyIndex",
              "is_sent": "bool",
              "total_amt": "Balance",
              "rewardee_count": "u64",
              "member_kind": "u32",
              "requested_date": "Moment"
            },
            "RewardDailyData": {
              "mining_eligibility_proxy_id": "MiningEligibilityProxyIndex",
              "total_amt": "Balance",
              "proxy_claim_requestor_account_id": "AccountId",
              "member_kind": "u32",
              "rewarded_date": "Date"
            },
            "DailyData": {
              "mining_eligibility_proxy_id": "MiningEligibilityProxyIndex",
              "total_amt": "Balance",
              "proxy_claim_requestor_account_id": "AccountId",
              "member_kind": "u32",
              "rewarded_date": "Date"
            },
            "MiningClaimsToken": "[u8; 16]",
            "MiningClaimsTokenIndex": "u64",
            "MiningClaimsTokenClaimAmount": "u64",
            "MiningClaimsTokenClaimResult": {
              "token_claim_amount": "u64",
              "token_claim_block_redeemed": "u64"
            },
            "MiningClaimsHardware": "[u8; 16]",
            "MiningClaimsHardwareIndex": "u64",
            "MiningClaimsHardwareClaimAmount": "u64",
            "MiningClaimsHardwareClaimResult": {
              "hardware_claim_amount": "u64",
              "hardware_claim_block_redeemed": "u64"
            },
            "MiningExecutionToken": "[u8; 16]",
            "MiningExecutionTokenIndex": "u64",
            "MiningExecutionTokenExecutorAccountID": "u64",
            "MiningExecutionTokenExecutionResult": {
              "token_execution_exector_account_id": "u64",
              "token_execution_started_block": "Moment",
              "token_execution_ended_block": "Moment"
            },
            "ExchangeRateIndex": "u64",
            "ExchangeRateSetting": {
              "hbtc": "u64",
              "dot": "u64",
              "iota": "u64",
              "fil": "u64",
              "decimals_after_point": "u32"
            },
            "HBTCRate": "u64",
            "DOTRate": "u64",
            "IOTARate": "u64",
            "FILRate": "u64",
            "DecimalsAfterPoint": "u32"
          }
        }
      ]
    },
    "datahighway-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Keys": "SessionKeys2",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "RoamingOperator": "[u8; 16]",
            "RoamingOperatorIndex": "u64",
            "RoamingNetwork": "[u8; 16]",
            "RoamingNetworkIndex": "u64",
            "RoamingOrganization": "[u8; 16]",
            "RoamingOrganizationIndex": "u64",
            "RoamingNetworkServer": "[u8; 16]",
            "RoamingNetworkServerIndex": "u64",
            "RoamingDevice": "[u8; 16]",
            "RoamingDeviceIndex": "u64",
            "RoamingRoutingProfile": "[u8; 16]",
            "RoamingRoutingProfileIndex": "u64",
            "RoamingRoutingProfileAppServer": "Text",
            "RoamingServiceProfile": "[u8; 16]",
            "RoamingServiceProfileIndex": "u64",
            "RoamingServiceProfileUplinkRate": "u32",
            "RoamingServiceProfileDownlinkRate": "u32",
            "RoamingAccountingPolicy": "[u8; 16]",
            "RoamingAccountingPolicyIndex": "u64",
            "RoamingAccountingPolicyType": "Text",
            "RoamingAccountingPolicyUplinkFeeFactor": "u32",
            "RoamingAccountingPolicyDownlinkFeeFactor": "u32",
            "RoamingAccountingPolicyConfig": {
              "policy_type": "Text",
              "subscription_fee": "Balance",
              "uplink_fee_factor": "u32",
              "downlink_fee_factor": "u32"
            },
            "RoamingAgreementPolicy": "[u8; 16]",
            "RoamingAgreementPolicyIndex": "u64",
            "RoamingAgreementPolicyActivationType": "Text",
            "RoamingAgreementPolicyConfig": {
              "policy_activation_type": "Text",
              "policy_expiry_block": "Moment"
            },
            "RoamingNetworkProfile": "[u8; 16]",
            "RoamingNetworkProfileIndex": "u64",
            "RoamingDeviceProfile": "[u8; 16]",
            "RoamingDeviceProfileIndex": "u64",
            "RoamingDeviceProfileDevAddr": "Text",
            "RoamingDeviceProfileDevEUI": "Text",
            "RoamingDeviceProfileJoinEUI": "Text",
            "RoamingDeviceProfileVendorID": "Text",
            "RoamingDeviceProfileConfig": {
              "device_profile_devaddr": "Text",
              "device_profile_deveui": "Text",
              "device_profile_joineui": "Text",
              "device_profile_vendorid": "Text"
            },
            "RoamingSession": "[u8; 16]",
            "RoamingSessionIndex": "u64",
            "RoamingSessionJoinRequest": {
              "session_network_server_id": "Moment",
              "session_join_requested_at_block": "Moment"
            },
            "RoamingSessionJoinAccept": {
              "session_join_request_accept_expiry": "Moment",
              "session_join_request_accept_accepted_at_block": "Moment"
            },
            "RoamingBillingPolicy": "[u8; 16]",
            "RoamingBillingPolicyIndex": "u64",
            "RoamingBillingPolicyConfig": {
              "policy_next_billing_at_block": "Moment",
              "policy_frequency_in_blocks": "Moment"
            },
            "RoamingChargingPolicy": "[u8; 16]",
            "RoamingChargingPolicyIndex": "u64",
            "RoamingChargingPolicyConfig": {
              "policy_next_charging_at_block": "Moment",
              "policy_delay_after_billing_in_blocks": "u64"
            },
            "RoamingPacketBundle": "[u8; 16]",
            "RoamingPacketBundleIndex": "u64",
            "RoamingPacketBundleReceivedAtHome": "bool",
            "RoamingPacketBundleReceivedPacketsCount": "u64",
            "RoamingPacketBundleReceivedPacketsOkCount": "u64",
            "RoamingPacketBundleExternalDataStorageHash": "Hash",
            "RoamingPacketBundleReceiver": {
              "packet_bundle_received_at_home": "bool",
              "packet_bundle_received_packets_count": "u64",
              "packet_bundle_received_packets_ok_count": "u64",
              "packet_bundle_received_started_at_block": "Moment",
              "packet_bundle_received_ended_at_block": "Moment",
              "packet_bundle_external_data_storage_hash": "Hash"
            },
            "MiningRatesToken": "[u8; 16]",
            "MiningRatesTokenIndex": "u64",
            "MiningRatesTokenTokenDOT": "u32",
            "MiningRatesTokenTokenMXC": "u32",
            "MiningRatesTokenTokenIOTA": "u32",
            "MiningRatesTokenMaxToken": "u32",
            "MiningRatesTokenMaxLoyalty": "u32",
            "MiningRatesTokenConfig": {
              "token_token_mxc": "u32",
              "token_token_iota": "u32",
              "token_token_dot": "u32",
              "token_max_token": "u32",
              "token_max_loyalty": "u32"
            },
            "MiningRatesHardware": "[u8; 16]",
            "MiningRatesHardwareIndex": "u64",
            "MiningRatesHardwareSecure": "u32",
            "MiningRatesHardwareInsecure": "u32",
            "MiningRatesHardwareMaxHardware": "u32",
            "MiningRatesHardwareCategory1MaxTokenBonusPerGateway": "u32",
            "MiningRatesHardwareCategory2MaxTokenBonusPerGateway": "u32",
            "MiningRatesHardwareCategory3MaxTokenBonusPerGateway": "u32",
            "MiningRatesHardwareConfig": {
              "hardware_hardware_secure": "u32",
              "hardware_hardware_insecure": "u32",
              "hardware_max_hardware": "u32",
              "hardware_category_1_max_token_bonus_per_gateway": "u32",
              "hardware_category_2_max_token_bonus_per_gateway": "u32",
              "hardware_category_3_max_token_bonus_per_gateway": "u32"
            },
            "MiningConfigToken": "[u8; 16]",
            "MiningConfigTokenIndex": "u64",
            "MiningConfigTokenType": "Text",
            "MiningConfigTokenLockAmount": "u64",
            "MiningConfigTokenConfig": {
              "token_type": "Text",
              "token_lock_amount": "u64",
              "token_lock_start_block": "Moment",
              "token_lock_interval_blocks": "Moment"
            },
            "MiningConfigTokenRequirementsConfig": {
              "token_type": "Text",
              "token_lock_min_amount": "u64",
              "token_lock_min_blocks": "u32"
            },
            "MiningConfigHardware": "[u8; 16]",
            "MiningConfigHardwareIndex": "u64",
            "MiningConfigHardwareSecure": "bool",
            "MiningConfigHardwareType": "Text",
            "MiningConfigHardwareID": "u64",
            "MiningConfigHardwareDevEUI": "u64",
            "MiningConfigHardwareConfig": {
              "hardware_secure": "bool",
              "hardware_type": "Text",
              "hardware_id": "u64",
              "hardware_dev_eui": "u64",
              "hardware_lock_start_block": "Moment",
              "hardware_lock_interval_blocks": "Moment"
            },
            "MiningSamplingToken": "[u8; 16]",
            "MiningSamplingTokenIndex": "u64",
            "MiningSamplingTokenSampleLockedAmount": "u64",
            "MiningSamplingTokenConfig": {
              "token_sample_block": "Moment",
              "token_sample_locked_amount": "u64"
            },
            "MiningSamplingHardware": "[u8; 16]",
            "MiningSamplingHardwareIndex": "u64",
            "MiningSamplingHardwareSampleHardwareOnline": "u64",
            "MiningSamplingHardwareConfig": {
              "hardware_sample_block": "Moment",
              "hardware_sample_hardware_online": "bool"
            },
            "MiningEligibilityToken": "[u8; 16]",
            "MiningEligibilityTokenIndex": "u64",
            "MiningEligibilityTokenCalculatedEligibility": "u64",
            "MiningEligibilityTokenLockedPercentage": "u32",
            "MiningEligibilityTokenAuditorAccountID": "u64",
            "MiningEligibilityTokenResult": {
              "token_calculated_eligibility": "u64",
              "token_token_locked_percentage": "u32",
              "token_date_audited": "Moment",
              "token_auditor_account_id": "u64"
            },
            "MiningEligibilityHardware": "[u8; 16]",
            "MiningEligibilityHardwareIndex": "u64",
            "MiningEligibilityHardwareCalculatedEligibility": "u64",
            "MiningEligibilityHardwareUptimePercentage": "u32",
            "MiningEligibilityHardwareAuditorAccountID": "u64",
            "MiningEligibilityHardwareResult": {
              "hardware_calculated_eligibility": "u64",
              "hardware_uptime_percentage": "u32",
              "hardware_block_audited": "Moment",
              "hardware_auditor_account_id": "u64"
            },
            "MiningClaimsToken": "[u8; 16]",
            "MiningClaimsTokenIndex": "u64",
            "MiningClaimsTokenClaimAmount": "u64",
            "MiningClaimsTokenClaimResult": {
              "token_claim_amount": "u64",
              "token_claim_block_redeemed": "u64"
            },
            "MiningClaimsHardware": "[u8; 16]",
            "MiningClaimsHardwareIndex": "u64",
            "MiningClaimsHardwareClaimAmount": "u64",
            "MiningClaimsHardwareClaimResult": {
              "hardware_claim_amount": "u64",
              "hardware_claim_block_redeemed": "u64"
            },
            "MiningExecutionToken": "[u8; 16]",
            "MiningExecutionTokenIndex": "u64",
            "MiningExecutionTokenExecutorAccountID": "u64",
            "MiningExecutionTokenExecutionResult": {
              "token_execution_exector_account_id": "u64",
              "token_execution_started_block": "Moment",
              "token_execution_ended_block": "Moment"
            },
            "ExchangeRateIndex": "u64",
            "ExchangeRateConfig": {
              "hbtc": "u64",
              "dot": "u64",
              "iota": "u64",
              "fil": "u64",
              "decimals_after_point": "u32"
            },
            "HBTCRate": "u64",
            "DOTRate": "u64",
            "IOTARate": "u64",
            "FILRate": "u64",
            "DecimalsAfterPoint": "u32"
          }
        }
      ]
    },
    "dawn": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountIdOf": "AccountId",
            "Address": "MultiAddress",
            "AirDropCurrencyId": {
              "_enum": [
                "ICE",
                "EAVE"
              ]
            },
            "Amount": "i128",
            "AmountOf": "Amount",
            "AsOriginId": "AuthoritysOriginId",
            "AssetId": "u64",
            "AssetIdOf": "AssetId",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "EaveTreasury",
                "CdpTreasury",
                "ElpTreasury",
                "DSWF"
              ]
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BondingLedger": {
              "total": "Compact<Balance>",
              "active": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "CID": "Vec<u8>",
            "CallOf": "Call",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "ChainId": {
              "_enum": {
                "RelayChain": "Null",
                "ParaChain": "ParaId"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties"
            },
            "ClassId": "u32",
            "ClassIdOf": "ClassId",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(TokenSymbol, TokenSymbol)",
                "ERC20": "EvmAddress"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "DataProviderId": {
              "_enum": [
                "Aggregated",
                "Eave",
                "Band"
              ]
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "DestAddress": "Vec<u8>",
            "DispatchId": "u32",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ElpUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>",
              "developerDeposit": "Option<Balance>"
            },
            "EvmAddress": "H160",
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "ExchangeRate": "FixedU128",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "Keys": "SessionKeys2",
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "LiquidityPool": {
              "currency_ids": "Vec<AssetIdOf>",
              "lp_token_id": "AssetId",
              "pool_config_id": "u32",
              "pool_reserves": "Vec<Balance>"
            },
            "LiquidityPoolConfig_": "PoolConfig",
            "LiquidityPool_": "LiquidityPool",
            "LookupSource": "MultiAddress",
            "NomineeId": "AccountId",
            "NFTBalance": "u128",
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "OracleKey": "CurrencyId",
            "OracleValue": "Price",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "PalletBalanceOf": "Balance",
            "PalletsOrigin": {
              "_enum": {
                "System": "SystemOrigin",
                "Timestamp": "Null",
                "RandomnessCollectiveFlip": "Null",
                "Balances": "Null",
                "Accounts": "Null",
                "Currencies": "Null",
                "Tokens": "Null",
                "Vesting": "Null",
                "EaveTreasury": "Null",
                "Utility": "Null",
                "Multisig": "Null",
                "Recovery": "Null",
                "Proxy": "Null",
                "Scheduler": "Null",
                "Indices": "Null",
                "GraduallyUpdate": "Null",
                "Authorship": "Null",
                "Babe": "Null",
                "Grandpa": "Null",
                "Staking": "Null",
                "Session": "Null",
                "Historical": "Null",
                "GeneralCouncil": "CollectiveOrigin",
                "GeneralCouncilMembership": "Null",
                "EYECouncil": "CollectiveOrigin",
                "EYECouncilMembership": "Null",
                "ElpCouncil": "CollectiveOrigin",
                "ElpCouncilMembership": "Null",
                "TechnicalCommittee": "CollectiveOrigin",
                "TechnicalCommitteeMembership": "Null",
                "Authority": "DelayedOrigin",
                "ElectionsPhragmen": "Null",
                "EaveOracle": "Null",
                "BandOracle": "Null",
                "OperatorMembershipEave": "Null",
                "OperatorMembershipBand": "Null",
                "Auction": "Null",
                "Rewards": "Null",
                "OrmlNFT": "Null",
                "Prices": "Null",
                "Dex": "Null",
                "AuctionManager": "Null",
                "Loans": "Null",
                "EYE": "Null",
                "CdpTreasury": "Null",
                "CdpEngine": "Null",
                "EmergencyShutdown": "Null",
                "Elp": "Null",
                "NomineesElection": "Null",
                "StakingPool": "Null",
                "PolkadotBridge": "Null",
                "Incentives": "Null",
                "AirDrop": "Null",
                "NFT": "Null",
                "RenVmBridge": "Null",
                "Contracts": "Null",
                "EVM": "Null",
                "Sudo": "Null",
                "TransactionPayment": "Null"
              }
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Elp": "Null"
              }
            },
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "Price": "FixedU128",
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2
              }
            },
            "PublicKey": "[u8; 20]",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "RedeemStrategy": {
              "_enum": {
                "Immediately": "Null",
                "Target": "EraIndex",
                "WaitForUnbonding": "Null"
              }
            },
            "RelaychainAccountId": "AccountId",
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "stabilityFee": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "RpcDataProviderId": "Text",
            "ScheduleTaskIndex": "u32",
            "Share": "u128",
            "StorageKeyBytes": "Vec<u8>",
            "StorageValue": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "TokenBalanceOf": "Balance",
            "TokenData": {
              "deposit": "Balance"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "TokenInfo": {
              "name": "Text",
              "symbol": "Text",
              "decimals": "u8",
              "owner": "AccountId"
            },
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "TokenSymbol": {
              "_enum": {
                "EAVE": 0,
                "EUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "XBTC": 4,
                "RENBTC": 5,
                "INTERBTC": 6,
                "PLM": 7,
                "PHA": 8,
                "HDT": 9,
                "ICE": 128,
                "IUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "SDN": 135,
                "KILT": 138
              }
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "TradingPairStatus": {
              "_enum": {
                "NotEnabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "XCurrencyId": {
              "chainId": "ChainId",
              "currencyId": "Vec<u8>"
            }
          }
        }
      ]
    },
    "dev-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "PairId": "u32",
            "Pair": {
              "token_0": "AssetId",
              "token_1": "AssetId",
              "account": "AccountId",
              "total_liquidity": "TokenBalance",
              "lp_asset_id": "AssetId"
            },
            "PairInfo": {
              "token_0": "AssetId",
              "token_1": "AssetId",
              "account": "AccountId",
              "total_liquidity": "TokenBalance",
              "holding_liquidity": "TokenBalance",
              "reserve_0": "TokenBalance",
              "reserve_1": "TokenBalance",
              "lp_asset_id": "AssetId"
            },
            "AssetId": {
              "chain_id": "u32",
              "module_index": "u8",
              "asset_index": "u32"
            },
            "TokenId": "u32",
            "AssetProperty": {
              "_enum": {
                "FOREIGN": null,
                "LP": "LpProperty"
              }
            },
            "LpProperty": {
              "token_0": "AssetId",
              "token_1": "AssetId"
            },
            "TokenBalance": "u128"
          }
        }
      ]
    },
    "dock-pos-main-runtime": {
      "types": [
        {
          "minmax": [
            0,
            23
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "Keys": "SessionKeys2",
            "Did": "[u8;32]",
            "Bytes32": {
              "value": "[u8;32]"
            },
            "Bytes33": {
              "value": "[u8;33]"
            },
            "Bytes64": {
              "value": "[u8;64]"
            },
            "Bytes65": {
              "value": "[u8;65]"
            },
            "PublicKey": {
              "_enum": {
                "Sr25519": "Bytes32",
                "Ed25519": "Bytes32",
                "Secp256k1": "Bytes33"
              }
            },
            "DidSignature": {
              "_enum": {
                "Sr25519": "Bytes64",
                "Ed25519": "Bytes64",
                "Secp256k1": "Bytes65"
              }
            },
            "KeyDetail": {
              "controller": "Did",
              "public_key": "PublicKey"
            },
            "KeyUpdate": {
              "did": "Did",
              "public_key": "PublicKey",
              "controller": "Option<Did>",
              "last_modified_in_block": "BlockNumber"
            },
            "DidRemoval": {
              "did": "Did",
              "last_modified_in_block": "BlockNumber"
            },
            "RegistryId": "[u8;32]",
            "RevokeId": "[u8;32]",
            "Registry": {
              "policy": "Policy",
              "add_only": "bool"
            },
            "Revoke": {
              "registry_id": "RegistryId",
              "revoke_ids": "BTreeSet<RevokeId>",
              "last_modified": "BlockNumber"
            },
            "UnRevoke": {
              "registry_id": "RegistryId",
              "revoke_ids": "BTreeSet<RevokeId>",
              "last_modified": "BlockNumber"
            },
            "RemoveRegistry": {
              "registry_id": "RegistryId",
              "last_modified": "BlockNumber"
            },
            "PAuth": "BTreeMap<Did, DidSignature>",
            "Policy": {
              "_enum": {
                "OneOf": "BTreeSet<Did>"
              }
            },
            "BlobId": "[u8;32]",
            "Blob": {
              "id": "BlobId",
              "blob": "Vec<u8>",
              "author": "Did"
            },
            "EpochNo": "u32",
            "EpochLen": "u32",
            "SlotNo": "u64",
            "Balance": "u64",
            "EpochDetail": {
              "validator_count": "u8",
              "starting_slot": "SlotNo",
              "expected_ending_slot": "SlotNo",
              "ending_slot": "Option<SlotNo>",
              "emission_for_validators": "Option<Balance>",
              "emission_for_treasury": "Option<Balance>"
            },
            "ValidatorStatsPerEpoch": {
              "block_count": "EpochLen",
              "locked_reward": "Option<Balance>",
              "unlocked_reward": "Option<Balance>"
            },
            "Payload": {
              "proposal": "Vec<u8>",
              "round_no": "u64"
            },
            "Membership": {
              "members": "BTreeSet<Did>",
              "vote_requirement": "u64"
            },
            "PMAuth": "BTreeMap<Did, DidSignature>",
            "Bonus": {
              "swap_bonuses": "Vec<(Balance, BlockNumber)>",
              "vesting_bonuses": "Vec<(Balance, Balance, BlockNumber)>"
            },
            "Attestation": {
              "priority": "Compact<u64>",
              "iri": "Option<Vec<u8>>"
            },
            "StateChange": {
              "_enum": {
                "KeyUpdate": "KeyUpdate",
                "DidRemoval": "DidRemoval",
                "Revoke": "Revoke",
                "UnRevoke": "UnRevoke",
                "RemoveRegistry": "RemoveRegistry",
                "Blob": "Blob",
                "MasterVote": "Payload",
                "Attestation": "(Did, Attestation)"
              }
            }
          }
        },
        {
          "minmax": [
            23
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "PerDispatchClassU32": {
              "normal": "u32",
              "operational": "u32",
              "mandatory": "u32"
            },
            "BlockLength": {
              "max": "PerDispatchClassU32"
            },
            "Keys": "SessionKeys2",
            "Did": "[u8;32]",
            "Bytes32": {
              "value": "[u8;32]"
            },
            "Bytes33": {
              "value": "[u8;33]"
            },
            "Bytes64": {
              "value": "[u8;64]"
            },
            "Bytes65": {
              "value": "[u8;65]"
            },
            "PublicKey": {
              "_enum": {
                "Sr25519": "Bytes32",
                "Ed25519": "Bytes32",
                "Secp256k1": "Bytes33"
              }
            },
            "DidSignature": {
              "_enum": {
                "Sr25519": "Bytes64",
                "Ed25519": "Bytes64",
                "Secp256k1": "Bytes65"
              }
            },
            "KeyDetail": {
              "controller": "Did",
              "public_key": "PublicKey"
            },
            "KeyUpdate": {
              "did": "Did",
              "public_key": "PublicKey",
              "controller": "Option<Did>",
              "last_modified_in_block": "BlockNumber"
            },
            "DidRemoval": {
              "did": "Did",
              "last_modified_in_block": "BlockNumber"
            },
            "RegistryId": "[u8;32]",
            "RevokeId": "[u8;32]",
            "Registry": {
              "policy": "Policy",
              "add_only": "bool"
            },
            "Revoke": {
              "registry_id": "RegistryId",
              "revoke_ids": "BTreeSet<RevokeId>",
              "last_modified": "BlockNumber"
            },
            "UnRevoke": {
              "registry_id": "RegistryId",
              "revoke_ids": "BTreeSet<RevokeId>",
              "last_modified": "BlockNumber"
            },
            "RemoveRegistry": {
              "registry_id": "RegistryId",
              "last_modified": "BlockNumber"
            },
            "PAuth": "BTreeMap<Did, DidSignature>",
            "Policy": {
              "_enum": {
                "OneOf": "BTreeSet<Did>"
              }
            },
            "BlobId": "[u8;32]",
            "Blob": {
              "id": "BlobId",
              "blob": "Vec<u8>",
              "author": "Did"
            },
            "EpochNo": "u32",
            "EpochLen": "u32",
            "SlotNo": "u64",
            "Balance": "u64",
            "EpochDetail": {
              "validator_count": "u8",
              "starting_slot": "SlotNo",
              "expected_ending_slot": "SlotNo",
              "ending_slot": "Option<SlotNo>",
              "emission_for_validators": "Option<Balance>",
              "emission_for_treasury": "Option<Balance>"
            },
            "ValidatorStatsPerEpoch": {
              "block_count": "EpochLen",
              "locked_reward": "Option<Balance>",
              "unlocked_reward": "Option<Balance>"
            },
            "Payload": {
              "proposal": "Vec<u8>",
              "round_no": "u64"
            },
            "Membership": {
              "members": "BTreeSet<Did>",
              "vote_requirement": "u64"
            },
            "PMAuth": "BTreeMap<Did, DidSignature>",
            "Bonus": {
              "swap_bonuses": "Vec<(Balance, BlockNumber)>",
              "vesting_bonuses": "Vec<(Balance, Balance, BlockNumber)>"
            },
            "Attestation": {
              "priority": "Compact<u64>",
              "iri": "Option<Vec<u8>>"
            },
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "Transaction": {
              "nonce": "U256",
              "action": "String",
              "gas_price": "u64",
              "gas_limit": "u64",
              "value": "U256",
              "input": "Vec<u8>",
              "signature": "Signature"
            },
            "Signature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "ParamType": {
              "_enum": {
                "Address": null,
                "Int": "u16",
                "Uint": "u16"
              }
            },
            "ContractConfig": {
              "address": "H160",
              "query_aggregator_call_encoded": "Vec<u8>",
              "query_price_abi_encoded": "Vec<u8>",
              "return_val_abi": "Vec<ParamType>"
            },
            "StateChange": {
              "_enum": {
                "KeyUpdate": "KeyUpdate",
                "DidRemoval": "DidRemoval",
                "Revoke": "Revoke",
                "UnRevoke": "UnRevoke",
                "RemoveRegistry": "RemoveRegistry",
                "Blob": "Blob",
                "MasterVote": "Payload",
                "Attestation": "(Did, Attestation)"
              }
            }
          }
        }
      ],
      "rpc": {
        "poa": {
          "treasuryAccount": {
            "description": "Return account address of treasury. The account address can then be used to query the chain for balance",
            "params": [],
            "type": "AccountId"
          },
          "treasuryBalance": {
            "description": "Return free balance of treasury account. In the context of PoA, only free balance makes sense for treasury. But just in case, to check all kinds of balance (locked, reserved, etc), get the account address with above call and query the chain.",
            "params": [],
            "type": "Balance"
          },
          "getTotalEmissionInEpoch": {
            "description": "Return total (validators + treasury) emission rewards for given epoch",
            "params": [
              "EpochNo"
            ],
            "type": "Balance"
          }
        },
        "price_feed": {
          "tokenUsdPrice": {
            "description": "Gets the price of Dock/USD from pallet's storage",
            "params": [],
            "type": "Option<u32>"
          },
          "tokenUsdPriceFromContract": {
            "description": "Gets the price of Dock/USD from EVM contract",
            "params": [],
            "type": "Option<u32>"
          }
        },
        "fiat_filter": {
          "getCallFeeDock": {
            "description": "Accepts a scale-encoded extrinsic, returns fee in µDOCK as Balance (u64)",
            "params": [
              "Bytes"
            ],
            "type": "Balance"
          }
        },
        "core_mods": {
          "bbsPlusPublicKeyWithParams": {
            "description": "Return BBS+ public key with params",
            "params": [
              {
                "name": "id",
                "type": "BBSPlusPublicKeyStorageKey"
              }
            ],
            "type": "Option<BBSPlusPublicKeyWithParams>"
          },
          "bbsPlusParamsByDid": {
            "description": "Return all BBS+ params by a DID",
            "params": [
              {
                "name": "did",
                "type": "Did"
              }
            ],
            "type": "BTreeMap<IncId, BBSPlusParameters>"
          },
          "bbsPlusPublicKeysByDid": {
            "description": "Return all BBS+ key with params by a DID",
            "params": [
              {
                "name": "did",
                "type": "Did"
              }
            ],
            "type": "BTreeMap<IncId, BBSPlusPublicKeyWithParams>"
          },
          "accumulatorPublicKeyWithParams": {
            "description": "Return Accumulator public key with params",
            "params": [
              {
                "name": "id",
                "type": "AccumPublicKeyStorageKey"
              }
            ],
            "type": "Option<AccumPublicKeyWithParams>"
          },
          "accumulatorWithPublicKeyAndParams": {
            "description": "Return Accumulator public key with params",
            "params": [
              {
                "name": "id",
                "type": "AccumulatorId"
              }
            ],
            "type": "Option<(Vec<u8>, Option<AccumPublicKeyWithParams>)>"
          },
          "didDetails": {
            "description": "Get all keys, controllers and service endpoints of the DID",
            "params": [
              {
                "name": "did",
                "type": "Did"
              },
              {
                "name": "params",
                "type": "u8",
                "isOptional": true
              }
            ],
            "type": "Option<AggregatedDidDetailsResponse>"
          },
          "didListDetails": {
            "description": "Get all keys, controllers and service endpoints of the DID",
            "params": [
              {
                "name": "dids",
                "type": "Vec<Did>"
              },
              {
                "name": "params",
                "type": "u8",
                "isOptional": true
              }
            ],
            "type": "Vec<Option<AggregatedDidDetailsResponse>>"
          }
        },
        "staking_rewards": {
          "yearlyEmission": {
            "description": "",
            "params": [
              {
                "name": "total_staked",
                "type": "Balance"
              },
              {
                "name": "total_issuance",
                "type": "Balance"
              }
            ],
            "type": "Balance"
          },
          "maxYearlyEmission": {
            "description": "",
            "params": [],
            "type": "Balance"
          }
        }
      }
    },
    "dock-pos-test-runtime": {
      "types": [
        {
          "minmax": [
            0,
            23
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "Keys": "SessionKeys2",
            "Did": "[u8;32]",
            "Bytes32": {
              "value": "[u8;32]"
            },
            "Bytes33": {
              "value": "[u8;33]"
            },
            "Bytes64": {
              "value": "[u8;64]"
            },
            "Bytes65": {
              "value": "[u8;65]"
            },
            "PublicKey": {
              "_enum": {
                "Sr25519": "Bytes32",
                "Ed25519": "Bytes32",
                "Secp256k1": "Bytes33"
              }
            },
            "DidSignature": {
              "_enum": {
                "Sr25519": "Bytes64",
                "Ed25519": "Bytes64",
                "Secp256k1": "Bytes65"
              }
            },
            "KeyDetail": {
              "controller": "Did",
              "public_key": "PublicKey"
            },
            "KeyUpdate": {
              "did": "Did",
              "public_key": "PublicKey",
              "controller": "Option<Did>",
              "last_modified_in_block": "BlockNumber"
            },
            "DidRemoval": {
              "did": "Did",
              "last_modified_in_block": "BlockNumber"
            },
            "RegistryId": "[u8;32]",
            "RevokeId": "[u8;32]",
            "Registry": {
              "policy": "Policy",
              "add_only": "bool"
            },
            "Revoke": {
              "registry_id": "RegistryId",
              "revoke_ids": "BTreeSet<RevokeId>",
              "last_modified": "BlockNumber"
            },
            "UnRevoke": {
              "registry_id": "RegistryId",
              "revoke_ids": "BTreeSet<RevokeId>",
              "last_modified": "BlockNumber"
            },
            "RemoveRegistry": {
              "registry_id": "RegistryId",
              "last_modified": "BlockNumber"
            },
            "PAuth": "BTreeMap<Did, DidSignature>",
            "Policy": {
              "_enum": {
                "OneOf": "BTreeSet<Did>"
              }
            },
            "BlobId": "[u8;32]",
            "Blob": {
              "id": "BlobId",
              "blob": "Vec<u8>",
              "author": "Did"
            },
            "EpochNo": "u32",
            "EpochLen": "u32",
            "SlotNo": "u64",
            "Balance": "u64",
            "EpochDetail": {
              "validator_count": "u8",
              "starting_slot": "SlotNo",
              "expected_ending_slot": "SlotNo",
              "ending_slot": "Option<SlotNo>",
              "emission_for_validators": "Option<Balance>",
              "emission_for_treasury": "Option<Balance>"
            },
            "ValidatorStatsPerEpoch": {
              "block_count": "EpochLen",
              "locked_reward": "Option<Balance>",
              "unlocked_reward": "Option<Balance>"
            },
            "Payload": {
              "proposal": "Vec<u8>",
              "round_no": "u64"
            },
            "Membership": {
              "members": "BTreeSet<Did>",
              "vote_requirement": "u64"
            },
            "PMAuth": "BTreeMap<Did, DidSignature>",
            "Bonus": {
              "swap_bonuses": "Vec<(Balance, BlockNumber)>",
              "vesting_bonuses": "Vec<(Balance, Balance, BlockNumber)>"
            },
            "Attestation": {
              "priority": "Compact<u64>",
              "iri": "Option<Vec<u8>>"
            },
            "StateChange": {
              "_enum": {
                "KeyUpdate": "KeyUpdate",
                "DidRemoval": "DidRemoval",
                "Revoke": "Revoke",
                "UnRevoke": "UnRevoke",
                "RemoveRegistry": "RemoveRegistry",
                "Blob": "Blob",
                "MasterVote": "Payload",
                "Attestation": "(Did, Attestation)"
              }
            }
          }
        },
        {
          "minmax": [
            23
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "PerDispatchClassU32": {
              "normal": "u32",
              "operational": "u32",
              "mandatory": "u32"
            },
            "BlockLength": {
              "max": "PerDispatchClassU32"
            },
            "Keys": "SessionKeys2",
            "Did": "[u8;32]",
            "Bytes32": {
              "value": "[u8;32]"
            },
            "Bytes33": {
              "value": "[u8;33]"
            },
            "Bytes64": {
              "value": "[u8;64]"
            },
            "Bytes65": {
              "value": "[u8;65]"
            },
            "PublicKey": {
              "_enum": {
                "Sr25519": "Bytes32",
                "Ed25519": "Bytes32",
                "Secp256k1": "Bytes33"
              }
            },
            "DidSignature": {
              "_enum": {
                "Sr25519": "Bytes64",
                "Ed25519": "Bytes64",
                "Secp256k1": "Bytes65"
              }
            },
            "KeyDetail": {
              "controller": "Did",
              "public_key": "PublicKey"
            },
            "KeyUpdate": {
              "did": "Did",
              "public_key": "PublicKey",
              "controller": "Option<Did>",
              "last_modified_in_block": "BlockNumber"
            },
            "DidRemoval": {
              "did": "Did",
              "last_modified_in_block": "BlockNumber"
            },
            "RegistryId": "[u8;32]",
            "RevokeId": "[u8;32]",
            "Registry": {
              "policy": "Policy",
              "add_only": "bool"
            },
            "Revoke": {
              "registry_id": "RegistryId",
              "revoke_ids": "BTreeSet<RevokeId>",
              "last_modified": "BlockNumber"
            },
            "UnRevoke": {
              "registry_id": "RegistryId",
              "revoke_ids": "BTreeSet<RevokeId>",
              "last_modified": "BlockNumber"
            },
            "RemoveRegistry": {
              "registry_id": "RegistryId",
              "last_modified": "BlockNumber"
            },
            "PAuth": "BTreeMap<Did, DidSignature>",
            "Policy": {
              "_enum": {
                "OneOf": "BTreeSet<Did>"
              }
            },
            "BlobId": "[u8;32]",
            "Blob": {
              "id": "BlobId",
              "blob": "Vec<u8>",
              "author": "Did"
            },
            "EpochNo": "u32",
            "EpochLen": "u32",
            "SlotNo": "u64",
            "Balance": "u64",
            "EpochDetail": {
              "validator_count": "u8",
              "starting_slot": "SlotNo",
              "expected_ending_slot": "SlotNo",
              "ending_slot": "Option<SlotNo>",
              "emission_for_validators": "Option<Balance>",
              "emission_for_treasury": "Option<Balance>"
            },
            "ValidatorStatsPerEpoch": {
              "block_count": "EpochLen",
              "locked_reward": "Option<Balance>",
              "unlocked_reward": "Option<Balance>"
            },
            "Payload": {
              "proposal": "Vec<u8>",
              "round_no": "u64"
            },
            "Membership": {
              "members": "BTreeSet<Did>",
              "vote_requirement": "u64"
            },
            "PMAuth": "BTreeMap<Did, DidSignature>",
            "Bonus": {
              "swap_bonuses": "Vec<(Balance, BlockNumber)>",
              "vesting_bonuses": "Vec<(Balance, Balance, BlockNumber)>"
            },
            "Attestation": {
              "priority": "Compact<u64>",
              "iri": "Option<Vec<u8>>"
            },
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "Transaction": {
              "nonce": "U256",
              "action": "String",
              "gas_price": "u64",
              "gas_limit": "u64",
              "value": "U256",
              "input": "Vec<u8>",
              "signature": "Signature"
            },
            "Signature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "ParamType": {
              "_enum": {
                "Address": null,
                "Int": "u16",
                "Uint": "u16"
              }
            },
            "ContractConfig": {
              "address": "H160",
              "query_aggregator_call_encoded": "Vec<u8>",
              "query_price_abi_encoded": "Vec<u8>",
              "return_val_abi": "Vec<ParamType>"
            },
            "StateChange": {
              "_enum": {
                "KeyUpdate": "KeyUpdate",
                "DidRemoval": "DidRemoval",
                "Revoke": "Revoke",
                "UnRevoke": "UnRevoke",
                "RemoveRegistry": "RemoveRegistry",
                "Blob": "Blob",
                "MasterVote": "Payload",
                "Attestation": "(Did, Attestation)"
              }
            }
          }
        }
      ],
      "rpc": {
        "poa": {
          "treasuryAccount": {
            "description": "Return account address of treasury. The account address can then be used to query the chain for balance",
            "params": [],
            "type": "AccountId"
          },
          "treasuryBalance": {
            "description": "Return free balance of treasury account. In the context of PoA, only free balance makes sense for treasury. But just in case, to check all kinds of balance (locked, reserved, etc), get the account address with above call and query the chain.",
            "params": [],
            "type": "Balance"
          },
          "getTotalEmissionInEpoch": {
            "description": "Return total (validators + treasury) emission rewards for given epoch",
            "params": [
              "EpochNo"
            ],
            "type": "Balance"
          }
        },
        "price_feed": {
          "tokenUsdPrice": {
            "description": "Gets the price of Dock/USD from pallet's storage",
            "params": [],
            "type": "Option<u32>"
          },
          "tokenUsdPriceFromContract": {
            "description": "Gets the price of Dock/USD from EVM contract",
            "params": [],
            "type": "Option<u32>"
          }
        },
        "fiat_filter": {
          "getCallFeeDock": {
            "description": "Accepts a scale-encoded extrinsic, returns fee in µDOCK as Balance (u64)",
            "params": [
              "Bytes"
            ],
            "type": "Balance"
          }
        },
        "core_mods": {
          "bbsPlusPublicKeyWithParams": {
            "description": "Return BBS+ public key with params",
            "params": [
              {
                "name": "id",
                "type": "BBSPlusPublicKeyStorageKey"
              }
            ],
            "type": "Option<BBSPlusPublicKeyWithParams>"
          },
          "bbsPlusParamsByDid": {
            "description": "Return all BBS+ params by a DID",
            "params": [
              {
                "name": "did",
                "type": "Did"
              }
            ],
            "type": "BTreeMap<IncId, BBSPlusParameters>"
          },
          "bbsPlusPublicKeysByDid": {
            "description": "Return all BBS+ key with params by a DID",
            "params": [
              {
                "name": "did",
                "type": "Did"
              }
            ],
            "type": "BTreeMap<IncId, BBSPlusPublicKeyWithParams>"
          },
          "accumulatorPublicKeyWithParams": {
            "description": "Return Accumulator public key with params",
            "params": [
              {
                "name": "id",
                "type": "AccumPublicKeyStorageKey"
              }
            ],
            "type": "Option<AccumPublicKeyWithParams>"
          },
          "accumulatorWithPublicKeyAndParams": {
            "description": "Return Accumulator public key with params",
            "params": [
              {
                "name": "id",
                "type": "AccumulatorId"
              }
            ],
            "type": "Option<(Vec<u8>, Option<AccumPublicKeyWithParams>)>"
          },
          "didDetails": {
            "description": "Get all keys, controllers and service endpoints of the DID",
            "params": [
              {
                "name": "did",
                "type": "Did"
              },
              {
                "name": "params",
                "type": "u8",
                "isOptional": true
              }
            ],
            "type": "Option<AggregatedDidDetailsResponse>"
          },
          "didListDetails": {
            "description": "Get all keys, controllers and service endpoints of the DID",
            "params": [
              {
                "name": "dids",
                "type": "Vec<Did>"
              },
              {
                "name": "params",
                "type": "u8",
                "isOptional": true
              }
            ],
            "type": "Vec<Option<AggregatedDidDetailsResponse>>"
          }
        },
        "staking_rewards": {
          "yearlyEmission": {
            "description": "",
            "params": [
              {
                "name": "total_staked",
                "type": "Balance"
              },
              {
                "name": "total_issuance",
                "type": "Balance"
              }
            ],
            "type": "Balance"
          },
          "maxYearlyEmission": {
            "description": "",
            "params": [],
            "type": "Balance"
          }
        }
      }
    },
    "dotmog-node": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "MogwaiStruct": {
              "id": "Hash",
              "dna": "Hash",
              "genesis": "BlockNumber",
              "price": "Balance",
              "gen": "u32",
              "rarity": "RarityType"
            },
            "MogwaiBios": {
              "mogwai_id": "Hash",
              "state": "u32",
              "metaxy": "Vec<[u8;16]>",
              "intrinsic": "Balance",
              "level": "u8",
              "phases": "Vec<BlockNumber>",
              "adaptations": "Vec<Hash>"
            },
            "GameEvent": {
              "id": "Hash",
              "begin": "BlockNumber",
              "duration": "u16",
              "event_type": "GameEventType",
              "hashes": "Vec<Hash>",
              "value": "u64"
            },
            "GameEventType": {
              "_enum": [
                "Default",
                "Hatch"
              ]
            },
            "RarityType": {
              "_enum": [
                "Minor",
                "Normal",
                "Rare",
                "Epic",
                "Legendary"
              ]
            },
            "MogwaicoinAddress": {
              "address": "Vec<u8>",
              "account": "AccountId",
              "signature": "Vec<u8>",
              "state": "ClaimState",
              "balance": "Balance"
            },
            "ClaimState": {
              "_enum": [
                "None",
                "Registred",
                "Verified",
                "Secured",
                "Processed",
                "Holded",
                "Failed",
                "Cancelled"
              ]
            }
          }
        }
      ]
    },
    "edgeware": {
      "alias": {
        "voting": {
          "Tally": "VotingTally"
        }
      },
      "types": [
        {
          "minmax": [
            0,
            31
          ],
          "types": {
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "Balance2": "u128",
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "voting::VoteType": "VoteType",
            "voting::TallyType": "TallyType",
            "voting::Tally": "VotingTally",
            "Keys": "SessionKeys4",
            "StakingLedger": "StakingLedgerTo240",
            "Votes": "VotesTo230",
            "ReferendumInfo": "ReferendumInfoTo239",
            "Weight": "u32",
            "DispatchInfo": "DispatchInfoTo244",
            "OpenTip": "OpenTipTo225",
            "ContractExecResult": "ContractExecResultTo255",
            "CompactAssignments": "CompactAssignmentsTo257",
            "RewardDestination": "RewardDestinationTo257",
            "RefCount": "RefCountTo259",
            "AccountInfo": "AccountInfoWithRefCount",
            "Address": "IndicesLookupSource",
            "LookupSource": "IndicesLookupSource"
          }
        },
        {
          "minmax": [
            32,
            38
          ],
          "types": {
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "Balance2": "u128",
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "voting::VoteType": "VoteType",
            "voting::TallyType": "TallyType",
            "voting::Tally": "VotingTally",
            "CompactAssignments": "CompactAssignmentsTo257",
            "ContractExecResult": "ContractExecResultTo255",
            "RewardDestination": "RewardDestinationTo257",
            "RefCount": "u32",
            "AccountInfo": "AccountInfoWithRefCount",
            "Address": "IndicesLookupSource",
            "LookupSource": "IndicesLookupSource"
          }
        },
        {
          "minmax": [
            39,
            41
          ],
          "types": {
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "Balance2": "u128",
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "voting::VoteType": "VoteType",
            "voting::TallyType": "TallyType",
            "voting::Tally": "VotingTally",
            "RefCount": "u32",
            "AccountInfo": "AccountInfoWithRefCount",
            "Address": "IndicesLookupSource",
            "LookupSource": "IndicesLookupSource"
          }
        },
        {
          "minmax": [
            42,
            46
          ],
          "types": {
            "Balance2": "u128",
            "ChainId": "u8",
            "DepositNonce": "u64",
            "ResourceId": "[u8; 32]",
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "staus": "ProposalStatus",
              "expiry": "BlockNumber"
            },
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "AccountInfo": "AccountInfoWithRefCount",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress"
          }
        },
        {
          "minmax": [
            47,
            null
          ],
          "types": {
            "Balance2": "u128",
            "DepositNonce": "u64",
            "ResourceId": "[u8; 32]",
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "staus": "ProposalStatus",
              "expiry": "BlockNumber"
            },
            "VoteStage": {
              "_enum": [
                "PreVoting",
                "Commit",
                "Voting",
                "Completed"
              ]
            },
            "VoteType": {
              "_enum": [
                "Binary",
                "MultiOption",
                "RankedChoice"
              ]
            },
            "TallyType": {
              "_enum": [
                "OnePerson",
                "OneCoin"
              ]
            },
            "VoteOutcome": "[u8; 32]",
            "VotingTally": "Option<Vec<(VoteOutcome, u128)>>",
            "VoteData": {
              "initiator": "AccountId",
              "stage": "VoteStage",
              "vote_type": "VoteType",
              "tally_type": "TallyType",
              "is_commit_reveal": "bool"
            },
            "Commitments": "Vec<(AccountId, VoteOutcome)>",
            "Reveals": "Vec<(AccountId, Vec<VoteOutcome>)>",
            "VoteRecord": {
              "id": "u64",
              "commitments": "Commitments",
              "reveals": "Reveals",
              "data": "VoteData",
              "outcomes": "Vec<VoteOutcome>"
            },
            "ProposalRecord": {
              "index": "u32",
              "author": "AccountId",
              "stage": "VoteStage",
              "transition_time": "u32",
              "title": "Text",
              "contents": "Text",
              "vote_id": "u64"
            },
            "ProposalContents": "Bytes",
            "ProposalTitle": "Bytes",
            "CID": "Vec<u8>",
            "Properties": {
              "_set": {
                "Transferable": 1,
                "Burnable": 2
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties"
            },
            "TokenData": {
              "deposit": "Balance"
            },
            "ClassInfo": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "ClassInfoOf": "ClassInfo",
            "TokenInfo": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "TokenInfoOf": "TokenInfo",
            "TokenId": "u64",
            "ClassIdOf": "ClassId",
            "TokenIdOf": "TokenId",
            "Amount": "i128",
            "AmountOf": "Amount",
            "Approval": {
              "amount": "Balance",
              "deposit": "Balance"
            },
            "ApprovalKey": {
              "owner": "AccountId",
              "delegate": "AccountId"
            },
            "Commitment": "ScalarData",
            "CurrencyId": "u64",
            "CurrencyIdOf": "CurrencyId",
            "DustHandlerType": {
              "_enum": {
                "Burn": "Null",
                "Transfer": "AccountId"
              }
            },
            "HashFunction": {
              "_enum": [
                "PoseidonDefault",
                "PoseidonExp3",
                "PoseidonExp5",
                "PoseidonExp17",
                "MiMC",
                "Blake2",
                "Sha256"
              ]
            },
            "Manager": {
              "accountId": "AccountId",
              "required": "bool"
            },
            "MerkleTree": {
              "leaf_count": "u32",
              "max_leaves": "u32",
              "depth": "u8",
              "root_hash": "ScalarData",
              "edge_nodes": "Vec<ScalarData>",
              "hasher": "HashFunction",
              "should_store_leaves": "bool"
            },
            "MixerInfo": {
              "minimum_deposit_length_for_reward": "BlockNumber",
              "fixed_deposit_size": "Balance",
              "currency_id": "CurrencyIdOf"
            },
            "Nullifier": "ScalarData",
            "ScalarData": "[u8; 32]",
            "TokenDetails": {
              "owner": "AccountId",
              "issuer": "AccountId",
              "admin": "AccountId",
              "freezer": "AccountId",
              "supply": "Balance",
              "deposit": "Balance",
              "min_balance": "Balance",
              "approvals": "u32",
              "is_frozen": "bool",
              "dust_type": "DustHandlerType"
            },
            "TokenMetadata": {
              "deposit": "Balance",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "is_frozen": "bool"
            },
            "TreeId": "u32",
            "WithdrawProof": {
              "mixer_id": "TreeId",
              "cached_block": "BlockNumber",
              "cached_root": "ScalarData",
              "comms": "Vec<Commitment>",
              "nullifier_hash": "ScalarData",
              "proof_bytes": "Vec<u8>",
              "leaf_index_commitments": "Vec<Commitment>",
              "proof_commitments": "Vec<Commitment>",
              "recipient": "Option<AccountId>",
              "relayer": "Option<AccountId>"
            },
            "ETHBlock": {
              "inner": "Block"
            },
            "ETHReceipts": {
              "inner": "Vec<EthReceipt>"
            },
            "ETHTxStatuses": {
              "inner": "Vec<EthTransactionStatus>"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress"
          }
        }
      ]
    },
    "encointer-node-notee": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "CeremonyPhaseType": {
              "_enum": [
                "Registering",
                "Assigning",
                "Attesting"
              ]
            },
            "CeremonyIndexType": "u32",
            "ParticipantIndexType": "u64",
            "MeetupIndexType": "u64",
            "AttestationIndexType": "u64",
            "CurrencyIdentifier": "Hash",
            "BalanceType": "i128",
            "BalanceEntry": {
              "principal": "i128",
              "last_update": "BlockNumber"
            },
            "CurrencyCeremony": {
              "cid": "CurrencyIdentifier",
              "cindex": "CeremonyIndexType"
            },
            "Location": {
              "lat": "i64",
              "lon": "i64"
            },
            "Reputation": {
              "_enum": [
                "Unverified",
                "UnverifiedReputable",
                "VerifiedUnlinked",
                "VerifiedLinked"
              ]
            },
            "CurrencyPropertiesType": {
              "name_utf8": "Text",
              "demurrage_per_block": "i128"
            },
            "ClaimOfAttendance": {
              "claimant_public": "AccountId",
              "ceremony_index": "CeremonyIndexType",
              "currency_identifier": "CurrencyIdentifier",
              "meetup_index": "MeetupIndexType",
              "location": "Location",
              "timestamp": "Moment",
              "number_of_participants_confirmed": "u32"
            },
            "Attestation": {
              "claim": "ClaimOfAttendance",
              "signature": "Signature",
              "public": "AccountId"
            },
            "ProofOfAttendance": {
              "prover_public": "AccountId",
              "ceremony_index": "CeremonyIndexType",
              "currency_identifier": "CurrencyIdentifier",
              "attendee_public": "AccountId",
              "attendee_signature": "Signature"
            },
            "ShopIdentifier": "Text",
            "ArticleIdentifier": "Text"
          }
        }
      ]
    },
    "encointer-node-teeproxy": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "CeremonyPhaseType": {
              "_enum": [
                "Registering",
                "Assigning",
                "Attesting"
              ]
            },
            "CeremonyIndexType": "u32",
            "CurrencyIdentifier": "Hash",
            "CurrencyCeremony": {
              "cid": "CurrencyIdentifier",
              "cindex": "CeremonyIndexType"
            },
            "Location": {
              "lat": "i64",
              "lon": "i64"
            },
            "CurrencyPropertiesType": {
              "name_utf8": "Text",
              "demurrage_per_block": "i128"
            },
            "ShardIdentifier": "Hash",
            "Request": {
              "shard": "ShardIdentifier",
              "cyphertext": "Vec<u8>"
            },
            "Enclave": {
              "pubkey": "AccountId",
              "mrenclave": "Hash",
              "timestamp": "u64",
              "url": "Text"
            }
          }
        }
      ]
    },
    "encointer-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "CeremonyPhaseType": {
              "_enum": [
                "Registering",
                "Assigning",
                "Attesting"
              ]
            },
            "CeremonyIndexType": "u32",
            "ParticipantIndexType": "u64",
            "MeetupIndexType": "u64",
            "AttestationIndexType": "u64",
            "CommunityIdentifier": "Hash",
            "BalanceType": "i128",
            "BalanceEntry": {
              "principal": "i128",
              "last_update": "BlockNumber"
            },
            "CommunityCeremony": {
              "cid": "CommunityIdentifier",
              "cindex": "CeremonyIndexType"
            },
            "Location": {
              "lat": "i64",
              "lon": "i64"
            },
            "Reputation": {
              "_enum": [
                "Unverified",
                "UnverifiedReputable",
                "VerifiedUnlinked",
                "VerifiedLinked"
              ]
            },
            "CommunityPropertiesType": {
              "name_utf8": "Text",
              "demurrage_per_block": "i128"
            },
            "ClaimOfAttendance": {
              "claimant_public": "AccountId",
              "ceremony_index": "CeremonyIndexType",
              "community_identifier": "CommunityIdentifier",
              "meetup_index": "MeetupIndexType",
              "location": "Location",
              "timestamp": "Moment",
              "number_of_participants_confirmed": "u32"
            },
            "Attestation": {
              "claim": "ClaimOfAttendance",
              "signature": "Signature",
              "public": "AccountId"
            },
            "ProofOfAttendance": {
              "prover_public": "AccountId",
              "ceremony_index": "CeremonyIndexType",
              "community_identifier": "CommunityIdentifier",
              "attendee_public": "AccountId",
              "attendee_signature": "Signature"
            },
            "ShopIdentifier": "Text",
            "ArticleIdentifier": "Text",
            "PersonhoodUniquenessRating": "Vec<u8>",
            "SybilResponse": {
              "_enum": [
                "Unused",
                "Faucet"
              ]
            }
          }
        }
      ]
    },
    "fantour": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Properties": "u8",
            "NFTMetadata": "Vec<u8>",
            "BlockNumber": "u32",
            "BlockNumberOf": "BlockNumber",
            "OrderData": {
              "currencyId": "Compact<CurrencyIdOf>",
              "price": "Compact<Balance>",
              "deposit": "Compact<Balance>",
              "deadline": "Compact<BlockNumberOf>",
              "categoryId": "Compact<CategoryIdOf>"
            },
            "CategoryId": "u32",
            "CategoryIdOf": "CategoryId",
            "CategoryData": {
              "metadata": "NFTMetadata",
              "nftCount": "Compact<Balance>"
            },
            "CurrencyId": "u32",
            "CurrencyIdOf": "CurrencyId",
            "Amount": "i128",
            "AmountOf": "Amount",
            "ClassId": "u32",
            "ClassIdOf": "ClassId",
            "ClassInfoOf": {
              "metadata": "NFTMetadata",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "ClassData": {
              "deposit": "Compact<Balance>",
              "properties": "Properties",
              "name": "Vec<u8>",
              "description": "Vec<u8>",
              "createBlock": "Compact<BlockNumberOf>"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "TokenInfoOf": {
              "metadata": "NFTMetadata",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "TokenData": {
              "deposit": "Compact<Balance>",
              "createBlock": "Compact<BlockNumberOf>"
            }
          }
        }
      ]
    },
    "galital": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "Transaction": {
              "nonce": "U256",
              "action": "String",
              "gas_price": "u64",
              "gas_limit": "u64",
              "value": "U256",
              "input": "Vec<u8>",
              "signature": "Signature"
            },
            "ChainId": "u8",
            "ResourceId": "[u8; 32]",
            "DepositNonce": "u64",
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "u8",
              "expiry": "U256"
            },
            "ClassId": "u64",
            "TokenId": "u64",
            "ClassData": "Vec<u8>",
            "TokenData": "Vec<u8>",
            "ReportReason": {
              "_enum": [
                "None",
                "Illigal",
                "Plagiarism",
                "Duplicate",
                "Reported"
              ]
            },
            "ClassInfoOf": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "class_data": "ClassData"
            },
            "ExtendedInfo": {
              "display_flag": "bool",
              "report": "ReportReason",
              "frozen": "bool"
            },
            "TokenInfoOf": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "class_data": "ClassData"
            }
          }
        }
      ]
    },
    "galital-collator": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "Transaction": {
              "nonce": "U256",
              "action": "String",
              "gas_price": "u64",
              "gas_limit": "u64",
              "value": "U256",
              "input": "Vec<u8>",
              "signature": "Signature"
            },
            "Signature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "ClassId": "u64",
            "TokenId": "u64",
            "ClassData": "Vec<u8>",
            "TokenData": "Vec<u8>",
            "ReportReason": {
              "_enum": [
                "None",
                "Illigal",
                "Plagiarism",
                "Duplicate",
                "Reported"
              ]
            },
            "ClassInfoOf": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "class_data": "ClassData"
            },
            "ExtendedInfo": {
              "display_flag": "bool",
              "report": "ReportReason",
              "frozen": "bool"
            },
            "TokenInfoOf": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "class_data": "ClassData"
            }
          }
        }
      ]
    },
    "gamepower": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountInfo": "AccountInfoWithDualRefCount",
            "AssetId": "u64",
            "SeriesId": "u64",
            "ClassId": "u32",
            "ClassIdOf": "ClassId",
            "ClassInfoOf": "ClassInfo",
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "TokenInfoOf": "TokenInfo",
            "ClassInfo": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "data": "NftClassData"
            },
            "TokenInfo": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "data": "NftAssetData"
            },
            "NftSeriesData": {
              "name": "Vec<u8>",
              "owner": "AccountId",
              "properties": "Vec<u8>"
            },
            "NftClassData": {
              "deposit": "Balance",
              "properties": "Vec<u8>",
              "token_type": "TokenType",
              "collection_type": "CollectionType",
              "total_supply": "u64",
              "initial_supply": "u64"
            },
            "NftAssetData": {
              "deposit": "Balance",
              "name": "Vec<u8>",
              "description": "Vec<u8>",
              "properties": "Vec<u8>"
            },
            "TokenType": {
              "_enum": [
                "Transferrable",
                "BoundToAddress"
              ]
            },
            "CollectionType": {
              "_enum": [
                "Collectable",
                "Wearable",
                "Executable"
              ]
            },
            "ClassProperties": {
              "Transferrable": "bool",
              "Burnable": "bool"
            }
          }
        }
      ]
    },
    "hack-hydra-dx": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Amount": "i128",
            "AmountOf": "Amount",
            "Address": "AccountId",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "Fee": {
              "numerator": "u32",
              "denominator": "u32"
            },
            "BalanceInfo": {
              "amount": "Balance",
              "assetId": "AssetId"
            },
            "CurrencyId": "AssetId",
            "CurrencyIdOf": "AssetId",
            "Intention": {
              "who": "AccountId",
              "asset_sell": "AssetId",
              "asset_buy": "AssetId",
              "amount": "Balance",
              "discount": "bool",
              "sell_or_buy": "IntentionType"
            },
            "IntentionId": "u128",
            "IntentionType": {
              "_enum": [
                "SELL",
                "BUY"
              ]
            },
            "LookupSource": "AccountId",
            "OrderedSet": "Vec<AssetId>",
            "Price": "Balance",
            "Chain": {
              "genesisHash": "Vec<u8>",
              "lastBlockHash": "Vec<u8>"
            }
          }
        }
      ]
    },
    "halongbay": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "RelayChainAccountId": "H256",
            "RoundIndex": "u32",
            "SettingStruct": {
              "bond_duration": "u32",
              "blocks_per_round": "u32",
              "desired_target": "u32"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "UnBondChunk": {
              "value": "Balance",
              "round": "u32"
            },
            "StakingNominators": {
              "nominations": "Vec<Bond>",
              "total": "Balance",
              "unbonding": "Vec<UnBondChunk>",
              "claimed_rewards": "Vec<u32>"
            }
          }
        }
      ]
    },
    "hanonycash": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Difficulty": "U256",
            "DifficultyAndTimestamp": {
              "difficulty": "Difficulty",
              "timestamp": "Moment"
            },
            "Era": {
              "genesisBlockHash": "H256",
              "finalBlockHash": "H256",
              "finalStateRoot": "H256"
            },
            "RefCount": "u8"
          }
        }
      ]
    },
    "heiko": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "tokens": {
          "queryExistentialDeposit": {
            "description": "Query Existential Deposit for a given currency.",
            "params": [
              {
                "name": "currencyId",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "NumberOrHex",
            "isSubscription": false,
            "jsonrpc": "tokens_queryExistentialDeposit",
            "method": "queryExistentialDeposit",
            "section": "tokens"
          }
        },
        "loans": {
          "getCollateralLiquidity": {
            "description": "Retrieves collateral liquidity for the given user.",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Liquidity, Shortfall, Liquidity, Shortfall)",
            "isSubscription": false,
            "jsonrpc": "loans_getCollateralLiquidity",
            "method": "getCollateralLiquidity",
            "section": "loans"
          },
          "getLiquidationThresholdLiquidity": {
            "description": "Retrieves liquidation threshold liquidity for the given user.",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Liquidity, Shortfall, Liquidity, Shortfall)",
            "isSubscription": false,
            "jsonrpc": "loans_getLiquidationThresholdLiquidity",
            "method": "getLiquidationThresholdLiquidity",
            "section": "loans"
          },
          "getMarketStatus": {
            "description": "Retrieves market status data for a given asset id.",
            "params": [
              {
                "name": "asset_id",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",
            "isSubscription": false,
            "jsonrpc": "loans_getMarketStatus",
            "method": "getMarketStatus",
            "section": "loans"
          }
        },
        "router": {
          "getBestRoute": {
            "description": "Returns the route that results in the largest amount out for amount in",
            "params": [
              {
                "name": "amount",
                "type": "Balance"
              },
              {
                "name": "token_in",
                "type": "CurrencyId"
              },
              {
                "name": "token_out",
                "type": "CurrencyId"
              },
              {
                "name": "reversed",
                "type": "bool"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Vec<CurrencyId>, FixedU128)",
            "isSubscription": false,
            "jsonrpc": "router_getBestRoute",
            "method": "getBestRoute",
            "section": "router"
          }
        }
      },
      "instances": {
        "council": [
          "generalCouncil"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "isActive": "bool",
              "totalDeposited": "Balance",
              "unlockHeight": "BlockNumber",
              "coolDownDuration": "BlockNumber",
              "rewardDuration": "BlockNumber",
              "periodFinish": "BlockNumber",
              "lastUpdateBlock": "BlockNumber",
              "rewardRate": "Balance",
              "rewardPerShareStored": "Balance"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Deposits": {
              "voucherBalance": "Balance",
              "isCollateral": "bool"
            },
            "BorrowSnapshot": {
              "principal": "Balance",
              "borrowIndex": "u128"
            },
            "EarnedSnapshot": {
              "totalEarnedPrior": "Balance",
              "exchangeRatePrior": "u128"
            },
            "JumpModel": {
              "baseRate": "Rate",
              "jumpRate": "Rate",
              "fullRate": "Rate",
              "jumpUtilization": "Ratio"
            },
            "CurveModel": {
              "baseRate": "Rate"
            },
            "InterestRateModel": {
              "_enum": {
                "JumpModel": "JumpModel",
                "CurveModel": "CurveModel"
              }
            },
            "Market": {
              "collateralFactor": "Ratio",
              "liquidationThreshold": "Ratio",
              "reserveFactor": "Ratio",
              "closeFactor": "Ratio",
              "liquidateIncentive": "Rate",
              "liquidateIncentiveReservedFactor": "Ratio",
              "rateModel": "InterestRateModel",
              "state": "MarketState",
              "supplyCap": "Balance",
              "borrowCap": "Balance",
              "ptokenId": "CurrencyId"
            },
            "MarketState": {
              "_enum": [
                "Active",
                "Pending",
                "Supervision"
              ]
            },
            "RewardMarketState": {
              "index": "Balance",
              "block": "BlockNumber"
            },
            "Liquidity": "FixedU128",
            "Shortfall": "FixedU128",
            "ReservableAmount": {
              "total": "Balance",
              "reserved": "Balance"
            },
            "MatchingLedger": {
              "totalStakeAmount": "ReservableAmount",
              "totalUnstakeAmount": "ReservableAmount"
            },
            "UnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "StakingLedger": {
              "stash": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>",
              "claimedRewards": "Vec<EraIndex>"
            },
            "DerivativeIndex": "u16",
            "Pool": {
              "baseAmount": "Balance",
              "quoteAmount": "Balance",
              "baseAmountLast": "Balance",
              "quoteAmountLast": "Balance",
              "lpTokenId": "AssetId",
              "blockTimestampLast": "BlockNumber",
              "price0CumulativeLast": "Balance",
              "price1CumulativeLast": "Balance"
            },
            "Amount": "i128",
            "AmountOf": "Amount",
            "Rate": "FixedU128",
            "Ratio": "Permill",
            "Timestamp": "u64",
            "PriceDetail": "(Price, Timestamp)",
            "CurrencyId": "AssetId",
            "CurrencyIdOf": "CurrencyId",
            "Currency": "CurrencyId",
            "AssetIdOf": "AssetId",
            "OracleKey": "AssetId",
            "BoundedBalance": "BoundedVec<(Balance, BlockNumber), u32>",
            "UserPosition": {
              "depositBalance": "Balance",
              "lockBalanceItems": "BoundedBalance",
              "rewardAmount": "Balance",
              "rewardPerSharePaid": "Balance"
            },
            "Route": "Vec<(AssetId, AssetId)>",
            "VaultPhase": {
              "_enum": [
                "Pending",
                "Contributing",
                "Closed",
                "Failed",
                "Succeeded",
                "Expired"
              ]
            },
            "ContributionStrategy": {
              "_enum": [
                "XCM",
                "XCMPROXY"
              ]
            },
            "ChildStorageKind": {
              "_enum": [
                "Pending",
                "Flying",
                "Contributed"
              ]
            },
            "TrieIndex": "u32",
            "LeasePeriod": "BlockNumber",
            "Vault": {
              "ctoken": "AssetId",
              "phase": "VaultPhase",
              "contributed": "Balance",
              "pending": "Balance",
              "flying": "Balance",
              "contributionStrategy": "ContributionStrategy",
              "cap": "Balance",
              "endBlock": "BlockNumber",
              "trieIndex": "TrieIndex",
              "leaseStart": "LeasePeriod",
              "leaseEnd": "LeasePeriod"
            },
            "XcmWeightFeeMisc": {
              "weight": "Weight",
              "fee": "Balance"
            },
            "XcmCall": {
              "_enum": [
                "Bond",
                "BondExtra",
                "Unbond",
                "Rebond",
                "WithdrawUnbonded",
                "Nominate",
                "Contribute",
                "Withdraw",
                "AddMemo"
              ]
            },
            "BridgeToken": {
              "id": "CurrencyId",
              "external": "bool",
              "fee": "Balance"
            },
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "TAssetBalance": "u128"
          }
        }
      ],
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "hydra-dx": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Amount": "i128",
            "AmountOf": "Amount",
            "Address": "AccountId",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "Fee": {
              "numerator": "u32",
              "denominator": "u32"
            },
            "BalanceInfo": {
              "amount": "Balance",
              "assetId": "AssetId"
            },
            "CurrencyId": "AssetId",
            "CurrencyIdOf": "AssetId",
            "Intention": {
              "who": "AccountId",
              "asset_sell": "AssetId",
              "asset_buy": "AssetId",
              "amount": "Balance",
              "discount": "bool",
              "sell_or_buy": "IntentionType"
            },
            "IntentionId": "u128",
            "IntentionType": {
              "_enum": [
                "SELL",
                "BUY"
              ]
            },
            "LookupSource": "AccountId",
            "OrderedSet": "Vec<AssetId>",
            "Price": "Balance",
            "Chain": {
              "genesisHash": "Vec<u8>",
              "lastBlockHash": "Vec<u8>"
            }
          }
        }
      ]
    },
    "idavoll": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "imbue": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress"
          }
        }
      ]
    },
    "integritee-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "Enclave": {
              "mrenclave": "Hash",
              "pubkey": "AccountId",
              "timestamp": "u64",
              "url": "Text"
            },
            "LookupSource": "MultiAddress",
            "Request": {
              "cyphertext": "Vec<u8>",
              "shard": "ShardIdentifier"
            },
            "ShardIdentifier": "Hash"
          }
        }
      ]
    },
    "interbtc-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "BalanceWrapper": {
              "amount": "String"
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "ForeignAsset": "ForeignAssetId"
              }
            },
            "InterbtcPrimitivesCurrencyId": {
              "_enum": {
                "Token": "InterbtcPrimitivesTokenSymbol",
                "ForeignAsset": "InterbtcForeignAssetId"
              }
            },
            "InterbtcForeignAssetId": "u32",
            "ForeignAssetId": "u32",
            "FundAccountJsonRpcRequest": {
              "account_id": "AccountId",
              "currency_id": "InterbtcPrimitivesCurrencyId"
            },
            "H256Le": "H256",
            "SignedFixedPoint": "FixedU128",
            "TokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "InterbtcPrimitivesTokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "UnsignedFixedPoint": "FixedU128",
            "VaultCurrencyPair": {
              "collateral": "CurrencyId",
              "wrapped": "CurrencyId"
            },
            "VaultId": {
              "account_id": "AccountId",
              "currencies": "VaultCurrencyPair"
            }
          }
        }
      ],
      "rpc": {
        "btcRelay": {
          "verifyBlockHeaderInclusion": {
            "description": "Verify that the block with the given hash is included",
            "params": [
              {
                "name": "block_hash",
                "type": "H256Le"
              }
            ],
            "type": "void"
          }
        },
        "escrow": {
          "balanceAt": {
            "description": "Get a given user's escrowed balance",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          },
          "totalSupply": {
            "description": "Get the total voting supply in the system",
            "params": [
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "issue": {
          "getIssueRequests": {
            "description": "Get all issue request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultIssueRequests": {
            "description": "Get all issue request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "oracle": {
          "collateralToWrapped": {
            "description": "Collateral to Wrapped exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "wrappedToCollateral": {
            "description": "Wrapped to Collateral exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "redeem": {
          "getRedeemRequests": {
            "description": "Get all redeem request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultRedeemRequests": {
            "description": "Get all redeem request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "refund": {
          "getRefundRequests": {
            "description": "Get all refund request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getRefundRequestsByIssueId": {
            "description": "Get all refund request IDs for a particular issue ID",
            "params": [
              {
                "name": "issue_id",
                "type": "H256"
              }
            ],
            "type": "H256"
          },
          "getVaultRefundRequests": {
            "description": "Get all refund request IDs for a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "replace": {
          "getNewVaultReplaceRequests": {
            "description": "Get all replace request IDs to a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getOldVaultReplaceRequests": {
            "description": "Get all replace request IDs from a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "reward": {
          "computeEscrowReward": {
            "description": "Get a given user's rewards due",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "computeVaultReward": {
            "description": "Get a given vault's rewards due",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "vaultRegistry": {
          "getCollateralizationFromVault": {
            "description": "Returns the collateralization of a specific vault",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getCollateralizationFromVaultAndCollateral": {
            "description": "Returns the collateralization of a specific vault and collateral",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "collateral",
                "type": "BalanceWrapper"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getIssueableTokensFromVault": {
            "description": "Get the amount of tokens a vault can issue",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getPremiumRedeemVaults": {
            "description": "Get all vaults below the premium redeem threshold.",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getRequiredCollateralForVault": {
            "description": "Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getRequiredCollateralForWrapped": {
            "description": "Get the amount of collateral required to issue an amount of InterBTC",
            "params": [
              {
                "name": "amount_btc",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultCollateral": {
            "description": "Get the vault's collateral (excluding nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultTotalCollateral": {
            "description": "Get the vault's collateral (including nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultsByAccountId": {
            "description": "Get all vaults that are registered using the given account _id",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<VaultId>"
          },
          "getVaultsWithIssuableTokens": {
            "description": "Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getVaultsWithRedeemableTokens": {
            "description": "Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          }
        }
      },
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      },
      "instances": {
        "balances": [
          "ksm",
          "kbtc",
          "kint",
          "dot",
          "ibtc",
          "intr"
        ]
      }
    },
    "interbtc-standalone": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "BalanceWrapper": {
              "amount": "String"
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "ForeignAsset": "ForeignAssetId"
              }
            },
            "InterbtcPrimitivesCurrencyId": {
              "_enum": {
                "Token": "InterbtcPrimitivesTokenSymbol",
                "ForeignAsset": "InterbtcForeignAssetId"
              }
            },
            "InterbtcForeignAssetId": "u32",
            "ForeignAssetId": "u32",
            "FundAccountJsonRpcRequest": {
              "account_id": "AccountId",
              "currency_id": "InterbtcPrimitivesCurrencyId"
            },
            "H256Le": "H256",
            "SignedFixedPoint": "FixedU128",
            "TokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "InterbtcPrimitivesTokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "UnsignedFixedPoint": "FixedU128",
            "VaultCurrencyPair": {
              "collateral": "CurrencyId",
              "wrapped": "CurrencyId"
            },
            "VaultId": {
              "account_id": "AccountId",
              "currencies": "VaultCurrencyPair"
            }
          }
        }
      ],
      "rpc": {
        "btcRelay": {
          "verifyBlockHeaderInclusion": {
            "description": "Verify that the block with the given hash is included",
            "params": [
              {
                "name": "block_hash",
                "type": "H256Le"
              }
            ],
            "type": "void"
          }
        },
        "escrow": {
          "balanceAt": {
            "description": "Get a given user's escrowed balance",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          },
          "totalSupply": {
            "description": "Get the total voting supply in the system",
            "params": [
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "issue": {
          "getIssueRequests": {
            "description": "Get all issue request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultIssueRequests": {
            "description": "Get all issue request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "oracle": {
          "collateralToWrapped": {
            "description": "Collateral to Wrapped exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "wrappedToCollateral": {
            "description": "Wrapped to Collateral exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "redeem": {
          "getRedeemRequests": {
            "description": "Get all redeem request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultRedeemRequests": {
            "description": "Get all redeem request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "refund": {
          "getRefundRequests": {
            "description": "Get all refund request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getRefundRequestsByIssueId": {
            "description": "Get all refund request IDs for a particular issue ID",
            "params": [
              {
                "name": "issue_id",
                "type": "H256"
              }
            ],
            "type": "H256"
          },
          "getVaultRefundRequests": {
            "description": "Get all refund request IDs for a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "replace": {
          "getNewVaultReplaceRequests": {
            "description": "Get all replace request IDs to a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getOldVaultReplaceRequests": {
            "description": "Get all replace request IDs from a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "reward": {
          "computeEscrowReward": {
            "description": "Get a given user's rewards due",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "computeVaultReward": {
            "description": "Get a given vault's rewards due",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "vaultRegistry": {
          "getCollateralizationFromVault": {
            "description": "Returns the collateralization of a specific vault",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getCollateralizationFromVaultAndCollateral": {
            "description": "Returns the collateralization of a specific vault and collateral",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "collateral",
                "type": "BalanceWrapper"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getIssueableTokensFromVault": {
            "description": "Get the amount of tokens a vault can issue",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getPremiumRedeemVaults": {
            "description": "Get all vaults below the premium redeem threshold.",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getRequiredCollateralForVault": {
            "description": "Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getRequiredCollateralForWrapped": {
            "description": "Get the amount of collateral required to issue an amount of InterBTC",
            "params": [
              {
                "name": "amount_btc",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultCollateral": {
            "description": "Get the vault's collateral (excluding nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultTotalCollateral": {
            "description": "Get the vault's collateral (including nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultsByAccountId": {
            "description": "Get all vaults that are registered using the given account _id",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<VaultId>"
          },
          "getVaultsWithIssuableTokens": {
            "description": "Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getVaultsWithRedeemableTokens": {
            "description": "Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          }
        }
      },
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      },
      "instances": {
        "balances": [
          "ksm",
          "kbtc",
          "kint",
          "dot",
          "ibtc",
          "intr"
        ]
      }
    },
    "interlay-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "BalanceWrapper": {
              "amount": "String"
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "ForeignAsset": "ForeignAssetId"
              }
            },
            "InterbtcPrimitivesCurrencyId": {
              "_enum": {
                "Token": "InterbtcPrimitivesTokenSymbol",
                "ForeignAsset": "InterbtcForeignAssetId"
              }
            },
            "InterbtcForeignAssetId": "u32",
            "ForeignAssetId": "u32",
            "FundAccountJsonRpcRequest": {
              "account_id": "AccountId",
              "currency_id": "InterbtcPrimitivesCurrencyId"
            },
            "H256Le": "H256",
            "SignedFixedPoint": "FixedU128",
            "TokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "InterbtcPrimitivesTokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "UnsignedFixedPoint": "FixedU128",
            "VaultCurrencyPair": {
              "collateral": "CurrencyId",
              "wrapped": "CurrencyId"
            },
            "VaultId": {
              "account_id": "AccountId",
              "currencies": "VaultCurrencyPair"
            }
          }
        }
      ],
      "rpc": {
        "btcRelay": {
          "verifyBlockHeaderInclusion": {
            "description": "Verify that the block with the given hash is included",
            "params": [
              {
                "name": "block_hash",
                "type": "H256Le"
              }
            ],
            "type": "void"
          }
        },
        "escrow": {
          "balanceAt": {
            "description": "Get a given user's escrowed balance",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          },
          "totalSupply": {
            "description": "Get the total voting supply in the system",
            "params": [
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "issue": {
          "getIssueRequests": {
            "description": "Get all issue request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultIssueRequests": {
            "description": "Get all issue request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "oracle": {
          "collateralToWrapped": {
            "description": "Collateral to Wrapped exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "wrappedToCollateral": {
            "description": "Wrapped to Collateral exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "redeem": {
          "getRedeemRequests": {
            "description": "Get all redeem request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultRedeemRequests": {
            "description": "Get all redeem request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "refund": {
          "getRefundRequests": {
            "description": "Get all refund request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getRefundRequestsByIssueId": {
            "description": "Get all refund request IDs for a particular issue ID",
            "params": [
              {
                "name": "issue_id",
                "type": "H256"
              }
            ],
            "type": "H256"
          },
          "getVaultRefundRequests": {
            "description": "Get all refund request IDs for a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "replace": {
          "getNewVaultReplaceRequests": {
            "description": "Get all replace request IDs to a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getOldVaultReplaceRequests": {
            "description": "Get all replace request IDs from a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "reward": {
          "computeEscrowReward": {
            "description": "Get a given user's rewards due",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "computeVaultReward": {
            "description": "Get a given vault's rewards due",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "vaultRegistry": {
          "getCollateralizationFromVault": {
            "description": "Returns the collateralization of a specific vault",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getCollateralizationFromVaultAndCollateral": {
            "description": "Returns the collateralization of a specific vault and collateral",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "collateral",
                "type": "BalanceWrapper"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getIssueableTokensFromVault": {
            "description": "Get the amount of tokens a vault can issue",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getPremiumRedeemVaults": {
            "description": "Get all vaults below the premium redeem threshold.",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getRequiredCollateralForVault": {
            "description": "Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getRequiredCollateralForWrapped": {
            "description": "Get the amount of collateral required to issue an amount of InterBTC",
            "params": [
              {
                "name": "amount_btc",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultCollateral": {
            "description": "Get the vault's collateral (excluding nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultTotalCollateral": {
            "description": "Get the vault's collateral (including nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultsByAccountId": {
            "description": "Get all vaults that are registered using the given account _id",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<VaultId>"
          },
          "getVaultsWithIssuableTokens": {
            "description": "Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getVaultsWithRedeemableTokens": {
            "description": "Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          }
        }
      },
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      },
      "instances": {
        "balances": [
          "ksm",
          "kbtc",
          "kint",
          "dot",
          "ibtc",
          "intr"
        ]
      }
    },
    "ipse-node": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "test": "u64",
            "Address": "IndicesLookupSource",
            "LookupSource": "IndicesLookupSource",
            "GIB": "u64",
            "Amount": "u128",
            "Miner": {
              "account_id": "AccountId",
              "nickname": "Vec<u8>",
              "region": "Vec<u8>",
              "url": "Vec<u8>",
              "public_key": "Vec<u8>",
              "stash_address": "AccountId",
              "capacity": "u128",
              "unit_price": "Balance",
              "violation_times": "u64",
              "total_staking": "Balance",
              "create_ts": "u64",
              "update_ts": "u64"
            },
            "Order": {
              "miner": "AccountId",
              "label": "Vec<u8>",
              "hash": "[u8; 46]",
              "size": "u128",
              "user": "AccountId",
              "orders": "Vec<MinerOrder<AccountId, Balance>>",
              "status": "OrderStatus",
              "create_ts": "u64",
              "update_ts": "u64",
              "duration": "u64"
            },
            "MinerOrder": {
              "miner": "AccountId",
              "day_price": "Balance",
              "total_price": "Balance",
              "verify_result": "bool",
              "verify_ts": "u64",
              "confirm_ts": "u64",
              "url": "Option<Vec<u8>>"
            },
            "OrderStatus": {
              "_enum": [
                "Created",
                "Confirmed",
                "Expired",
                "Deleted"
              ]
            },
            "MiningInfo": {
              "miner": "Option<AccountId>",
              "best_dl": "u64",
              "block": "u64"
            },
            "Difficulty": {
              "base_target": "u64",
              "net_difficulty": "u64",
              "block": "u64"
            },
            "MachineInfo": {
              "plot_size": "u64",
              "numeric_id": "u128",
              "update_time": "BlockNumber",
              "is_stop": "bool",
              "reward_dest": "AccountId"
            },
            "StakingInfo": {
              "miner": "AccountId",
              "miner_proportion": "Percent",
              "total_staking": "Balance",
              "others": "Vec<(AccountId, Balance, Balance)>"
            },
            "Oprate": {
              "_enum": [
                "Add",
                "Sub"
              ]
            },
            "MiningHistory": {
              "total_num": "u64",
              "history": "Vec<(BlockNumber, Balance)>"
            },
            "PostTxTransferData": {
              "verify_status": "u64",
              "irreversible": "bool",
              "is_post_transfer": "bool",
              "contract_account": "Vec<u8>",
              "from": "Vec<u8>",
              "to": "Vec<u8>",
              "quantity": "u64",
              "memo": "Vec<u8>"
            },
            "AddressStatus": {
              "_enum": [
                "active",
                "inActive"
              ]
            },
            "FetchFailedOf": {
              "block_num": "BlockNumber",
              "tx": "Vec<u8>",
              "err": "Vec<u8>"
            }
          }
        }
      ]
    },
    "joystream-node": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "ActorId": "u64",
            "MemberId": "u64",
            "BlockAndTime": {
              "block": "u32",
              "time": "u64"
            },
            "ThreadId": "u64",
            "PostId": "u64",
            "InputValidationLengthConstraint": {
              "min": "u16",
              "max_min_diff": "u16"
            },
            "WorkingGroup": {
              "_enum": [
                "Forum",
                "Storage",
                "Content",
                "OperationsAlpha",
                "Gateway",
                "Distribution",
                "OperationsBeta",
                "OperationsGamma",
                "Membership"
              ]
            },
            "BalanceKind": {
              "_enum": [
                "Positive",
                "Negative"
              ]
            },
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "ChannelId": "u64",
            "Url": "Text",
            "Membership": {
              "handle_hash": "Bytes",
              "root_account": "AccountId",
              "controller_account": "AccountId",
              "verified": "bool",
              "invites": "u32"
            },
            "StakingAccountMemberBinding": {
              "member_id": "MemberId",
              "confirmed": "bool"
            },
            "BuyMembershipParameters": {
              "root_account": "AccountId",
              "controller_account": "AccountId",
              "handle": "Option<Text>",
              "metadata": "Bytes",
              "referrer_id": "Option<MemberId>"
            },
            "InviteMembershipParameters": {
              "inviting_member_id": "MemberId",
              "root_account": "AccountId",
              "controller_account": "AccountId",
              "handle": "Option<Text>",
              "metadata": "Bytes"
            },
            "CouncilStageAnnouncing": {
              "candidatesCount": "u64"
            },
            "CouncilStageElection": {
              "candidatesCount": "u64"
            },
            "CouncilStageUpdate": {
              "stage": "CouncilStage",
              "changed_at": "u32"
            },
            "CouncilStage": {
              "_enum": {
                "Announcing": "CouncilStageAnnouncing",
                "Election": "CouncilStageElection",
                "Idle": "Null"
              }
            },
            "Candidate": {
              "staking_account_id": "AccountId",
              "reward_account_id": "AccountId",
              "cycle_id": "u64",
              "stake": "u32",
              "vote_power": "VotePower",
              "note_hash": "Option<Hash>"
            },
            "CouncilMemberOf": {
              "staking_account_id": "AccountId",
              "reward_account_id": "AccountId",
              "membership_id": "MemberId",
              "stake": "u128",
              "last_payment_block": "u32",
              "unpaid_reward": "u128"
            },
            "CastVoteOf": {
              "commitment": "Hash",
              "cycle_id": "u64",
              "stake": "u128",
              "vote_for": "Option<MemberId>"
            },
            "ForumUserId": "u64",
            "ModeratorId": "u64",
            "CategoryId": "u64",
            "PostReactionId": "u64",
            "Category": {
              "title_hash": "Hash",
              "description_hash": "Hash",
              "archived": "bool",
              "num_direct_subcategories": "u32",
              "num_direct_threads": "u32",
              "num_direct_moderators": "u32",
              "parent_category_id": "Option<CategoryId>",
              "sticky_thread_ids": "Vec<ThreadId>"
            },
            "Thread": {
              "category_id": "CategoryId",
              "author_id": "ForumUserId",
              "poll": "Option<Poll>",
              "cleanup_pay_off": "u128",
              "number_of_posts": "u64"
            },
            "Post": {
              "thread_id": "ThreadId",
              "text_hash": "Hash",
              "author_id": "ForumUserId",
              "cleanup_pay_off": "u128",
              "last_edited": "u32"
            },
            "PollAlternative": {
              "alternative_text_hash": "Hash",
              "vote_count": "u32"
            },
            "Poll": {
              "description_hash": "Hash",
              "end_time": "u64",
              "poll_alternatives": "Vec<PollAlternative>"
            },
            "PrivilegedActor": {
              "_enum": {
                "Lead": "Null",
                "Moderator": "ModeratorId"
              }
            },
            "PollInput": {
              "description": "Bytes",
              "end_time": "u64",
              "poll_alternatives": "Vec<Bytes>"
            },
            "ThreadOf": {
              "category_id": "CategoryId",
              "author_id": "ForumUserId",
              "poll": "Option<Poll>",
              "cleanup_pay_off": "u128",
              "number_of_posts": "u64"
            },
            "ExtendedPostId": {
              "category_id": "CategoryId",
              "thread_id": "ThreadId",
              "post_id": "PostId"
            },
            "ApplicationId": "u64",
            "Application": {
              "role_account_id": "AccountId",
              "reward_account_id": "AccountId",
              "staking_account_id": "AccountId",
              "member_id": "MemberId",
              "description_hash": "Bytes",
              "opening_id": "OpeningId"
            },
            "ApplicationInfo": {
              "application_id": "ApplicationId",
              "application": "Application"
            },
            "ApplicationIdSet": "BTreeSet<ApplicationId>",
            "ApplicationIdToWorkerIdMap": "BTreeMap<ApplicationId,WorkerId>",
            "WorkerId": "u64",
            "Worker": {
              "member_id": "MemberId",
              "role_account_id": "AccountId",
              "staking_account_id": "AccountId",
              "reward_account_id": "AccountId",
              "started_leaving_at": "Option<u32>",
              "job_unstaking_period": "u32",
              "reward_per_block": "Option<u128>",
              "missed_reward": "Option<u128>",
              "created_at": "u32"
            },
            "WorkerInfo": {
              "worker_id": "WorkerId",
              "worker": "Worker"
            },
            "Opening": {
              "opening_type": "OpeningType",
              "created": "u32",
              "description_hash": "Bytes",
              "stake_policy": "StakePolicy",
              "reward_per_block": "Option<u128>",
              "creation_stake": "u128"
            },
            "OpeningId": "u64",
            "StakePolicy": {
              "stake_amount": "u128",
              "leaving_unstaking_period": "u32"
            },
            "StakeParameters": {
              "stake": "u128",
              "staking_account_id": "AccountId"
            },
            "StorageProviderId": "u64",
            "OpeningType": {
              "_enum": {
                "Leader": "Null",
                "Regular": "Null"
              }
            },
            "ApplyOnOpeningParameters": {
              "member_id": "MemberId",
              "opening_id": "OpeningId",
              "role_account_id": "AccountId",
              "reward_account_id": "AccountId",
              "description": "Bytes",
              "stake_parameters": "StakeParameters"
            },
            "Penalty": {
              "slashing_text": "Text",
              "slashing_amount": "u128"
            },
            "RewardPaymentType": {
              "_enum": [
                "MissedReward",
                "RegularReward"
              ]
            },
            "StorageBucketId": "u64",
            "StorageBucketsPerBagValueConstraint": {
              "min": "u64",
              "max_min_diff": "u64"
            },
            "DataObjectId": "u64",
            "DynamicBagId": {
              "_enum": {
                "Member": "MemberId",
                "Channel": "u64"
              }
            },
            "Voucher": {
              "sizeLimit": "u64",
              "objectsLimit": "u64",
              "sizeUsed": "u64",
              "objectsUsed": "u64"
            },
            "DynamicBagType": {
              "_enum": [
                "Member",
                "Channel"
              ]
            },
            "DynamicBagCreationPolicy": {
              "numberOfStorageBuckets": "u64",
              "families": "BTreeMap<DistributionBucketFamilyId,u32>"
            },
            "DynamicBagDeletionPrize": {
              "account_id": "GenericAccountId",
              "prize": "u128"
            },
            "DynamicBagDeletionPrizeRecord": {
              "account_id": "GenericAccountId",
              "prize": "u128"
            },
            "Bag": {
              "stored_by": "BTreeSet<StorageBucketId>",
              "distributed_by": "BTreeSet<DistributionBucketId>",
              "deletion_prize": "Option<u128>",
              "objects_total_size": "u64",
              "objects_number": "u64"
            },
            "StorageBucket": {
              "operator_status": "StorageBucketOperatorStatus",
              "accepting_new_bags": "bool",
              "voucher": "Voucher",
              "assigned_bags": "u64"
            },
            "StaticBagId": {
              "_enum": {
                "Council": "Null",
                "WorkingGroup": "WorkingGroup"
              }
            },
            "Static": {
              "_enum": {
                "Council": "Null",
                "WorkingGroup": "WorkingGroup"
              }
            },
            "Dynamic": {
              "_enum": {
                "Member": "MemberId",
                "Channel": "u64"
              }
            },
            "BagId": {
              "_enum": {
                "Static": "Static",
                "Dynamic": "Dynamic"
              }
            },
            "DataObjectCreationParameters": {
              "size": "u64",
              "ipfsContentId": "Bytes"
            },
            "BagIdType": {
              "_enum": {
                "Static": "Static",
                "Dynamic": "Dynamic"
              }
            },
            "UploadParameters": {
              "bagId": "BagId",
              "objectCreationList": "Vec<DataObjectCreationParameters>",
              "deletionPrizeSourceAccountId": "GenericAccountId",
              "expectedDataSizeFee": "u128"
            },
            "StorageBucketIdSet": "BTreeSet<StorageBucketId>",
            "DataObjectIdSet": "BTreeSet<DataObjectId>",
            "ContentIdSet": "BTreeSet<Cid>",
            "Cid": "Bytes",
            "StorageBucketOperatorStatus": {
              "_enum": {
                "Missing": "Null",
                "InvitedStorageWorker": "WorkerId",
                "StorageWorker": "(WorkerId,GenericAccountId)"
              }
            },
            "DataObject": {
              "accepted": "bool",
              "deletion_prize": "u128",
              "size": "u64",
              "ipfsContentId": "Bytes"
            },
            "DistributionBucketId": {
              "distribution_bucket_family_id": "DistributionBucketFamilyId",
              "distribution_bucket_index": "DistributionBucketIndex"
            },
            "DistributionBucketIndex": "u64",
            "DistributionBucketFamilyId": "u64",
            "DistributionBucket": {
              "accepting_new_bags": "bool",
              "distributing": "bool",
              "pending_invitations": "BTreeSet<WorkerId>",
              "operators": "BTreeSet<WorkerId>",
              "assigned_bags": "u64"
            },
            "DistributionBucketFamily": {
              "next_distribution_bucket_index": "DistributionBucketIndex"
            },
            "DataObjectIdMap": "BTreeMap<DataObjectId,DataObject>",
            "DistributionBucketIndexSet": "BTreeSet<DistributionBucketIndex>",
            "DynamicBagCreationPolicyDistributorFamiliesMap": "BTreeMap<DistributionBucketFamilyId,u32>",
            "ParticipantId": "u64",
            "Title": "Text",
            "UpdatedTitle": "Option<Text>",
            "UpdatedBody": "Option<Text>",
            "ReplyId": "u64",
            "Reply": {
              "text_hash": "Hash",
              "owner": "ParticipantId",
              "parent_id": "PostId"
            },
            "ReplyToDelete": {
              "post_id": "PostId",
              "reply_id": "ReplyId",
              "hide": "bool"
            },
            "ProposalId": "u32",
            "ProposalStatus": {
              "_enum": {
                "Active": "Null",
                "PendingExecution": "u32",
                "PendingConstitutionality": "Null"
              }
            },
            "ProposalOf": {
              "parameters": "ProposalParameters",
              "proposerId": "MemberId",
              "activatedAt": "u32",
              "status": "ProposalStatus",
              "votingResults": "VotingResults",
              "exactExecutionBlock": "Option<u32>",
              "nrOfCouncilConfirmations": "u32",
              "stakingAccountId": "Option<AccountId>"
            },
            "ProposalDetails": {
              "_enum": {
                "Signal": "Text",
                "RuntimeUpgrade": "Bytes",
                "FundingRequest": "Vec<FundingRequestParameters>",
                "SetMaxValidatorCount": "u32",
                "CreateWorkingGroupLeadOpening": "CreateOpeningParameters",
                "FillWorkingGroupLeadOpening": "FillOpeningParameters",
                "UpdateWorkingGroupBudget": "(Balance,WorkingGroup,BalanceKind)",
                "DecreaseWorkingGroupLeadStake": "(WorkerId,Balance,WorkingGroup)",
                "SlashWorkingGroupLead": "(WorkerId,Balance,WorkingGroup)",
                "SetWorkingGroupLeadReward": "(WorkerId,Option<Balance>,WorkingGroup)",
                "TerminateWorkingGroupLead": "TerminateRoleParameters",
                "AmendConstitution": "Text",
                "CancelWorkingGroupLeadOpening": "(OpeningId,WorkingGroup)",
                "SetMembershipPrice": "u128",
                "SetCouncilBudgetIncrement": "u128",
                "SetCouncilorReward": "u128",
                "SetInitialInvitationBalance": "u128",
                "SetInitialInvitationCount": "u32",
                "SetMembershipLeadInvitationQuota": "u32",
                "SetReferralCut": "u8",
                "CreateBlogPost": "(Text,Text)",
                "EditBlogPost": "(PostId,Option<Text>,Option<Text>)",
                "LockBlogPost": "PostId",
                "UnlockBlogPost": "PostId",
                "VetoProposal": "ProposalId"
              }
            },
            "ProposalDetailsOf": {
              "_enum": {
                "Signal": "Text",
                "RuntimeUpgrade": "Bytes",
                "FundingRequest": "Vec<FundingRequestParameters>",
                "SetMaxValidatorCount": "u32",
                "CreateWorkingGroupLeadOpening": "CreateOpeningParameters",
                "FillWorkingGroupLeadOpening": "FillOpeningParameters",
                "UpdateWorkingGroupBudget": "(Balance,WorkingGroup,BalanceKind)",
                "DecreaseWorkingGroupLeadStake": "(WorkerId,Balance,WorkingGroup)",
                "SlashWorkingGroupLead": "(WorkerId,Balance,WorkingGroup)",
                "SetWorkingGroupLeadReward": "(WorkerId,Option<Balance>,WorkingGroup)",
                "TerminateWorkingGroupLead": "TerminateRoleParameters",
                "AmendConstitution": "Text",
                "CancelWorkingGroupLeadOpening": "(OpeningId,WorkingGroup)",
                "SetMembershipPrice": "u128",
                "SetCouncilBudgetIncrement": "u128",
                "SetCouncilorReward": "u128",
                "SetInitialInvitationBalance": "u128",
                "SetInitialInvitationCount": "u32",
                "SetMembershipLeadInvitationQuota": "u32",
                "SetReferralCut": "u8",
                "CreateBlogPost": "(Text,Text)",
                "EditBlogPost": "(PostId,Option<Text>,Option<Text>)",
                "LockBlogPost": "PostId",
                "UnlockBlogPost": "PostId",
                "VetoProposal": "ProposalId"
              }
            },
            "VotingResults": {
              "abstensions": "u32",
              "approvals": "u32",
              "rejections": "u32",
              "slashes": "u32"
            },
            "ProposalParameters": {
              "votingPeriod": "u32",
              "gracePeriod": "u32",
              "approvalQuorumPercentage": "u32",
              "approvalThresholdPercentage": "u32",
              "slashingQuorumPercentage": "u32",
              "slashingThresholdPercentage": "u32",
              "requiredStake": "Option<u128>",
              "constitutionality": "u32"
            },
            "GeneralProposalParameters": {
              "member_id": "MemberId",
              "title": "Text",
              "description": "Text",
              "staking_account_id": "Option<AccountId>",
              "exact_execution_block": "Option<u32>"
            },
            "VoteKind": {
              "_enum": [
                "Approve",
                "Reject",
                "Slash",
                "Abstain"
              ]
            },
            "DiscussionThread": {
              "activated_at": "u32",
              "author_id": "u64",
              "mode": "ThreadMode"
            },
            "DiscussionPost": {
              "author_id": "u64"
            },
            "CreateOpeningParameters": {
              "description": "Bytes",
              "stake_policy": "StakePolicy",
              "reward_per_block": "Option<u128>",
              "working_group": "WorkingGroup"
            },
            "FillOpeningParameters": {
              "opening_id": "OpeningId",
              "successful_application_id": "ApplicationId",
              "working_group": "WorkingGroup"
            },
            "TerminateRoleParameters": {
              "worker_id": "WorkerId",
              "slashing_amount": "Option<u128>",
              "working_group": "WorkingGroup"
            },
            "ProposalDecision": {
              "_enum": {
                "Canceled": "Null",
                "CanceledByRuntime": "Null",
                "Vetoed": "Null",
                "Rejected": "Null",
                "Slashed": "Null",
                "Expired": "Null",
                "Approved": "Approved"
              }
            },
            "ExecutionFailed": {
              "error": "Text"
            },
            "Approved": {
              "_enum": [
                "PendingExecution",
                "PendingConstitutionality"
              ]
            },
            "SetLeadParams": "(MemberId,AccountId)",
            "ThreadMode": {
              "_enum": {
                "Open": "Null",
                "Closed": "Vec<MemberId>"
              }
            },
            "ExecutionStatus": {
              "_enum": {
                "Executed": "Null",
                "ExecutionFailed": "ExecutionFailed"
              }
            },
            "FundingRequestParameters": {
              "account": "AccountId",
              "amount": "u128"
            },
            "ReferendumStageVoting": {
              "started": "u32",
              "winning_target_count": "u64",
              "current_cycle_id": "u64"
            },
            "ReferendumStageRevealing": {
              "started": "u32",
              "winning_target_count": "u64",
              "intermediate_winners": "Vec<OptionResult>",
              "current_cycle_id": "u64"
            },
            "ReferendumStage": {
              "_enum": {
                "Inactive": "Null",
                "Voting": "ReferendumStageVoting",
                "Revealing": "ReferendumStageRevealing"
              }
            },
            "OptionResult": {
              "option_id": "MemberId",
              "vote_power": "VotePower"
            },
            "VotePower": "u128",
            "ConstitutionInfo": {
              "text_hash": "Hash"
            },
            "BountyId": "u64",
            "EntryId": "u64",
            "BountyActor": {
              "_enum": {
                "Council": "Null",
                "Member": "MemberId"
              }
            },
            "AssuranceContractType_Closed": "BTreeSet<MemberId>",
            "AssuranceContractType": {
              "_enum": {
                "Open": "Null",
                "Closed": "AssuranceContractType_Closed"
              }
            },
            "FundingType_Limited": {
              "min_funding_amount": "u128",
              "max_funding_amount": "u128",
              "funding_period": "u32"
            },
            "FundingType_Perpetual": {
              "target": "u128"
            },
            "FundingType": {
              "_enum": {
                "Perpetual": "FundingType_Perpetual",
                "Limited": "FundingType_Limited"
              }
            },
            "BountyCreationParameters": {
              "oracle": "BountyActor",
              "contract_type": "AssuranceContractType",
              "creator": "BountyActor",
              "cherry": "u128",
              "entrant_stake": "u128",
              "funding_type": "FundingType",
              "work_period": "u32",
              "judging_period": "u32"
            },
            "OracleWorkEntryJudgment_Winner": {
              "reward": "u128"
            },
            "OracleWorkEntryJudgment": {
              "_enum": {
                "Winner": "OracleWorkEntryJudgment_Winner",
                "Rejected": "Null"
              }
            },
            "OracleJudgment": "BTreeMap<EntryId,OracleWorkEntryJudgment>",
            "Entry": {
              "member_id": "MemberId",
              "staking_account_id": "AccountId",
              "submitted_at": "u32",
              "work_submitted": "bool",
              "oracle_judgment_result": "Option<OracleWorkEntryJudgment>"
            },
            "BountyMilestone_Created": {
              "created_at": "u32",
              "has_contributions": "bool"
            },
            "BountyMilestone_BountyMaxFundingReached": {
              "max_funding_reached_at": "u32"
            },
            "BountyMilestone_WorkSubmitted": {
              "work_period_started_at": "u32"
            },
            "BountyMilestone_JudgmentSubmitted": {
              "successful_bounty": "bool"
            },
            "BountyMilestone": {
              "_enum": {
                "Created": "BountyMilestone_Created",
                "BountyMaxFundingReached": "BountyMilestone_BountyMaxFundingReached",
                "WorkSubmitted": "BountyMilestone_WorkSubmitted",
                "JudgmentSubmitted": "BountyMilestone_JudgmentSubmitted"
              }
            },
            "Bounty": {
              "creation_params": "BountyCreationParameters",
              "total_funding": "u128",
              "milestone": "BountyMilestone",
              "active_work_entry_count": "u32"
            },
            "CuratorId": "u64",
            "CuratorGroupId": "u64",
            "CuratorGroup": {
              "curators": "BTreeSet<CuratorId>",
              "active": "bool"
            },
            "ContentActor": {
              "_enum": {
                "Curator": "(CuratorGroupId,CuratorId)",
                "Member": "MemberId",
                "Lead": "Null"
              }
            },
            "StorageAssets": {
              "object_creation_list": "Vec<DataObjectCreationParameters>",
              "expected_data_size_fee": "u128"
            },
            "Channel": {
              "owner": "ChannelOwner",
              "num_videos": "u64",
              "is_censored": "bool",
              "reward_account": "Option<GenericAccountId>",
              "collaborators": "BTreeSet<MemberId>",
              "moderators": "BTreeSet<MemberId>",
              "cumulative_payout_earned": "u128"
            },
            "ChannelOwner": {
              "_enum": {
                "Member": "MemberId",
                "Curators": "CuratorGroupId"
              }
            },
            "ChannelCategoryId": "u64",
            "ChannelCategory": {},
            "ChannelCategoryCreationParameters": {
              "meta": "Bytes"
            },
            "ChannelCategoryUpdateParameters": {
              "new_meta": "Bytes"
            },
            "ChannelCreationParameters": {
              "assets": "Option<StorageAssets>",
              "meta": "Option<Bytes>",
              "reward_account": "Option<GenericAccountId>",
              "collaborators": "BTreeSet<MemberId>",
              "moderators": "BTreeSet<MemberId>"
            },
            "ChannelUpdateParameters": {
              "assets_to_upload": "Option<StorageAssets>",
              "new_meta": "Option<Bytes>",
              "reward_account": "Option<Option<GenericAccountId>>",
              "assets_to_remove": "BTreeSet<DataObjectId>",
              "collaborators": "Option<BTreeSet<MemberId>>"
            },
            "Video": {
              "in_channel": "ChannelId",
              "is_censored": "bool",
              "enable_comments": "bool",
              "video_post_id": "Option<VideoPostId>",
              "nft_status": "Option<OwnedNft>"
            },
            "VideoId": "u64",
            "VideoCategoryId": "u64",
            "VideoCategory": {},
            "VideoCategoryCreationParameters": {
              "meta": "Bytes"
            },
            "VideoCategoryUpdateParameters": {
              "new_meta": "Bytes"
            },
            "VideoCreationParameters": {
              "assets": "Option<StorageAssets>",
              "meta": "Option<Bytes>",
              "enable_comments": "bool",
              "auto_issue_nft": "Option<NftIssuanceParameters>"
            },
            "VideoUpdateParameters": {
              "assets_to_upload": "Option<StorageAssets>",
              "new_meta": "Option<Bytes>",
              "assets_to_remove": "BTreeSet<DataObjectId>",
              "enable_comments": "Option<bool>",
              "auto_issue_nft": "Option<NftIssuanceParameters>"
            },
            "MaxNumber": "u32",
            "IsCensored": "bool",
            "VideoPostId": "u64",
            "ReactionId": "u64",
            "VideoPostType": {
              "_enum": {
                "Description": "Null",
                "Comment": "VideoPostId"
              }
            },
            "VideoPost": {
              "author": "ContentActor",
              "bloat_bond": "u128",
              "replies_count": "VideoPostId",
              "post_type": "VideoPostType",
              "video_reference": "VideoId"
            },
            "Side": {
              "_enum": [
                "Left",
                "Right"
              ]
            },
            "ProofElement": {
              "hash": "Hash",
              "side": "Side"
            },
            "VideoPostCreationParameters": {
              "post_type": "VideoPostType",
              "video_reference": "VideoId"
            },
            "VideoPostDeletionParameters": {
              "witness": "Option<Hash>",
              "rationale": "Option<Bytes>"
            },
            "PullPayment": {
              "channel_id": "ChannelId",
              "cumulative_payout_claimed": "u128",
              "reason": "Hash"
            },
            "ModeratorSet": "BTreeSet<MemberId>",
            "Royalty": "Perbill",
            "EnglishAuctionParams": {
              "starting_price": "u128",
              "buy_now_price": "Option<u128>",
              "whitelist": "BTreeSet<MemberId>",
              "starts_at": "Option<u32>",
              "duration": "u32",
              "extension_period": "u32",
              "min_bid_step": "u128"
            },
            "OpenAuctionParams": {
              "starting_price": "u128",
              "buy_now_price": "Option<u128>",
              "starts_at": "Option<u32>",
              "whitelist": "BTreeSet<MemberId>",
              "bid_lock_duration": "u32"
            },
            "EnglishAuction": {
              "starting_price": "u128",
              "buy_now_price": "Option<u128>",
              "whitelist": "BTreeSet<MemberId>",
              "end": "u32",
              "start": "u32",
              "extension_period": "u32",
              "min_bid_step": "u128",
              "top_bid": "Option<EnglishAuctionBid>"
            },
            "OpenAuction": {
              "starting_price": "u128",
              "buy_now_price": "Option<u128>",
              "whitelist": "BTreeSet<MemberId>",
              "bid_lock_duration": "u32",
              "auction_id": "OpenAuctionId",
              "start": "u32"
            },
            "OpenAuctionBid": {
              "amount": "u128",
              "made_at_block": "u32",
              "auction_id": "OpenAuctionId"
            },
            "EnglishAuctionBid": {
              "amount": "u128",
              "bidder_id": "MemberId"
            },
            "TransactionalStatus": {
              "_enum": {
                "Idle": "Null",
                "InitiatedOfferToMember": "(MemberId,Option<u128>)",
                "EnglishAuction": "EnglishAuction",
                "OpenAuction": "OpenAuction",
                "BuyNow": "u128"
              }
            },
            "NftOwner": {
              "_enum": {
                "ChannelOwner": "Null",
                "Member": "MemberId"
              }
            },
            "OwnedNft": {
              "owner": "NftOwner",
              "transactional_status": "TransactionalStatus",
              "creator_royalty": "Option<Royalty>",
              "open_auctions_nonce": "OpenAuctionId"
            },
            "CurrencyOf": "u128",
            "CurrencyAmount": "u128",
            "InitTransactionalStatus": {
              "_enum": {
                "Idle": "Null",
                "BuyNow": "u128",
                "InitiatedOfferToMember": "(MemberId,Option<u128>)",
                "EnglishAuction": "EnglishAuctionParams",
                "OpenAuction": "OpenAuctionParams"
              }
            },
            "NftIssuanceParameters": {
              "royalty": "Option<Royalty>",
              "nft_metadata": "Bytes",
              "non_channel_owner": "Option<MemberId>",
              "init_transactional_status": "InitTransactionalStatus"
            },
            "NftMetadata": "Vec<u8>",
            "OpenAuctionId": "u64",
            "AccountInfo": "AccountInfoWithRefCount",
            "ValidatorPrefs": "ValidatorPrefsWithCommission"
          }
        }
      ]
    },
    "jupiter-prep": {
      "types": [
        {
          "minmax": [
            0,
            2
          ],
          "types": {
            "LookupSource": "MultiAddress",
            "Address": "MultiAddress",
            "AccountInfo": "AccountInfoWithDualRefCount",
            "FullIdentification": "AccountId",
            "AuthorityState": {
              "_enum": [
                "Working",
                "Waiting"
              ]
            },
            "EraIndex": "u32",
            "ActiveEraInfo": {
              "index": "EraIndex",
              "start": "Option<u64>"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "reporters": "Vec<AccountId>"
            }
          }
        },
        {
          "minmax": [
            3,
            null
          ],
          "types": {
            "LookupSource": "MultiAddress",
            "Address": "MultiAddress",
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "AliveContractInfo": {
              "trieId": "TrieId",
              "storageSize": "u32",
              "pairCount": "u32",
              "codeHash": "CodeHash",
              "rentAllowance": "Balance",
              "rentPayed": "Balance",
              "deductBlock": "BlockNumber",
              "lastWrite": "Option<BlockNumber>",
              "_reserved": "Option<Null>"
            },
            "FullIdentification": "AccountId",
            "AuthorityState": {
              "_enum": [
                "Working",
                "Waiting"
              ]
            },
            "EraIndex": "u32",
            "ActiveEraInfo": {
              "index": "EraIndex",
              "start": "Option<u64>"
            },
            "UnappliedSlash": {
              "validator": "AccountId",
              "reporters": "Vec<AccountId>"
            }
          }
        }
      ]
    },
    "jupiter-rococo": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "LookupSource": "MultiAddress",
            "Address": "MultiAddress"
          }
        }
      ]
    },
    "kerria": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "tokens": {
          "queryExistentialDeposit": {
            "description": "Query Existential Deposit for a given currency.",
            "params": [
              {
                "name": "currencyId",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "NumberOrHex",
            "isSubscription": false,
            "jsonrpc": "tokens_queryExistentialDeposit",
            "method": "queryExistentialDeposit",
            "section": "tokens"
          }
        },
        "loans": {
          "getCollateralLiquidity": {
            "description": "Retrieves collateral liquidity for the given user.",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Liquidity, Shortfall, Liquidity, Shortfall)",
            "isSubscription": false,
            "jsonrpc": "loans_getCollateralLiquidity",
            "method": "getCollateralLiquidity",
            "section": "loans"
          },
          "getLiquidationThresholdLiquidity": {
            "description": "Retrieves liquidation threshold liquidity for the given user.",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Liquidity, Shortfall, Liquidity, Shortfall)",
            "isSubscription": false,
            "jsonrpc": "loans_getLiquidationThresholdLiquidity",
            "method": "getLiquidationThresholdLiquidity",
            "section": "loans"
          },
          "getMarketStatus": {
            "description": "Retrieves market status data for a given asset id.",
            "params": [
              {
                "name": "asset_id",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",
            "isSubscription": false,
            "jsonrpc": "loans_getMarketStatus",
            "method": "getMarketStatus",
            "section": "loans"
          }
        },
        "router": {
          "getBestRoute": {
            "description": "Returns the route that results in the largest amount out for amount in",
            "params": [
              {
                "name": "amount",
                "type": "Balance"
              },
              {
                "name": "token_in",
                "type": "CurrencyId"
              },
              {
                "name": "token_out",
                "type": "CurrencyId"
              },
              {
                "name": "reversed",
                "type": "bool"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Vec<CurrencyId>, FixedU128)",
            "isSubscription": false,
            "jsonrpc": "router_getBestRoute",
            "method": "getBestRoute",
            "section": "router"
          }
        }
      },
      "instances": {
        "council": [
          "generalCouncil"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "isActive": "bool",
              "totalDeposited": "Balance",
              "unlockHeight": "BlockNumber",
              "coolDownDuration": "BlockNumber",
              "rewardDuration": "BlockNumber",
              "periodFinish": "BlockNumber",
              "lastUpdateBlock": "BlockNumber",
              "rewardRate": "Balance",
              "rewardPerShareStored": "Balance"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Deposits": {
              "voucherBalance": "Balance",
              "isCollateral": "bool"
            },
            "BorrowSnapshot": {
              "principal": "Balance",
              "borrowIndex": "u128"
            },
            "EarnedSnapshot": {
              "totalEarnedPrior": "Balance",
              "exchangeRatePrior": "u128"
            },
            "JumpModel": {
              "baseRate": "Rate",
              "jumpRate": "Rate",
              "fullRate": "Rate",
              "jumpUtilization": "Ratio"
            },
            "CurveModel": {
              "baseRate": "Rate"
            },
            "InterestRateModel": {
              "_enum": {
                "JumpModel": "JumpModel",
                "CurveModel": "CurveModel"
              }
            },
            "Market": {
              "collateralFactor": "Ratio",
              "liquidationThreshold": "Ratio",
              "reserveFactor": "Ratio",
              "closeFactor": "Ratio",
              "liquidateIncentive": "Rate",
              "liquidateIncentiveReservedFactor": "Ratio",
              "rateModel": "InterestRateModel",
              "state": "MarketState",
              "supplyCap": "Balance",
              "borrowCap": "Balance",
              "ptokenId": "CurrencyId"
            },
            "MarketState": {
              "_enum": [
                "Active",
                "Pending",
                "Supervision"
              ]
            },
            "RewardMarketState": {
              "index": "Balance",
              "block": "BlockNumber"
            },
            "Liquidity": "FixedU128",
            "Shortfall": "FixedU128",
            "ReservableAmount": {
              "total": "Balance",
              "reserved": "Balance"
            },
            "MatchingLedger": {
              "totalStakeAmount": "ReservableAmount",
              "totalUnstakeAmount": "ReservableAmount"
            },
            "UnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "StakingLedger": {
              "stash": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>",
              "claimedRewards": "Vec<EraIndex>"
            },
            "DerivativeIndex": "u16",
            "Pool": {
              "baseAmount": "Balance",
              "quoteAmount": "Balance",
              "baseAmountLast": "Balance",
              "quoteAmountLast": "Balance",
              "lpTokenId": "AssetId",
              "blockTimestampLast": "BlockNumber",
              "price0CumulativeLast": "Balance",
              "price1CumulativeLast": "Balance"
            },
            "Amount": "i128",
            "AmountOf": "Amount",
            "Rate": "FixedU128",
            "Ratio": "Permill",
            "Timestamp": "u64",
            "PriceDetail": "(Price, Timestamp)",
            "CurrencyId": "AssetId",
            "CurrencyIdOf": "CurrencyId",
            "Currency": "CurrencyId",
            "AssetIdOf": "AssetId",
            "OracleKey": "AssetId",
            "BoundedBalance": "BoundedVec<(Balance, BlockNumber), u32>",
            "UserPosition": {
              "depositBalance": "Balance",
              "lockBalanceItems": "BoundedBalance",
              "rewardAmount": "Balance",
              "rewardPerSharePaid": "Balance"
            },
            "Route": "Vec<(AssetId, AssetId)>",
            "VaultPhase": {
              "_enum": [
                "Pending",
                "Contributing",
                "Closed",
                "Failed",
                "Succeeded",
                "Expired"
              ]
            },
            "ContributionStrategy": {
              "_enum": [
                "XCM",
                "XCMPROXY"
              ]
            },
            "ChildStorageKind": {
              "_enum": [
                "Pending",
                "Flying",
                "Contributed"
              ]
            },
            "TrieIndex": "u32",
            "LeasePeriod": "BlockNumber",
            "Vault": {
              "ctoken": "AssetId",
              "phase": "VaultPhase",
              "contributed": "Balance",
              "pending": "Balance",
              "flying": "Balance",
              "contributionStrategy": "ContributionStrategy",
              "cap": "Balance",
              "endBlock": "BlockNumber",
              "trieIndex": "TrieIndex",
              "leaseStart": "LeasePeriod",
              "leaseEnd": "LeasePeriod"
            },
            "XcmWeightFeeMisc": {
              "weight": "Weight",
              "fee": "Balance"
            },
            "XcmCall": {
              "_enum": [
                "Bond",
                "BondExtra",
                "Unbond",
                "Rebond",
                "WithdrawUnbonded",
                "Nominate",
                "Contribute",
                "Withdraw",
                "AddMemo"
              ]
            },
            "BridgeToken": {
              "id": "CurrencyId",
              "external": "bool",
              "fee": "Balance"
            },
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "TAssetBalance": "u128"
          }
        }
      ],
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "khala": {
      "0": {
        "minmax": [
          0,
          10
        ],
        "types": {
          "ChainId": "u8",
          "Address": "MultiAddress",
          "LookupSource": "MultiAddress",
          "DispatchErrorModule": "DispatchErrorModuleU8",
          "Keys": "AccountId",
          "BridgeChainId": "u8",
          "BridgeEvent": {
            "_enum": {
              "FungibleTransfer": "FungibleTransfer",
              "NonFungibleTransfer": "NonFungibleTransfer",
              "GenericTransfer": "GenericTransfer"
            }
          },
          "FungibleTransfer": {
            "destId": "BridgeChainId",
            "nonce": "DepositNonce",
            "resourceId": "ResourceId",
            "amount": "U256",
            "recipient": "Vec<u8>"
          },
          "NonFungibleTransfer": {
            "destId": "BridgeChainId",
            "nonce": "DepositNonce",
            "resourceId": "ResourceId",
            "tokenId": "Vec<u8>",
            "recipient": "Vec<u8>",
            "metadata": "Vec<u8>"
          },
          "GenericTransfer": {
            "destId": "BridgeChainId",
            "nonce": "DepositNonce",
            "resourceId": "ResourceId",
            "metadata": "Vec<u8>"
          },
          "ResourceId": "[u8; 32]",
          "TokenId": "U256",
          "DepositNonce": "u64",
          "ProposalStatus": {
            "_enum": {
              "Initiated": null,
              "Approved": null,
              "Rejected": null
            }
          },
          "ProposalVotes": {
            "votesFor": "Vec<AccountId>",
            "votesAgainst": "Vec<AccountId>",
            "status": "ProposalStatus",
            "expiry": "BlockNumber"
          },
          "AssetInfo": {
            "destId": "BridgeChainId",
            "assetIdentity": "Vec<u8>"
          },
          "ProxyType": {
            "_enum": [
              "Any",
              "NonTransfer",
              "CancelProxy",
              "Governance",
              "Collator",
              "StakePoolManager"
            ]
          },
          "Sr25519PublicKey": "[u8; 32]",
          "MasterPublicKey": "Sr25519PublicKey",
          "WorkerPublicKey": "Sr25519PublicKey",
          "ContractPublicKey": "Sr25519PublicKey",
          "EcdhPublicKey": "[u8; 32]",
          "MessageOrigin": {
            "_enum": {
              "Pallet": "Vec<u8>",
              "Contract": "H256",
              "Worker": "Sr25519PublicKey",
              "AccountId": "H256",
              "MultiLocation": "Vec<u8>",
              "Gatekeeper": null
            }
          },
          "Attestation": {
            "_enum": {
              "SgxIas": "AttestationSgxIas"
            }
          },
          "AttestationSgxIas": {
            "raReport": "Vec<u8>",
            "signature": "Vec<u8>",
            "rawSigningCert": "Vec<u8>"
          },
          "SenderId": "MessageOrigin",
          "Path": "Vec<u8>",
          "Topic": "Path",
          "Message": {
            "sender": "SenderId",
            "destination": "Topic",
            "payload": "Vec<u8>"
          },
          "SignedMessage": {
            "message": "Message",
            "sequence": "u64",
            "signature": "Vec<u8>"
          },
          "WorkerRegistrationInfo": {
            "version": "u32",
            "machineId": "Vec<u8>",
            "pubkey": "WorkerPublicKey",
            "ecdhPubkey": "EcdhPublicKey",
            "genesisBlockHash": "H256",
            "features": "Vec<u32>",
            "operator": "Option<AccountId>"
          },
          "PoolInfo": {
            "pid": "u64",
            "owner": "AccountId",
            "payoutCommission": "Option<Permill>",
            "ownerReward": "Balance",
            "cap": "Option<Balance>",
            "rewardAcc": "u128",
            "totalShares": "Balance",
            "totalStake": "Balance",
            "freeStake": "Balance",
            "releasingStake": "Balance",
            "workers": "Vec<WorkerPublicKey>",
            "withdrawQueue": "Vec<WithdrawInfo>"
          },
          "WithdrawInfo": {
            "user": "AccountId",
            "shares": "Balance",
            "startTime": "u64"
          },
          "WorkerInfo": {
            "pubkey": "WorkerPublicKey",
            "ecdhPubkey": "EcdhPublicKey",
            "runtimeVersion": "u32",
            "lastUpdated": "u64",
            "operator": "Option<AccountId>",
            "confidenceLevel": "u8",
            "initialScore": "Option<u32>",
            "features": "Vec<u32>"
          },
          "MinerInfo": {
            "state": "MinerState",
            "ve": "u128",
            "v": "u128",
            "vUpdatedAt": "u64",
            "benchmark": "Benchmark",
            "coolDownStart": "u64",
            "stats": "MinerStats"
          },
          "Benchmark": {
            "pInit": "u32",
            "pInstant": "u32",
            "iterations": "u64",
            "miningStartTime": "u64",
            "challengeTimeLast": "u64"
          },
          "MinerState": {
            "_enum": {
              "Ready": null,
              "MiningIdle": null,
              "MiningActive": null,
              "MiningUnresponsive": null,
              "MiningCoolingDown": null
            }
          },
          "MinerStats": {
            "totalReward": "Balance"
          },
          "HeartbeatChallenge": {
            "seed": "U256",
            "onlineTarget": "U256"
          },
          "KeyDistribution": {
            "_enum": {
              "MasterKeyDistribution": "DispatchMasterKeyEvent"
            }
          },
          "GatekeeperLaunch": {
            "_enum": {
              "FirstGatekeeper": "NewGatekeeperEvent",
              "MasterPubkeyOnChain": null
            }
          },
          "GatekeeperChange": {
            "_enum": {
              "GatekeeperRegistered": "NewGatekeeperEvent"
            }
          },
          "GatekeeperEvent": {
            "_enum": {
              "NewRandomNumber": "RandomNumberEvent",
              "TokenomicParametersChanged": "TokenomicParameters"
            }
          },
          "NewGatekeeperEvent": {
            "pubkey": "WorkerPublicKey",
            "ecdhPubkey": "EcdhPublicKey"
          },
          "DispatchMasterKeyEvent": {
            "dest": "WorkerPublicKey",
            "ecdhPubkey": "EcdhPublicKey",
            "encryptedMasterKey": "Vec<u8>",
            "iv": "[u8; 12]"
          },
          "RandomNumberEvent": {
            "blockNumber": "u32",
            "randomNumber": "[u8; 32]",
            "lastRandomNumber": "[u8; 32]"
          },
          "TokenomicParameters": {
            "phaRate": "U64F64Bits",
            "rho": "U64F64Bits",
            "budgetPerBlock": "U64F64Bits",
            "vMax": "U64F64Bits",
            "costK": "U64F64Bits",
            "costB": "U64F64Bits",
            "slashRate": "U64F64Bits",
            "treasuryRatio": "U64F64Bits",
            "heartbeatWindow": "u32",
            "rigK": "U64F64Bits",
            "rigB": "U64F64Bits",
            "re": "U64F64Bits",
            "k": "U64F64Bits",
            "kappa": "U64F64Bits"
          },
          "TokenomicParams": "TokenomicParameters",
          "U64F64Bits": "u128",
          "UserStakeInfo": {
            "user": "AccountId",
            "locked": "Balance",
            "shares": "Balance",
            "availableRewards": "Balance",
            "rewardDebt": "Balance"
          }
        }
      },
      "1": {
        "minmax": [
          11,
          null
        ],
        "types": {
          "Address": "MultiAddress",
          "LookupSource": "MultiAddress",
          "DispatchErrorModule": "DispatchErrorModuleU8",
          "Keys": "AccountId",
          "BridgeChainId": "u8",
          "BridgeEvent": {
            "_enum": {
              "FungibleTransfer": "FungibleTransfer",
              "NonFungibleTransfer": "NonFungibleTransfer",
              "GenericTransfer": "GenericTransfer"
            }
          },
          "FungibleTransfer": {
            "destId": "BridgeChainId",
            "nonce": "DepositNonce",
            "resourceId": "ResourceId",
            "amount": "U256",
            "recipient": "Vec<u8>"
          },
          "NonFungibleTransfer": {
            "destId": "BridgeChainId",
            "nonce": "DepositNonce",
            "resourceId": "ResourceId",
            "tokenId": "Vec<u8>",
            "recipient": "Vec<u8>",
            "metadata": "Vec<u8>"
          },
          "GenericTransfer": {
            "destId": "BridgeChainId",
            "nonce": "DepositNonce",
            "resourceId": "ResourceId",
            "metadata": "Vec<u8>"
          },
          "ResourceId": "[u8; 32]",
          "TokenId": "U256",
          "DepositNonce": "u64",
          "ProposalStatus": {
            "_enum": {
              "Initiated": null,
              "Approved": null,
              "Rejected": null
            }
          },
          "ProposalVotes": {
            "votesFor": "Vec<AccountId>",
            "votesAgainst": "Vec<AccountId>",
            "status": "ProposalStatus",
            "expiry": "BlockNumber"
          },
          "AssetInfo": {
            "destId": "BridgeChainId",
            "assetIdentity": "Vec<u8>"
          },
          "ProxyType": {
            "_enum": [
              "Any",
              "NonTransfer",
              "CancelProxy",
              "Governance",
              "Collator",
              "StakePoolManager"
            ]
          },
          "Sr25519PublicKey": "[u8; 32]",
          "MasterPublicKey": "Sr25519PublicKey",
          "WorkerPublicKey": "Sr25519PublicKey",
          "ContractPublicKey": "Sr25519PublicKey",
          "EcdhPublicKey": "[u8; 32]",
          "MessageOrigin": {
            "_enum": {
              "Pallet": "Vec<u8>",
              "Contract": "H256",
              "Worker": "Sr25519PublicKey",
              "AccountId": "H256",
              "MultiLocation": "Vec<u8>",
              "Gatekeeper": null
            }
          },
          "Attestation": {
            "_enum": {
              "SgxIas": "AttestationSgxIas"
            }
          },
          "AttestationSgxIas": {
            "raReport": "Vec<u8>",
            "signature": "Vec<u8>",
            "rawSigningCert": "Vec<u8>"
          },
          "SenderId": "MessageOrigin",
          "Path": "Vec<u8>",
          "Topic": "Path",
          "Message": {
            "sender": "SenderId",
            "destination": "Topic",
            "payload": "Vec<u8>"
          },
          "SignedMessage": {
            "message": "Message",
            "sequence": "u64",
            "signature": "Vec<u8>"
          },
          "WorkerRegistrationInfo": {
            "version": "u32",
            "machineId": "Vec<u8>",
            "pubkey": "WorkerPublicKey",
            "ecdhPubkey": "EcdhPublicKey",
            "genesisBlockHash": "H256",
            "features": "Vec<u32>",
            "operator": "Option<AccountId>"
          },
          "PoolInfo": {
            "pid": "u64",
            "owner": "AccountId",
            "payoutCommission": "Option<Permill>",
            "ownerReward": "Balance",
            "cap": "Option<Balance>",
            "rewardAcc": "u128",
            "totalShares": "Balance",
            "totalStake": "Balance",
            "freeStake": "Balance",
            "releasingStake": "Balance",
            "workers": "Vec<WorkerPublicKey>",
            "withdrawQueue": "Vec<WithdrawInfo>"
          },
          "WithdrawInfo": {
            "user": "AccountId",
            "shares": "Balance",
            "startTime": "u64"
          },
          "WorkerInfo": {
            "pubkey": "WorkerPublicKey",
            "ecdhPubkey": "EcdhPublicKey",
            "runtimeVersion": "u32",
            "lastUpdated": "u64",
            "operator": "Option<AccountId>",
            "confidenceLevel": "u8",
            "initialScore": "Option<u32>",
            "features": "Vec<u32>"
          },
          "MinerInfo": {
            "state": "MinerState",
            "ve": "u128",
            "v": "u128",
            "vUpdatedAt": "u64",
            "benchmark": "Benchmark",
            "coolDownStart": "u64",
            "stats": "MinerStats"
          },
          "Benchmark": {
            "pInit": "u32",
            "pInstant": "u32",
            "iterations": "u64",
            "miningStartTime": "u64",
            "challengeTimeLast": "u64"
          },
          "MinerState": {
            "_enum": {
              "Ready": null,
              "MiningIdle": null,
              "MiningActive": null,
              "MiningUnresponsive": null,
              "MiningCoolingDown": null
            }
          },
          "MinerStats": {
            "totalReward": "Balance"
          },
          "HeartbeatChallenge": {
            "seed": "U256",
            "onlineTarget": "U256"
          },
          "KeyDistribution": {
            "_enum": {
              "MasterKeyDistribution": "DispatchMasterKeyEvent"
            }
          },
          "GatekeeperLaunch": {
            "_enum": {
              "FirstGatekeeper": "NewGatekeeperEvent",
              "MasterPubkeyOnChain": null
            }
          },
          "GatekeeperChange": {
            "_enum": {
              "GatekeeperRegistered": "NewGatekeeperEvent"
            }
          },
          "GatekeeperEvent": {
            "_enum": {
              "NewRandomNumber": "RandomNumberEvent",
              "TokenomicParametersChanged": "TokenomicParameters"
            }
          },
          "NewGatekeeperEvent": {
            "pubkey": "WorkerPublicKey",
            "ecdhPubkey": "EcdhPublicKey"
          },
          "DispatchMasterKeyEvent": {
            "dest": "WorkerPublicKey",
            "ecdhPubkey": "EcdhPublicKey",
            "encryptedMasterKey": "Vec<u8>",
            "iv": "[u8; 12]"
          },
          "RandomNumberEvent": {
            "blockNumber": "u32",
            "randomNumber": "[u8; 32]",
            "lastRandomNumber": "[u8; 32]"
          },
          "TokenomicParameters": {
            "phaRate": "U64F64Bits",
            "rho": "U64F64Bits",
            "budgetPerBlock": "U64F64Bits",
            "vMax": "U64F64Bits",
            "costK": "U64F64Bits",
            "costB": "U64F64Bits",
            "slashRate": "U64F64Bits",
            "treasuryRatio": "U64F64Bits",
            "heartbeatWindow": "u32",
            "rigK": "U64F64Bits",
            "rigB": "U64F64Bits",
            "re": "U64F64Bits",
            "k": "U64F64Bits",
            "kappa": "U64F64Bits"
          },
          "TokenomicParams": "TokenomicParameters",
          "U64F64Bits": "u128",
          "UserStakeInfo": {
            "user": "AccountId",
            "locked": "Balance",
            "shares": "Balance",
            "availableRewards": "Balance",
            "rewardDebt": "Balance"
          }
        }
      }
    },
    "kilt-parachain": {
      "types": [
        {
          "minmax": [
            0,
            8
          ],
          "types": {
            "AccountInfo": "AccountInfoWithDualRefCount",
            "Address": "AccountId",
            "Attestation": {
              "ctypeHash": "Hash",
              "attester": "AccountId",
              "delegationId": "Option<DelegationNodeId>",
              "revoked": "bool"
            },
            "Balance": "u128",
            "DelegationNode": {
              "rootId": "DelegationNodeId",
              "parent": "Option<DelegationNodeId>",
              "owner": "AccountId",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "DelegationNodeId": "Hash",
            "DelegationRoot": {
              "ctypeHash": "Hash",
              "owner": "AccountId",
              "revoked": "bool"
            },
            "DidRecord": {
              "signKey": "Hash",
              "boxKey": "Hash",
              "docRef": "Option<Vec<u8>>"
            },
            "Index": "u64",
            "LookupSource": "AccountId",
            "Permissions": "u32",
            "PublicBoxKey": "Hash",
            "PublicSigningKey": "Hash",
            "Signature": "MultiSignature",
            "XCurrencyId": {
              "chainId": "ChainId",
              "currencyId": "Vec<u8>"
            },
            "ChainId": {
              "_enum": {
                "RelayChain": "Null",
                "ParaChain": "ParaId"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "CurrencyId": {
              "_enum": {
                "DOT": 0,
                "KSM": 1,
                "KILT": 2
              }
            },
            "XcmError": {
              "_enum": {
                "Undefined": 0,
                "Unimplemented": 1,
                "UnhandledXcmVersion": 2,
                "UnhandledXcmMessage": 3,
                "UnhandledEffect": 4,
                "EscalationOfPrivilege": 5,
                "UntrustedReserveLocation": 6,
                "UntrustedTeleportLocation": 7,
                "DestinationBufferOverflow": 8,
                "CannotReachDestination": 9,
                "MultiLocationFull": 10,
                "FailedToDecode": 11,
                "BadOrigin": 12,
                "ExceedsMaxMessageSize": 13,
                "FailedToTransactAsset": 14
              }
            },
            "ReferendumInfo": {
              "_enum": {
                "Ongoing": "ReferendumStatus",
                "Finished": "ReferendumInfoFinished"
              }
            }
          }
        },
        {
          "minmax": [
            9,
            9
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "DidIdentifierOf",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "DidIdentifierOf",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "DidIdentifierOf",
            "DelegationSignature": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "rootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "owner": "DelegatorIdOf",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            }
          }
        },
        {
          "minmax": [
            10,
            11
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "rootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "owner": "DelegatorIdOf",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            }
          }
        },
        {
          "minmax": [
            12,
            16
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "rootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "owner": "DelegatorIdOf",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            }
          }
        },
        {
          "minmax": [
            17,
            17
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BTreeSet<DelegationNodeIdOf>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            }
          }
        },
        {
          "minmax": [
            18,
            18
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BTreeSet<DelegationNodeIdOf>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateDetails": {
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>"
            }
          }
        },
        {
          "minmax": [
            19,
            19
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BTreeSet<DelegationNodeIdOf>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "DidUpdateDetails": {
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "delegationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "serviceEndpointsUpdate": "DidFragmentUpdateAction_ServiceEndpoints"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "Vec<Url>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "ApplicationJson",
                "ApplicationJsonLd"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            }
          }
        },
        {
          "minmax": [
            20,
            20
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "BoundedVec<Stake, MaxCollatorCandidates>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "OrderedSet<Stake, MaxCollatorsPerDelegator>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "OrderedSet<Stake, MaxDelegatorsPerCollator>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "DidUpdateDetails": {
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "attestationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "delegationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "publicKeysToRemove": "DidVerificationKeysToRevoke",
              "serviceEndpointsUpdate": "DidFragmentUpdateAction_ServiceEndpoints"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "ApplicationJson",
                "ApplicationJsonLd"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxCollatorCandidates": "u32",
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32"
          }
        },
        {
          "minmax": [
            21,
            22
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "application/json",
                "application/ld+json"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxCollatorCandidates": "u32",
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32"
          }
        },
        {
          "minmax": [
            23,
            24
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "application/json",
                "application/ld+json"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4",
                "V5"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32",
            "MinCollators": "u32",
            "MaxTopCandidates": "u32",
            "Candidate": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "status": "CandidateStatus"
            },
            "CandidateStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            }
          }
        },
        {
          "minmax": [
            25,
            2699
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf",
              "submitter": "AccountId"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "application/json",
                "application/ld+json"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4",
                "V5"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32",
            "MinCollators": "u32",
            "MaxTopCandidates": "u32",
            "Candidate": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "status": "CandidateStatus"
            },
            "CandidateStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            }
          }
        },
        {
          "minmax": [
            2700,
            10710
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool",
              "deposit": "Deposit"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails",
              "deposit": "Deposit"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "KeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxPublicKeysPerDidExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "DidAlreadyDeleted": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce",
                "TransactionExpired"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "lastTxCounter": "u64",
              "deposit": "Deposit"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf",
              "blockNumber": "BlockNumber",
              "submitter": "AccountId"
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "submitter": "AccountId",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2",
                "V3"
              ]
            },
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4",
                "V5"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MinCollators": "u32",
            "MaxTopCandidates": "u32",
            "Candidate": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "status": "CandidateStatus"
            },
            "CandidateStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "Deposit": {
              "owner": "AccountId",
              "amount": "Balance"
            }
          }
        },
        {
          "minmax": [
            10720,
            10899
          ],
          "types": {
            "RawDidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<Text>",
              "serviceEndpoints": "Vec<RawServiceEndpoints>",
              "details": "RawDidDetails"
            },
            "RawServiceEndpoints": {
              "id": "Text",
              "serviceTypes": "Vec<Text>",
              "urls": "Vec<Text>"
            },
            "RawDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, DidDidDetailsDidPublicKeyDetails<BlockNumber>>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "DidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<String>",
              "serviceEndpoints": "Vec<RpcServiceEndpoint>",
              "details": "RpcDidDetails"
            },
            "RpcServiceEndpoint": {
              "id": "String",
              "serviceTypes": "Vec<String>",
              "urls": "Vec<String>"
            },
            "RpcDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, RpcPublicKeyDetails>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "RpcPublicKeyDetails": {
              "key": "RpcDidPublicKey",
              "blockNumber": "BlockNumber"
            },
            "RpcDidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "RpcDidVerificationKey",
                "PublicEncryptionKey": "RpcDidEncryptionKey"
              }
            },
            "RpcDidVerificationKey": {
              "_enum": {
                "Ed25519": "AccountId32",
                "Sr25519": "AccountId32",
                "Ecdsa": "AccountId33"
              }
            },
            "RpcDidEncryptionKey": {
              "_enum": {
                "X25519": "AccountId32"
              }
            },
            "StakingRates": {
              "collatorStakingRate": "Perquintill",
              "collatorRewardRate": "Perquintill",
              "delegatorStakingRate": "Perquintill",
              "delegatorRewardRate": "Perquintill"
            }
          }
        },
        {
          "minmax": [
            10900,
            null
          ],
          "types": {
            "RawDidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<Text>",
              "serviceEndpoints": "Vec<RawServiceEndpoints>",
              "details": "RawDidDetails"
            },
            "RawServiceEndpoints": {
              "id": "Text",
              "serviceTypes": "Vec<Text>",
              "urls": "Vec<Text>"
            },
            "RawDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, DidDidDetailsDidPublicKeyDetails<BlockNumber>>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "DidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<String>",
              "serviceEndpoints": "Vec<RpcServiceEndpoint>",
              "details": "RpcDidDetails"
            },
            "RpcServiceEndpoint": {
              "id": "String",
              "serviceTypes": "Vec<String>",
              "urls": "Vec<String>"
            },
            "RpcDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, RpcPublicKeyDetails>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "RpcPublicKeyDetails": {
              "key": "RpcDidPublicKey",
              "blockNumber": "BlockNumber"
            },
            "RpcDidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "RpcDidVerificationKey",
                "PublicEncryptionKey": "RpcDidEncryptionKey"
              }
            },
            "RpcDidVerificationKey": {
              "_enum": {
                "Ed25519": "AccountId32",
                "Sr25519": "AccountId32",
                "Ecdsa": "AccountId33"
              }
            },
            "RpcDidEncryptionKey": {
              "_enum": {
                "X25519": "AccountId32"
              }
            },
            "StakingRates": {
              "collatorStakingRate": "Perquintill",
              "collatorRewardRate": "Perquintill",
              "delegatorStakingRate": "Perquintill",
              "delegatorRewardRate": "Perquintill"
            }
          }
        }
      ],
      "runtime": {
        "DidApi": [
          {
            "methods": {
              "query_did_by_w3n": {
                "description": "Return the information relative to the owner of the provided web3name, if any.",
                "params": [
                  {
                    "name": "name",
                    "type": "Text"
                  }
                ],
                "type": "Option<RawDidLinkedInfo<AccountId32, AccountId32, AccountId32, Balance, Key, BlockNumber>>"
              },
              "query_did_by_account_id": {
                "description": "Return the information relative to the DID to which the provided account is linked, if any.",
                "params": [
                  {
                    "name": "account",
                    "type": "AccountId32"
                  }
                ],
                "type": "Option<RawDidLinkedInfo<AccountId32, AccountId32, AccountId32, Balance, Key, BlockNumber>>"
              },
              "query_did": {
                "description": "Return the information relative to the owner of the provided DID, if present.",
                "params": [
                  {
                    "name": "did",
                    "type": "AccountId32"
                  }
                ],
                "type": "Option<RawDidLinkedInfo<AccountId32, AccountId32, AccountId32, Balance, Key, BlockNumber>>"
              }
            },
            "version": 1
          }
        ],
        "ParachainStakingApi": [
          {
            "methods": {
              "get_staking_rates": {
                "description": "Calculate the current staking and reward rates for collators and delegators",
                "params": [],
                "type": "StakingRates"
              },
              "get_unclaimed_staking_rewards": {
                "description": "Calculate the claimable staking rewards for a given account address",
                "params": [
                  {
                    "name": "account",
                    "type": "AccountId32"
                  }
                ],
                "type": "Balance"
              }
            },
            "version": 1
          }
        ]
      },
      "rpc": {
        "did": {
          "query": {
            "description": "Return the DID information linked to the provided DID identifier, if found.",
            "params": [
              {
                "name": "did",
                "type": "AccountId32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<DidLinkedInfo>"
          },
          "queryByWeb3Name": {
            "description": "Return the DID information linked to the provided web3name, if found.",
            "params": [
              {
                "name": "name",
                "type": "String"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<DidLinkedInfo>"
          },
          "queryByAccount": {
            "description": "Return the DID information linked to the provided account, if found.",
            "params": [
              {
                "name": "account",
                "type": "AccountId32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<DidLinkedInfo>"
          }
        }
      }
    },
    "kilt-spiritnet": {
      "types": [
        {
          "minmax": [
            0,
            8
          ],
          "types": {
            "AccountInfo": "AccountInfoWithDualRefCount",
            "Address": "AccountId",
            "Attestation": {
              "ctypeHash": "Hash",
              "attester": "AccountId",
              "delegationId": "Option<DelegationNodeId>",
              "revoked": "bool"
            },
            "Balance": "u128",
            "DelegationNode": {
              "rootId": "DelegationNodeId",
              "parent": "Option<DelegationNodeId>",
              "owner": "AccountId",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "DelegationNodeId": "Hash",
            "DelegationRoot": {
              "ctypeHash": "Hash",
              "owner": "AccountId",
              "revoked": "bool"
            },
            "DidRecord": {
              "signKey": "Hash",
              "boxKey": "Hash",
              "docRef": "Option<Vec<u8>>"
            },
            "Index": "u64",
            "LookupSource": "AccountId",
            "Permissions": "u32",
            "PublicBoxKey": "Hash",
            "PublicSigningKey": "Hash",
            "Signature": "MultiSignature",
            "XCurrencyId": {
              "chainId": "ChainId",
              "currencyId": "Vec<u8>"
            },
            "ChainId": {
              "_enum": {
                "RelayChain": "Null",
                "ParaChain": "ParaId"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "CurrencyId": {
              "_enum": {
                "DOT": 0,
                "KSM": 1,
                "KILT": 2
              }
            },
            "XcmError": {
              "_enum": {
                "Undefined": 0,
                "Unimplemented": 1,
                "UnhandledXcmVersion": 2,
                "UnhandledXcmMessage": 3,
                "UnhandledEffect": 4,
                "EscalationOfPrivilege": 5,
                "UntrustedReserveLocation": 6,
                "UntrustedTeleportLocation": 7,
                "DestinationBufferOverflow": 8,
                "CannotReachDestination": 9,
                "MultiLocationFull": 10,
                "FailedToDecode": 11,
                "BadOrigin": 12,
                "ExceedsMaxMessageSize": 13,
                "FailedToTransactAsset": 14
              }
            },
            "ReferendumInfo": {
              "_enum": {
                "Ongoing": "ReferendumStatus",
                "Finished": "ReferendumInfoFinished"
              }
            }
          }
        },
        {
          "minmax": [
            9,
            9
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "DidIdentifierOf",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "DidIdentifierOf",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "DidIdentifierOf",
            "DelegationSignature": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "rootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "owner": "DelegatorIdOf",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            }
          }
        },
        {
          "minmax": [
            10,
            11
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "rootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "owner": "DelegatorIdOf",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            }
          }
        },
        {
          "minmax": [
            12,
            16
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "rootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "owner": "DelegatorIdOf",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            }
          }
        },
        {
          "minmax": [
            17,
            17
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BTreeSet<DelegationNodeIdOf>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            }
          }
        },
        {
          "minmax": [
            18,
            18
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BTreeSet<DelegationNodeIdOf>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateDetails": {
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>"
            }
          }
        },
        {
          "minmax": [
            19,
            19
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BTreeSet<DelegationNodeIdOf>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "DidUpdateDetails": {
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "delegationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "serviceEndpointsUpdate": "DidFragmentUpdateAction_ServiceEndpoints"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "Vec<Url>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "ApplicationJson",
                "ApplicationJsonLd"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            }
          }
        },
        {
          "minmax": [
            20,
            20
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "BoundedVec<Stake, MaxCollatorCandidates>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "OrderedSet<Stake, MaxCollatorsPerDelegator>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "OrderedSet<Stake, MaxDelegatorsPerCollator>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "DidUpdateDetails": {
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "attestationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "delegationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "publicKeysToRemove": "DidVerificationKeysToRevoke",
              "serviceEndpointsUpdate": "DidFragmentUpdateAction_ServiceEndpoints"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "ApplicationJson",
                "ApplicationJsonLd"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxCollatorCandidates": "u32",
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32"
          }
        },
        {
          "minmax": [
            21,
            22
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "application/json",
                "application/ld+json"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxCollatorCandidates": "u32",
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32"
          }
        },
        {
          "minmax": [
            23,
            24
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "application/json",
                "application/ld+json"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4",
                "V5"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32",
            "MinCollators": "u32",
            "MaxTopCandidates": "u32",
            "Candidate": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "status": "CandidateStatus"
            },
            "CandidateStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            }
          }
        },
        {
          "minmax": [
            25,
            2699
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf",
              "submitter": "AccountId"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "application/json",
                "application/ld+json"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4",
                "V5"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32",
            "MinCollators": "u32",
            "MaxTopCandidates": "u32",
            "Candidate": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "status": "CandidateStatus"
            },
            "CandidateStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            }
          }
        },
        {
          "minmax": [
            2700,
            10710
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool",
              "deposit": "Deposit"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails",
              "deposit": "Deposit"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "KeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxPublicKeysPerDidExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "DidAlreadyDeleted": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce",
                "TransactionExpired"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "lastTxCounter": "u64",
              "deposit": "Deposit"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf",
              "blockNumber": "BlockNumber",
              "submitter": "AccountId"
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "submitter": "AccountId",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2",
                "V3"
              ]
            },
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4",
                "V5"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MinCollators": "u32",
            "MaxTopCandidates": "u32",
            "Candidate": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "status": "CandidateStatus"
            },
            "CandidateStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "Deposit": {
              "owner": "AccountId",
              "amount": "Balance"
            }
          }
        },
        {
          "minmax": [
            10720,
            10899
          ],
          "types": {
            "RawDidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<Text>",
              "serviceEndpoints": "Vec<RawServiceEndpoints>",
              "details": "RawDidDetails"
            },
            "RawServiceEndpoints": {
              "id": "Text",
              "serviceTypes": "Vec<Text>",
              "urls": "Vec<Text>"
            },
            "RawDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, DidDidDetailsDidPublicKeyDetails<BlockNumber>>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "DidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<String>",
              "serviceEndpoints": "Vec<RpcServiceEndpoint>",
              "details": "RpcDidDetails"
            },
            "RpcServiceEndpoint": {
              "id": "String",
              "serviceTypes": "Vec<String>",
              "urls": "Vec<String>"
            },
            "RpcDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, RpcPublicKeyDetails>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "RpcPublicKeyDetails": {
              "key": "RpcDidPublicKey",
              "blockNumber": "BlockNumber"
            },
            "RpcDidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "RpcDidVerificationKey",
                "PublicEncryptionKey": "RpcDidEncryptionKey"
              }
            },
            "RpcDidVerificationKey": {
              "_enum": {
                "Ed25519": "AccountId32",
                "Sr25519": "AccountId32",
                "Ecdsa": "AccountId33"
              }
            },
            "RpcDidEncryptionKey": {
              "_enum": {
                "X25519": "AccountId32"
              }
            },
            "StakingRates": {
              "collatorStakingRate": "Perquintill",
              "collatorRewardRate": "Perquintill",
              "delegatorStakingRate": "Perquintill",
              "delegatorRewardRate": "Perquintill"
            }
          }
        },
        {
          "minmax": [
            10900,
            null
          ],
          "types": {
            "RawDidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<Text>",
              "serviceEndpoints": "Vec<RawServiceEndpoints>",
              "details": "RawDidDetails"
            },
            "RawServiceEndpoints": {
              "id": "Text",
              "serviceTypes": "Vec<Text>",
              "urls": "Vec<Text>"
            },
            "RawDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, DidDidDetailsDidPublicKeyDetails<BlockNumber>>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "DidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<String>",
              "serviceEndpoints": "Vec<RpcServiceEndpoint>",
              "details": "RpcDidDetails"
            },
            "RpcServiceEndpoint": {
              "id": "String",
              "serviceTypes": "Vec<String>",
              "urls": "Vec<String>"
            },
            "RpcDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, RpcPublicKeyDetails>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "RpcPublicKeyDetails": {
              "key": "RpcDidPublicKey",
              "blockNumber": "BlockNumber"
            },
            "RpcDidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "RpcDidVerificationKey",
                "PublicEncryptionKey": "RpcDidEncryptionKey"
              }
            },
            "RpcDidVerificationKey": {
              "_enum": {
                "Ed25519": "AccountId32",
                "Sr25519": "AccountId32",
                "Ecdsa": "AccountId33"
              }
            },
            "RpcDidEncryptionKey": {
              "_enum": {
                "X25519": "AccountId32"
              }
            },
            "StakingRates": {
              "collatorStakingRate": "Perquintill",
              "collatorRewardRate": "Perquintill",
              "delegatorStakingRate": "Perquintill",
              "delegatorRewardRate": "Perquintill"
            }
          }
        }
      ],
      "runtime": {
        "DidApi": [
          {
            "methods": {
              "query_did_by_w3n": {
                "description": "Return the information relative to the owner of the provided web3name, if any.",
                "params": [
                  {
                    "name": "name",
                    "type": "Text"
                  }
                ],
                "type": "Option<RawDidLinkedInfo<AccountId32, AccountId32, AccountId32, Balance, Key, BlockNumber>>"
              },
              "query_did_by_account_id": {
                "description": "Return the information relative to the DID to which the provided account is linked, if any.",
                "params": [
                  {
                    "name": "account",
                    "type": "AccountId32"
                  }
                ],
                "type": "Option<RawDidLinkedInfo<AccountId32, AccountId32, AccountId32, Balance, Key, BlockNumber>>"
              },
              "query_did": {
                "description": "Return the information relative to the owner of the provided DID, if present.",
                "params": [
                  {
                    "name": "did",
                    "type": "AccountId32"
                  }
                ],
                "type": "Option<RawDidLinkedInfo<AccountId32, AccountId32, AccountId32, Balance, Key, BlockNumber>>"
              }
            },
            "version": 1
          }
        ],
        "ParachainStakingApi": [
          {
            "methods": {
              "get_staking_rates": {
                "description": "Calculate the current staking and reward rates for collators and delegators",
                "params": [],
                "type": "StakingRates"
              },
              "get_unclaimed_staking_rewards": {
                "description": "Calculate the claimable staking rewards for a given account address",
                "params": [
                  {
                    "name": "account",
                    "type": "AccountId32"
                  }
                ],
                "type": "Balance"
              }
            },
            "version": 1
          }
        ]
      },
      "rpc": {
        "did": {
          "query": {
            "description": "Return the DID information linked to the provided DID identifier, if found.",
            "params": [
              {
                "name": "did",
                "type": "AccountId32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<DidLinkedInfo>"
          },
          "queryByWeb3Name": {
            "description": "Return the DID information linked to the provided web3name, if found.",
            "params": [
              {
                "name": "name",
                "type": "String"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<DidLinkedInfo>"
          },
          "queryByAccount": {
            "description": "Return the DID information linked to the provided account, if found.",
            "params": [
              {
                "name": "account",
                "type": "AccountId32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<DidLinkedInfo>"
          }
        }
      }
    },
    "kintsugi-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "BalanceWrapper": {
              "amount": "String"
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "ForeignAsset": "ForeignAssetId"
              }
            },
            "InterbtcPrimitivesCurrencyId": {
              "_enum": {
                "Token": "InterbtcPrimitivesTokenSymbol",
                "ForeignAsset": "InterbtcForeignAssetId"
              }
            },
            "InterbtcForeignAssetId": "u32",
            "ForeignAssetId": "u32",
            "FundAccountJsonRpcRequest": {
              "account_id": "AccountId",
              "currency_id": "InterbtcPrimitivesCurrencyId"
            },
            "H256Le": "H256",
            "SignedFixedPoint": "FixedU128",
            "TokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "InterbtcPrimitivesTokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "UnsignedFixedPoint": "FixedU128",
            "VaultCurrencyPair": {
              "collateral": "CurrencyId",
              "wrapped": "CurrencyId"
            },
            "VaultId": {
              "account_id": "AccountId",
              "currencies": "VaultCurrencyPair"
            }
          }
        }
      ],
      "rpc": {
        "btcRelay": {
          "verifyBlockHeaderInclusion": {
            "description": "Verify that the block with the given hash is included",
            "params": [
              {
                "name": "block_hash",
                "type": "H256Le"
              }
            ],
            "type": "void"
          }
        },
        "escrow": {
          "balanceAt": {
            "description": "Get a given user's escrowed balance",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          },
          "totalSupply": {
            "description": "Get the total voting supply in the system",
            "params": [
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "issue": {
          "getIssueRequests": {
            "description": "Get all issue request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultIssueRequests": {
            "description": "Get all issue request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "oracle": {
          "collateralToWrapped": {
            "description": "Collateral to Wrapped exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "wrappedToCollateral": {
            "description": "Wrapped to Collateral exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "redeem": {
          "getRedeemRequests": {
            "description": "Get all redeem request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultRedeemRequests": {
            "description": "Get all redeem request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "refund": {
          "getRefundRequests": {
            "description": "Get all refund request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getRefundRequestsByIssueId": {
            "description": "Get all refund request IDs for a particular issue ID",
            "params": [
              {
                "name": "issue_id",
                "type": "H256"
              }
            ],
            "type": "H256"
          },
          "getVaultRefundRequests": {
            "description": "Get all refund request IDs for a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "replace": {
          "getNewVaultReplaceRequests": {
            "description": "Get all replace request IDs to a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getOldVaultReplaceRequests": {
            "description": "Get all replace request IDs from a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "reward": {
          "computeEscrowReward": {
            "description": "Get a given user's rewards due",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "computeVaultReward": {
            "description": "Get a given vault's rewards due",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "vaultRegistry": {
          "getCollateralizationFromVault": {
            "description": "Returns the collateralization of a specific vault",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getCollateralizationFromVaultAndCollateral": {
            "description": "Returns the collateralization of a specific vault and collateral",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "collateral",
                "type": "BalanceWrapper"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getIssueableTokensFromVault": {
            "description": "Get the amount of tokens a vault can issue",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getPremiumRedeemVaults": {
            "description": "Get all vaults below the premium redeem threshold.",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getRequiredCollateralForVault": {
            "description": "Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getRequiredCollateralForWrapped": {
            "description": "Get the amount of collateral required to issue an amount of InterBTC",
            "params": [
              {
                "name": "amount_btc",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultCollateral": {
            "description": "Get the vault's collateral (excluding nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultTotalCollateral": {
            "description": "Get the vault's collateral (including nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultsByAccountId": {
            "description": "Get all vaults that are registered using the given account _id",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<VaultId>"
          },
          "getVaultsWithIssuableTokens": {
            "description": "Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getVaultsWithRedeemableTokens": {
            "description": "Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          }
        }
      },
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      },
      "instances": {
        "balances": [
          "ksm",
          "kbtc",
          "kint",
          "dot",
          "ibtc",
          "intr"
        ]
      }
    },
    "konomi": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "kpron": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "kulupu": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "CurvePoint": {
              "start": "BlockNumber",
              "reward": "Balance",
              "taxation": "Perbill"
            },
            "Difficulty": "U256",
            "DifficultyAndTimestamp": {
              "difficulty": "Difficulty",
              "timestamp": "Moment"
            },
            "Era": {
              "genesisBlockHash": "H256",
              "finalBlockHash": "H256",
              "finalStateRoot": "H256"
            }
          }
        },
        {
          "minmax": [
            13,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress"
          }
        },
        {
          "minmax": [
            17,
            null
          ],
          "types": {
            "CampaignIdentifier": "[u8; 4]"
          }
        },
        {
          "minmax": [
            24,
            null
          ],
          "types": {
            "HashedProof": "[u8; 32]",
            "PendingSwap": {
              "source": "AccountId",
              "action": "SwapAction",
              "endBlock": "BlockNumber"
            },
            "SwapAction": {
              "value": "Balance"
            }
          }
        }
      ]
    },
    "kusari": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "EvmAddress": "H160",
            "EthereumTxHash": "H256",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "Transaction": {
              "nonce": "U256",
              "action": "String",
              "gas_price": "u64",
              "gas_limit": "u64",
              "value": "U256",
              "input": "Vec<u8>",
              "signature": "Signature"
            },
            "Signature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "ClassId": "u64",
            "TokenId": "u64",
            "ClassData": "Vec<u8>",
            "TokenData": "Vec<u8>",
            "ReportReason": {
              "_enum": [
                "None",
                "Illigal",
                "Plagiarism",
                "Duplicate",
                "Reported"
              ]
            },
            "ClassInfoOf": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "class_data": "ClassData"
            },
            "ExtendedInfo": {
              "display_flag": "bool",
              "report": "ReportReason",
              "frozen": "bool"
            },
            "TokenInfoOf": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "class_data": "ClassData"
            },
            "bridge::ChainId": "u8",
            "ChainId": "u8",
            "ResourceId": "[u8; 32]",
            "DepositNonce": "u64",
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "enum"
            }
          }
        }
      ]
    },
    "kylin": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "DataRequest": {
              "para_id": "Option<ParaId>",
              "account_id": "Option<AccountId>",
              "requested_block_number": "BlockNumber",
              "processed_block_number": "Option<BlockNumber>",
              "requested_timestamp": "u128",
              "processed_timestamp": "Option<u128>",
              "payload": "Text",
              "feed_name": "Text",
              "is_query": "bool",
              "url": "Option<Text>"
            }
          }
        }
      ]
    },
    "laminar": {
      "types": [
        {
          "minmax": [
            0,
            299
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "Share": "u128",
            "ChainId": {
              "_enum": {
                "RelayChain": "Null",
                "ParaChain": "ParaId"
              }
            },
            "XCurrencyId": {
              "chainId": "ChainId",
              "currencyId": "Vec<u8>"
            },
            "OracleValue": "Price",
            "MarginPoolState": {
              "enp": "FixedI128",
              "ell": "FixedI128",
              "required_deposit": "FixedI128"
            },
            "MarginTraderState": {
              "equity": "FixedI128",
              "margin_held": "FixedI128",
              "margin_level": "FixedI128",
              "free_margin": "FixedI128",
              "unrealized_pl": "FixedI128"
            },
            "CurrencyId": {
              "_enum": [
                "LAMI",
                "AUSD",
                "DOT",
                "FEUR",
                "FJPY",
                "FBTC",
                "FETH",
                "FAUD",
                "FCAD",
                "FCHF",
                "FXAU",
                "FOIL",
                "FGBP"
              ]
            },
            "Leverage": {
              "_enum": [
                "LongTwo",
                "LongThree",
                "LongFive",
                "LongTen",
                "LongTwenty",
                "LongThirty",
                "LongFifty",
                "LongReserved",
                "ShortTwo",
                "ShortThree",
                "ShortFive",
                "ShortTen",
                "ShortTwenty",
                "ShortThirty",
                "ShortFifty",
                "ShortReserved"
              ]
            },
            "SwapRate": {
              "long": "Rate",
              "short": "Rate"
            },
            "CurrencyIdOf": "CurrencyId",
            "Amount": "FixedI128",
            "AmountOf": "Amount",
            "OracleKey": "CurrencyId",
            "LiquidityPoolId": "u32",
            "Leverages": {
              "_set": {
                "_bitLength": 16,
                "LongTwo": 1,
                "LongThree": 2,
                "LongFive": 4,
                "LongTen": 8,
                "LongTwenty": 16,
                "LongThirty": 32,
                "LongFifty": 64,
                "LongReserved": 128,
                "ShortTwo": 256,
                "ShortThree": 512,
                "ShortFive": 1024,
                "ShortTen": 2048,
                "ShortTwenty": 4096,
                "ShortThirty": 8192,
                "ShortFifty": 16384,
                "ShortReserved": 32768
              }
            },
            "TradingPair": {
              "base": "CurrencyId",
              "quote": "CurrencyId"
            },
            "AccumulateConfig": {
              "frequency": "Moment",
              "offset": "Moment"
            },
            "IdentityDepositBalanceOf": "Balance",
            "Pool": {
              "owner": "AccountId",
              "balance": "Balance"
            },
            "MarginTradingPairOption": {
              "enabled": "bool",
              "maxSpread": "Option<FixedU128>",
              "swapRate": "SwapRate",
              "accumulateConfig": "Option<AccumulateConfig>"
            },
            "MarginPoolOption": {
              "additionalSwapRate": "FixedI128",
              "minLeveragedAmount": "FixedU128"
            },
            "MarginPoolTradingPairOption": {
              "enabled": "bool",
              "bidSpread": "Option<FixedU128>",
              "askSpread": "Option<FixedU128>",
              "enabledTrades": "Leverages"
            },
            "SyntheticPoolCurrencyOption": {
              "bidSpread": "Option<FixedU128>",
              "askSpread": "Option<FixedU128>",
              "additionalCollateralRatio": "Option<Permill>",
              "syntheticEnabled": "bool"
            },
            "MarginPosition": {
              "owner": "AccountId",
              "poolId": "LiquidityPoolId",
              "pair": "TradingPair",
              "leverage": "Leverage",
              "leveragedHeld": "FixedI128",
              "leveragedDebits": "FixedI128",
              "openAccumulatedSwapRate": "Rate",
              "marginHeld": "FixedI128"
            },
            "SyntheticPosition": {
              "collateral": "FixedU128",
              "synthetic": "FixedU128"
            },
            "RiskThreshold": {
              "marginCall": "Permill",
              "stopOut": "Permill"
            },
            "PositionId": "u64",
            "Rate": "FixedI128",
            "PoolTraderInfo": {
              "positionNum": "PositionId",
              "long": "PairInfo",
              "short": "PairInfo"
            },
            "PairInfo": {
              "baseAmount": "FixedI128",
              "quoteAmount": "FixedI128"
            },
            "TradingPairRiskThreshold": {
              "trader": "Option<RiskThreshold>",
              "enp": "Option<RiskThreshold>",
              "ell": "Option<RiskThreshold>"
            },
            "SyntheticTokensRatio": {
              "extreme": "Option<Permill>",
              "liquidation": "Option<Permill>",
              "collateral": "Option<Permill>"
            },
            "PositionsSnapshot": {
              "positionsCount": "PositionId",
              "long": "LeveragedAmounts",
              "short": "LeveragedAmounts"
            },
            "LeveragedAmounts": {
              "held": "FixedI128",
              "debits": "FixedI128"
            },
            "LiquidityPoolIdentityInfo": {
              "legalName": "Vec<u8>",
              "displayName": "Vec<u8>",
              "web": "Vec<u8>",
              "email": "Vec<u8>",
              "image_url": "Vec<u8>"
            },
            "SyntheticPoolState": {
              "collateral_ratio": "FixedI128",
              "is_safe": "boolean"
            },
            "Keys": "SessionKeys2",
            "RefCount": "RefCountTo259"
          }
        },
        {
          "minmax": [
            300,
            399
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "Share": "u128",
            "ChainId": {
              "_enum": {
                "RelayChain": "Null",
                "ParaChain": "ParaId"
              }
            },
            "XCurrencyId": {
              "chainId": "ChainId",
              "currencyId": "Vec<u8>"
            },
            "OracleValue": "Price",
            "MarginPoolState": {
              "enp": "FixedI128",
              "ell": "FixedI128",
              "required_deposit": "FixedI128"
            },
            "MarginTraderState": {
              "equity": "FixedI128",
              "margin_held": "FixedI128",
              "margin_level": "FixedI128",
              "free_margin": "FixedI128",
              "unrealized_pl": "FixedI128"
            },
            "CurrencyId": {
              "_enum": [
                "LAMI",
                "AUSD",
                "FEUR",
                "FJPY",
                "FBTC",
                "FETH",
                "FAUD",
                "FCAD",
                "FCHF",
                "FXAU",
                "FOIL",
                "FGBP"
              ]
            },
            "Leverage": {
              "_enum": [
                "LongTwo",
                "LongThree",
                "LongFive",
                "LongTen",
                "LongTwenty",
                "LongThirty",
                "LongFifty",
                "LongReserved",
                "ShortTwo",
                "ShortThree",
                "ShortFive",
                "ShortTen",
                "ShortTwenty",
                "ShortThirty",
                "ShortFifty",
                "ShortReserved"
              ]
            },
            "SwapRate": {
              "long": "Rate",
              "short": "Rate"
            },
            "CurrencyIdOf": "CurrencyId",
            "Amount": "FixedI128",
            "AmountOf": "Amount",
            "OracleKey": "CurrencyId",
            "LiquidityPoolId": "u32",
            "Leverages": {
              "_set": {
                "_bitLength": 16,
                "LongTwo": 1,
                "LongThree": 2,
                "LongFive": 4,
                "LongTen": 8,
                "LongTwenty": 16,
                "LongThirty": 32,
                "LongFifty": 64,
                "LongReserved": 128,
                "ShortTwo": 256,
                "ShortThree": 512,
                "ShortFive": 1024,
                "ShortTen": 2048,
                "ShortTwenty": 4096,
                "ShortThirty": 8192,
                "ShortFifty": 16384,
                "ShortReserved": 32768
              }
            },
            "TradingPair": {
              "base": "CurrencyId",
              "quote": "CurrencyId"
            },
            "AccumulateConfig": {
              "frequency": "Moment",
              "offset": "Moment"
            },
            "IdentityDepositBalanceOf": "Balance",
            "Pool": {
              "owner": "AccountId",
              "balance": "Balance"
            },
            "MarginTradingPairOption": {
              "enabled": "bool",
              "maxSpread": "Option<FixedU128>",
              "swapRate": "SwapRate",
              "accumulateConfig": "Option<AccumulateConfig>"
            },
            "MarginPoolOption": {
              "additionalSwapRate": "FixedI128",
              "minLeveragedAmount": "FixedU128"
            },
            "MarginPoolTradingPairOption": {
              "enabled": "bool",
              "bidSpread": "Option<FixedU128>",
              "askSpread": "Option<FixedU128>",
              "enabledTrades": "Leverages"
            },
            "SyntheticPoolCurrencyOption": {
              "bidSpread": "Option<FixedU128>",
              "askSpread": "Option<FixedU128>",
              "additionalCollateralRatio": "Option<Permill>",
              "syntheticEnabled": "bool"
            },
            "MarginPosition": {
              "owner": "AccountId",
              "poolId": "LiquidityPoolId",
              "pair": "TradingPair",
              "leverage": "Leverage",
              "leveragedHeld": "FixedI128",
              "leveragedDebits": "FixedI128",
              "openAccumulatedSwapRate": "Rate",
              "marginHeld": "FixedI128"
            },
            "SyntheticPosition": {
              "collateral": "FixedU128",
              "synthetic": "FixedU128"
            },
            "RiskThreshold": {
              "marginCall": "Permill",
              "stopOut": "Permill"
            },
            "PositionId": "u64",
            "Rate": "FixedI128",
            "PoolTraderInfo": {
              "positionNum": "PositionId",
              "long": "PairInfo",
              "short": "PairInfo"
            },
            "PairInfo": {
              "baseAmount": "FixedI128",
              "quoteAmount": "FixedI128"
            },
            "TradingPairRiskThreshold": {
              "trader": "Option<RiskThreshold>",
              "enp": "Option<RiskThreshold>",
              "ell": "Option<RiskThreshold>"
            },
            "SyntheticTokensRatio": {
              "extreme": "Option<Permill>",
              "liquidation": "Option<Permill>",
              "collateral": "Option<Permill>"
            },
            "PositionsSnapshot": {
              "positionsCount": "PositionId",
              "long": "LeveragedAmounts",
              "short": "LeveragedAmounts"
            },
            "LeveragedAmounts": {
              "held": "FixedI128",
              "debits": "FixedI128"
            },
            "LiquidityPoolIdentityInfo": {
              "legalName": "Vec<u8>",
              "displayName": "Vec<u8>",
              "web": "Vec<u8>",
              "email": "Vec<u8>",
              "image_url": "Vec<u8>"
            },
            "SyntheticPoolState": {
              "collateral_ratio": "FixedI128",
              "is_safe": "boolean"
            },
            "Keys": "SessionKeys2"
          }
        },
        {
          "minmax": [
            400,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "Share": "u128",
            "ChainId": {
              "_enum": {
                "RelayChain": "Null",
                "ParaChain": "ParaId"
              }
            },
            "XCurrencyId": {
              "chainId": "ChainId",
              "currencyId": "Vec<u8>"
            },
            "OracleValue": "Price",
            "MarginPoolState": {
              "enp": "FixedI128",
              "ell": "FixedI128",
              "required_deposit": "FixedI128"
            },
            "MarginTraderState": {
              "equity": "FixedI128",
              "margin_held": "FixedI128",
              "margin_level": "FixedI128",
              "free_margin": "FixedI128",
              "unrealized_pl": "FixedI128"
            },
            "CurrencyId": {
              "_enum": [
                "LAMI",
                "AUSD",
                "DOT",
                "FEUR",
                "FJPY",
                "FBTC",
                "FETH",
                "FAUD",
                "FCAD",
                "FCHF",
                "FXAU",
                "FOIL",
                "FGBP"
              ]
            },
            "Leverage": {
              "_enum": [
                "LongTwo",
                "LongThree",
                "LongFive",
                "LongTen",
                "LongTwenty",
                "LongThirty",
                "LongFifty",
                "LongReserved",
                "ShortTwo",
                "ShortThree",
                "ShortFive",
                "ShortTen",
                "ShortTwenty",
                "ShortThirty",
                "ShortFifty",
                "ShortReserved"
              ]
            },
            "SwapRate": {
              "long": "Rate",
              "short": "Rate"
            },
            "CurrencyIdOf": "CurrencyId",
            "Amount": "FixedI128",
            "AmountOf": "Amount",
            "OracleKey": "CurrencyId",
            "LiquidityPoolId": "u32",
            "Leverages": {
              "_set": {
                "_bitLength": 16,
                "LongTwo": 1,
                "LongThree": 2,
                "LongFive": 4,
                "LongTen": 8,
                "LongTwenty": 16,
                "LongThirty": 32,
                "LongFifty": 64,
                "LongReserved": 128,
                "ShortTwo": 256,
                "ShortThree": 512,
                "ShortFive": 1024,
                "ShortTen": 2048,
                "ShortTwenty": 4096,
                "ShortThirty": 8192,
                "ShortFifty": 16384,
                "ShortReserved": 32768
              }
            },
            "TradingPair": {
              "base": "CurrencyId",
              "quote": "CurrencyId"
            },
            "AccumulateConfig": {
              "frequency": "Moment",
              "offset": "Moment"
            },
            "IdentityDepositBalanceOf": "Balance",
            "Pool": {
              "owner": "AccountId",
              "balance": "Balance"
            },
            "MarginTradingPairOption": {
              "enabled": "bool",
              "maxSpread": "Option<FixedU128>",
              "swapRate": "SwapRate",
              "accumulateConfig": "Option<AccumulateConfig>"
            },
            "MarginPoolOption": {
              "additionalSwapRate": "FixedI128",
              "minLeveragedAmount": "FixedU128"
            },
            "MarginPoolTradingPairOption": {
              "enabled": "bool",
              "bidSpread": "Option<FixedU128>",
              "askSpread": "Option<FixedU128>",
              "enabledTrades": "Leverages"
            },
            "SyntheticPoolCurrencyOption": {
              "bidSpread": "Option<FixedU128>",
              "askSpread": "Option<FixedU128>",
              "additionalCollateralRatio": "Option<Permill>",
              "syntheticEnabled": "bool"
            },
            "MarginPosition": {
              "owner": "AccountId",
              "poolId": "LiquidityPoolId",
              "pair": "TradingPair",
              "leverage": "Leverage",
              "leveragedHeld": "FixedI128",
              "leveragedDebits": "FixedI128",
              "openAccumulatedSwapRate": "Rate",
              "marginHeld": "FixedI128"
            },
            "SyntheticPosition": {
              "collateral": "FixedU128",
              "synthetic": "FixedU128"
            },
            "RiskThreshold": {
              "marginCall": "Permill",
              "stopOut": "Permill"
            },
            "PositionId": "u64",
            "Rate": "FixedI128",
            "PoolTraderInfo": {
              "positionNum": "PositionId",
              "long": "PairInfo",
              "short": "PairInfo"
            },
            "PairInfo": {
              "baseAmount": "FixedI128",
              "quoteAmount": "FixedI128"
            },
            "TradingPairRiskThreshold": {
              "trader": "Option<RiskThreshold>",
              "enp": "Option<RiskThreshold>",
              "ell": "Option<RiskThreshold>"
            },
            "SyntheticTokensRatio": {
              "extreme": "Option<Permill>",
              "liquidation": "Option<Permill>",
              "collateral": "Option<Permill>"
            },
            "PositionsSnapshot": {
              "positionsCount": "PositionId",
              "long": "LeveragedAmounts",
              "short": "LeveragedAmounts"
            },
            "LeveragedAmounts": {
              "held": "FixedI128",
              "debits": "FixedI128"
            },
            "LiquidityPoolIdentityInfo": {
              "legalName": "Vec<u8>",
              "displayName": "Vec<u8>",
              "web": "Vec<u8>",
              "email": "Vec<u8>",
              "image_url": "Vec<u8>"
            },
            "SyntheticPoolState": {
              "collateral_ratio": "FixedI128",
              "is_safe": "boolean"
            },
            "Keys": "SessionKeys2"
          }
        }
      ]
    },
    "litentry": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "logion": {
      "alias": {
        "loAuthorityList": {
          "StorageVersion": "LoAuthorityListStorageVersion"
        }
      },
      "types": [
        {
          "minmax": [
            0,
            109
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "PeerId": "(Vec<u8>)",
            "AccountInfo": "AccountInfoWithDualRefCount",
            "TAssetBalance": "u128",
            "AssetId": "u64",
            "AssetDetails": {
              "owner": "AccountId",
              "issuer": "AccountId",
              "admin": "AccountId",
              "freezer": "AccountId",
              "supply": "Balance",
              "deposit": "DepositBalance",
              "max_zombies": "u32",
              "min_balance": "Balance",
              "zombies": "u32",
              "accounts": "u32",
              "is_frozen": "bool"
            },
            "AssetMetadata": {
              "deposit": "DepositBalance",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "LocId": "u128",
            "LegalOfficerCaseOf": {
              "owner": "AccountId",
              "requester": "Requester",
              "metadata": "Vec<MetadataItem>",
              "files": "Vec<File>",
              "closed": "bool",
              "loc_type": "LocType",
              "links": "Vec<LocLink>",
              "void_info": "Option<LocVoidInfo<LocId>>",
              "replacer_of": "Option<LocId>",
              "collection_last_block_submission": "Option<BlockNumber>",
              "collection_max_size": "Option<CollectionSize>"
            },
            "MetadataItem": {
              "name": "Vec<u8>",
              "value": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocType": {
              "_enum": [
                "Transaction",
                "Identity",
                "Collection"
              ]
            },
            "LocLink": {
              "id": "LocId",
              "nature": "Vec<u8>"
            },
            "File": {
              "hash": "Hash",
              "nature": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocVoidInfo": {
              "replacer": "Option<LocId>"
            },
            "StorageVersion": {
              "_enum": [
                "V1",
                "V2MakeLocVoid",
                "V3RequesterEnum",
                "V4ItemSubmitter",
                "V5Collection"
              ]
            },
            "Requester": {
              "_enum": {
                "None": null,
                "Account": "AccountId",
                "Loc": "LocId"
              }
            },
            "CollectionSize": "u32",
            "CollectionItemId": "Hash",
            "CollectionItem": {
              "description": "Vec<u8>"
            },
            "FullIdentification": "Exposure",
            "IdentificationTuple": "(ValidatorId, FullIdentification)",
            "MembershipProof": {
              "session": "SessionIndex",
              "trieNodes": "Vec<Vec<u8>>",
              "validatorCount": "ValidatorCount"
            },
            "SessionIndex": "u32",
            "ValidatorCount": "u32",
            "SessionKeys2": "(AccountId, AccountId)",
            "Keys": "SessionKeys2"
          }
        },
        {
          "minmax": [
            110,
            111
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "PeerId": "(Vec<u8>)",
            "AccountInfo": "AccountInfoWithDualRefCount",
            "TAssetBalance": "u128",
            "AssetId": "u64",
            "AssetDetails": {
              "owner": "AccountId",
              "issuer": "AccountId",
              "admin": "AccountId",
              "freezer": "AccountId",
              "supply": "Balance",
              "deposit": "DepositBalance",
              "max_zombies": "u32",
              "min_balance": "Balance",
              "zombies": "u32",
              "accounts": "u32",
              "is_frozen": "bool"
            },
            "AssetMetadata": {
              "deposit": "DepositBalance",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "LocId": "u128",
            "LegalOfficerCaseOf": {
              "owner": "AccountId",
              "requester": "Requester",
              "metadata": "Vec<MetadataItem>",
              "files": "Vec<File>",
              "closed": "bool",
              "loc_type": "LocType",
              "links": "Vec<LocLink>",
              "void_info": "Option<LocVoidInfo<LocId>>",
              "replacer_of": "Option<LocId>",
              "collection_last_block_submission": "Option<BlockNumber>",
              "collection_max_size": "Option<CollectionSize>",
              "collection_can_upload": "bool"
            },
            "MetadataItem": {
              "name": "Vec<u8>",
              "value": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocType": {
              "_enum": [
                "Transaction",
                "Identity",
                "Collection"
              ]
            },
            "LocLink": {
              "id": "LocId",
              "nature": "Vec<u8>"
            },
            "File": {
              "hash": "Hash",
              "nature": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocVoidInfo": {
              "replacer": "Option<LocId>"
            },
            "StorageVersion": {
              "_enum": [
                "V1",
                "V2MakeLocVoid",
                "V3RequesterEnum",
                "V4ItemSubmitter",
                "V5Collection",
                "V6ItemUpload"
              ]
            },
            "Requester": {
              "_enum": {
                "None": null,
                "Account": "AccountId",
                "Loc": "LocId"
              }
            },
            "CollectionSize": "u32",
            "CollectionItemId": "Hash",
            "CollectionItem": {
              "description": "Vec<u8>",
              "files": "Vec<CollectionItemFile<Hash>>"
            },
            "CollectionItemFile": {
              "name": "Vec<u8>",
              "content_type": "Vec<u8>",
              "fileSize": "u32",
              "hash": "Hash"
            },
            "FullIdentification": "Exposure",
            "IdentificationTuple": "(ValidatorId, FullIdentification)",
            "MembershipProof": {
              "session": "SessionIndex",
              "trieNodes": "Vec<Vec<u8>>",
              "validatorCount": "ValidatorCount"
            },
            "SessionIndex": "u32",
            "ValidatorCount": "u32",
            "SessionKeys2": "(AccountId, AccountId)",
            "Keys": "SessionKeys2"
          }
        },
        {
          "minmax": [
            112,
            116
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "OpaquePeerId": "Vec<u8>",
            "AccountInfo": "AccountInfoWithDualRefCount",
            "TAssetBalance": "u128",
            "AssetId": "u64",
            "AssetDetails": {
              "owner": "AccountId",
              "issuer": "AccountId",
              "admin": "AccountId",
              "freezer": "AccountId",
              "supply": "Balance",
              "deposit": "DepositBalance",
              "max_zombies": "u32",
              "min_balance": "Balance",
              "zombies": "u32",
              "accounts": "u32",
              "is_frozen": "bool"
            },
            "AssetMetadata": {
              "deposit": "DepositBalance",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "LocId": "u128",
            "LegalOfficerCaseOf": {
              "owner": "AccountId",
              "requester": "Requester",
              "metadata": "Vec<MetadataItem>",
              "files": "Vec<File>",
              "closed": "bool",
              "loc_type": "LocType",
              "links": "Vec<LocLink>",
              "void_info": "Option<LocVoidInfo<LocId>>",
              "replacer_of": "Option<LocId>",
              "collection_last_block_submission": "Option<BlockNumber>",
              "collection_max_size": "Option<CollectionSize>",
              "collection_can_upload": "bool"
            },
            "MetadataItem": {
              "name": "Vec<u8>",
              "value": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocType": {
              "_enum": [
                "Transaction",
                "Identity",
                "Collection"
              ]
            },
            "LocLink": {
              "id": "LocId",
              "nature": "Vec<u8>"
            },
            "File": {
              "hash": "Hash",
              "nature": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocVoidInfo": {
              "replacer": "Option<LocId>"
            },
            "StorageVersion": {
              "_enum": [
                "V1",
                "V2MakeLocVoid",
                "V3RequesterEnum",
                "V4ItemSubmitter",
                "V5Collection",
                "V6ItemUpload",
                "V7ItemToken"
              ]
            },
            "Requester": {
              "_enum": {
                "None": null,
                "Account": "AccountId",
                "Loc": "LocId"
              }
            },
            "CollectionSize": "u32",
            "CollectionItemId": "Hash",
            "CollectionItem": {
              "description": "Vec<u8>",
              "files": "Vec<CollectionItemFile<Hash>>",
              "token": "Option<CollectionItemToken>",
              "restricted_delivery": "bool"
            },
            "CollectionItemFile": {
              "name": "Vec<u8>",
              "content_type": "Vec<u8>",
              "fileSize": "u32",
              "hash": "Hash"
            },
            "CollectionItemToken": {
              "token_type": "Vec<u8>",
              "token_id": "Vec<u8>"
            },
            "FullIdentification": "Exposure",
            "IdentificationTuple": "(ValidatorId, FullIdentification)",
            "MembershipProof": {
              "session": "SessionIndex",
              "trieNodes": "Vec<Vec<u8>>",
              "validatorCount": "ValidatorCount"
            },
            "SessionIndex": "u32",
            "ValidatorCount": "u32",
            "SessionKeys2": "(AccountId, AccountId)",
            "Keys": "SessionKeys2"
          }
        },
        {
          "minmax": [
            117,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "OpaquePeerId": "Vec<u8>",
            "AccountInfo": "AccountInfoWithDualRefCount",
            "TAssetBalance": "u128",
            "AssetId": "u64",
            "AssetDetails": {
              "owner": "AccountId",
              "issuer": "AccountId",
              "admin": "AccountId",
              "freezer": "AccountId",
              "supply": "Balance",
              "deposit": "DepositBalance",
              "max_zombies": "u32",
              "min_balance": "Balance",
              "zombies": "u32",
              "accounts": "u32",
              "is_frozen": "bool"
            },
            "AssetMetadata": {
              "deposit": "DepositBalance",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "LocId": "u128",
            "LegalOfficerCaseOf": {
              "owner": "AccountId",
              "requester": "Requester",
              "metadata": "Vec<MetadataItem>",
              "files": "Vec<File>",
              "closed": "bool",
              "loc_type": "LocType",
              "links": "Vec<LocLink>",
              "void_info": "Option<LocVoidInfo<LocId>>",
              "replacer_of": "Option<LocId>",
              "collection_last_block_submission": "Option<BlockNumber>",
              "collection_max_size": "Option<CollectionSize>",
              "collection_can_upload": "bool",
              "seal": "Option<Hash>"
            },
            "MetadataItem": {
              "name": "Vec<u8>",
              "value": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocType": {
              "_enum": [
                "Transaction",
                "Identity",
                "Collection"
              ]
            },
            "LocLink": {
              "id": "LocId",
              "nature": "Vec<u8>"
            },
            "File": {
              "hash": "Hash",
              "nature": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocVoidInfo": {
              "replacer": "Option<LocId>"
            },
            "StorageVersion": {
              "_enum": [
                "V1",
                "V2MakeLocVoid",
                "V3RequesterEnum",
                "V4ItemSubmitter",
                "V5Collection",
                "V6ItemUpload",
                "V7ItemToken",
                "V8AddSeal"
              ]
            },
            "Requester": {
              "_enum": {
                "None": null,
                "Account": "AccountId",
                "Loc": "LocId"
              }
            },
            "CollectionSize": "u32",
            "CollectionItemId": "Hash",
            "CollectionItem": {
              "description": "Vec<u8>",
              "files": "Vec<CollectionItemFile<Hash>>",
              "token": "Option<CollectionItemToken>",
              "restricted_delivery": "bool"
            },
            "CollectionItemFile": {
              "name": "Vec<u8>",
              "content_type": "Vec<u8>",
              "fileSize": "u32",
              "hash": "Hash"
            },
            "CollectionItemToken": {
              "token_type": "Vec<u8>",
              "token_id": "Vec<u8>"
            },
            "LegalOfficerData": {
              "node_id": "Option<OpaquePeerId>",
              "base_url": "Option<Vec<u8>>"
            },
            "LoAuthorityListStorageVersion": {
              "_enum": [
                "V1",
                "V2AddOnchainSettings"
              ]
            },
            "FullIdentification": "Exposure",
            "IdentificationTuple": "(ValidatorId, FullIdentification)",
            "MembershipProof": {
              "session": "SessionIndex",
              "trieNodes": "Vec<Vec<u8>>",
              "validatorCount": "ValidatorCount"
            },
            "SessionIndex": "u32",
            "ValidatorCount": "u32",
            "SessionKeys2": "(AccountId, AccountId)",
            "Keys": "SessionKeys2"
          }
        }
      ]
    },
    "logion-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "PeerId": "(Vec<u8>)",
            "AccountInfo": "AccountInfoWithDualRefCount",
            "TAssetBalance": "u128",
            "AssetId": "u64",
            "AssetDetails": {
              "owner": "AccountId",
              "issuer": "AccountId",
              "admin": "AccountId",
              "freezer": "AccountId",
              "supply": "Balance",
              "deposit": "DepositBalance",
              "max_zombies": "u32",
              "min_balance": "Balance",
              "zombies": "u32",
              "accounts": "u32",
              "is_frozen": "bool"
            },
            "AssetMetadata": {
              "deposit": "DepositBalance",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "LocId": "u128",
            "LegalOfficerCaseOf": {
              "owner": "AccountId",
              "requester": "Requester",
              "metadata": "Vec<MetadataItem>",
              "files": "Vec<File>",
              "closed": "bool",
              "loc_type": "LocType",
              "links": "Vec<LocLink>",
              "void_info": "Option<LocVoidInfo<LocId>>",
              "replacer_of": "Option<LocId>",
              "collection_last_block_submission": "Option<BlockNumber>",
              "collection_max_size": "Option<CollectionSize>"
            },
            "MetadataItem": {
              "name": "Vec<u8>",
              "value": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocType": {
              "_enum": [
                "Transaction",
                "Identity",
                "Collection"
              ]
            },
            "LocLink": {
              "id": "LocId",
              "nature": "Vec<u8>"
            },
            "File": {
              "hash": "Hash",
              "nature": "Vec<u8>",
              "submitter": "AccountId"
            },
            "LocVoidInfo": {
              "replacer": "Option<LocId>"
            },
            "StorageVersion": {
              "_enum": [
                "V1",
                "V2MakeLocVoid",
                "V3RequesterEnum",
                "V4ItemSubmitter",
                "V5Collection"
              ]
            },
            "Requester": {
              "_enum": {
                "None": null,
                "Account": "AccountId",
                "Loc": "LocId"
              }
            },
            "CollectionSize": "u32",
            "CollectionItemId": "Hash",
            "CollectionItem": {
              "description": "Vec<u8>"
            }
          }
        }
      ]
    },
    "mangata": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "ShufflingSeed": {
              "seed": "H256",
              "proof": "H512"
            },
            "Header": {
              "parentHash": "Hash",
              "number": "Compact<BlockNumber>",
              "stateRoot": "Hash",
              "extrinsicsRoot": "Hash",
              "digest": "Digest",
              "seed": "ShufflingSeed",
              "count": "BlockNumber"
            },
            "XYKRpcResult": {
              "price": "Balance"
            },
            "RPCAmountsResult": {
              "firstAssetAmount": "Balance",
              "secondAssetAmount": "Balance"
            },
            "VestingInfo": {
              "locked": "Balance",
              "perBlock": "Balance",
              "startingBlock": "BlockNumber"
            },
            "TokenId": "u32",
            "VestingInfosWithLockedAt": {
              "vestingInfosWithLockedAt": "Vec<(VestingInfo<Balance, BlockNumber>, Balance)>"
            }
          }
        }
      ],
      "rpc": {
        "xyk": {
          "calculate_buy_price": {
            "description": "",
            "params": [
              {
                "name": "input_reserve",
                "type": "Balance"
              },
              {
                "name": "output_reserve",
                "type": "Balance"
              },
              {
                "name": "sell_amount",
                "type": "Balance"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "calculate_sell_price": {
            "description": "",
            "params": [
              {
                "name": "input_reserve",
                "type": "Balance"
              },
              {
                "name": "output_reserve",
                "type": "Balance"
              },
              {
                "name": "sell_amount",
                "type": "Balance"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "get_burn_amount": {
            "description": "",
            "params": [
              {
                "name": "first_asset_id",
                "type": "TokenId"
              },
              {
                "name": "second_asset_id",
                "type": "TokenId"
              },
              {
                "name": "liquidity_asset_amount",
                "type": "Balance"
              }
            ],
            "type": "RPCAmountsResult<Balance>"
          },
          "calculate_sell_price_id": {
            "description": "",
            "params": [
              {
                "name": "sold_token_id",
                "type": "TokenId"
              },
              {
                "name": "bought_token_id",
                "type": "TokenId"
              },
              {
                "name": "sell_amount",
                "type": "Balance"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "calculate_buy_price_id": {
            "description": "",
            "params": [
              {
                "name": "sold_token_id",
                "type": "TokenId"
              },
              {
                "name": "bought_token_id",
                "type": "TokenId"
              },
              {
                "name": "buy_amount",
                "type": "Balance"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "calculate_rewards_amount": {
            "description": "",
            "params": [
              {
                "name": "user",
                "type": "AccountId"
              },
              {
                "name": "liquidity_asset_id",
                "type": "TokenId"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "calculate_rewards_amount_v2": {
            "description": "",
            "params": [
              {
                "name": "user",
                "type": "AccountId"
              },
              {
                "name": "liquidity_asset_id",
                "type": "TokenId"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "get_max_instant_unreserve_amount": {
            "description": "",
            "params": [
              {
                "name": "user",
                "type": "AccountId"
              },
              {
                "name": "liquidity_asset_id",
                "type": "TokenId"
              }
            ],
            "type": "Balance"
          },
          "get_max_instant_burn_amount": {
            "description": "",
            "params": [
              {
                "name": "user",
                "type": "AccountId"
              },
              {
                "name": "liquidity_asset_id",
                "type": "TokenId"
              }
            ],
            "type": "Balance"
          },
          "get_vesting_locked_at": {
            "description": "",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "token_id",
                "type": "TokenId"
              }
            ],
            "type": "VestingInfosWithLockedAt<Balance, BlockNumber>"
          }
        }
      }
    },
    "mangata-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "ShufflingSeed": {
              "seed": "H256",
              "proof": "H512"
            },
            "Header": {
              "parentHash": "Hash",
              "number": "Compact<BlockNumber>",
              "stateRoot": "Hash",
              "extrinsicsRoot": "Hash",
              "digest": "Digest",
              "seed": "ShufflingSeed",
              "count": "BlockNumber"
            },
            "XYKRpcResult": {
              "price": "Balance"
            },
            "RPCAmountsResult": {
              "firstAssetAmount": "Balance",
              "secondAssetAmount": "Balance"
            },
            "VestingInfo": {
              "locked": "Balance",
              "perBlock": "Balance",
              "startingBlock": "BlockNumber"
            },
            "TokenId": "u32",
            "VestingInfosWithLockedAt": {
              "vestingInfosWithLockedAt": "Vec<(VestingInfo<Balance, BlockNumber>, Balance)>"
            }
          }
        }
      ],
      "rpc": {
        "xyk": {
          "calculate_buy_price": {
            "description": "",
            "params": [
              {
                "name": "input_reserve",
                "type": "Balance"
              },
              {
                "name": "output_reserve",
                "type": "Balance"
              },
              {
                "name": "sell_amount",
                "type": "Balance"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "calculate_sell_price": {
            "description": "",
            "params": [
              {
                "name": "input_reserve",
                "type": "Balance"
              },
              {
                "name": "output_reserve",
                "type": "Balance"
              },
              {
                "name": "sell_amount",
                "type": "Balance"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "get_burn_amount": {
            "description": "",
            "params": [
              {
                "name": "first_asset_id",
                "type": "TokenId"
              },
              {
                "name": "second_asset_id",
                "type": "TokenId"
              },
              {
                "name": "liquidity_asset_amount",
                "type": "Balance"
              }
            ],
            "type": "RPCAmountsResult<Balance>"
          },
          "calculate_sell_price_id": {
            "description": "",
            "params": [
              {
                "name": "sold_token_id",
                "type": "TokenId"
              },
              {
                "name": "bought_token_id",
                "type": "TokenId"
              },
              {
                "name": "sell_amount",
                "type": "Balance"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "calculate_buy_price_id": {
            "description": "",
            "params": [
              {
                "name": "sold_token_id",
                "type": "TokenId"
              },
              {
                "name": "bought_token_id",
                "type": "TokenId"
              },
              {
                "name": "buy_amount",
                "type": "Balance"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "calculate_rewards_amount": {
            "description": "",
            "params": [
              {
                "name": "user",
                "type": "AccountId"
              },
              {
                "name": "liquidity_asset_id",
                "type": "TokenId"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "calculate_rewards_amount_v2": {
            "description": "",
            "params": [
              {
                "name": "user",
                "type": "AccountId"
              },
              {
                "name": "liquidity_asset_id",
                "type": "TokenId"
              }
            ],
            "type": "XYKRpcResult<Balance>"
          },
          "get_max_instant_unreserve_amount": {
            "description": "",
            "params": [
              {
                "name": "user",
                "type": "AccountId"
              },
              {
                "name": "liquidity_asset_id",
                "type": "TokenId"
              }
            ],
            "type": "Balance"
          },
          "get_max_instant_burn_amount": {
            "description": "",
            "params": [
              {
                "name": "user",
                "type": "AccountId"
              },
              {
                "name": "liquidity_asset_id",
                "type": "TokenId"
              }
            ],
            "type": "Balance"
          },
          "get_vesting_locked_at": {
            "description": "",
            "params": [
              {
                "name": "who",
                "type": "AccountId"
              },
              {
                "name": "token_id",
                "type": "TokenId"
              }
            ],
            "type": "VestingInfosWithLockedAt<Balance, BlockNumber>"
          }
        }
      }
    },
    "manta-node": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "CurrencyId": {
              "_enum": [
                "MA"
              ]
            },
            "CurrencyIdOf": "CurrencyId",
            "Amount": "i128",
            "AmountOf": "Amount",
            "AccountInfo": "AccountInfoWithDualRefCount"
          }
        }
      ]
    },
    "mashnet-node": {
      "types": [
        {
          "minmax": [
            0,
            8
          ],
          "types": {
            "AccountInfo": "AccountInfoWithDualRefCount",
            "Address": "AccountId",
            "Attestation": {
              "ctypeHash": "Hash",
              "attester": "AccountId",
              "delegationId": "Option<DelegationNodeId>",
              "revoked": "bool"
            },
            "Balance": "u128",
            "DelegationNode": {
              "rootId": "DelegationNodeId",
              "parent": "Option<DelegationNodeId>",
              "owner": "AccountId",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "DelegationNodeId": "Hash",
            "DelegationRoot": {
              "ctypeHash": "Hash",
              "owner": "AccountId",
              "revoked": "bool"
            },
            "DidRecord": {
              "signKey": "Hash",
              "boxKey": "Hash",
              "docRef": "Option<Vec<u8>>"
            },
            "Index": "u64",
            "LookupSource": "AccountId",
            "Permissions": "u32",
            "PublicBoxKey": "Hash",
            "PublicSigningKey": "Hash",
            "Signature": "MultiSignature",
            "XCurrencyId": {
              "chainId": "ChainId",
              "currencyId": "Vec<u8>"
            },
            "ChainId": {
              "_enum": {
                "RelayChain": "Null",
                "ParaChain": "ParaId"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "CurrencyId": {
              "_enum": {
                "DOT": 0,
                "KSM": 1,
                "KILT": 2
              }
            },
            "XcmError": {
              "_enum": {
                "Undefined": 0,
                "Unimplemented": 1,
                "UnhandledXcmVersion": 2,
                "UnhandledXcmMessage": 3,
                "UnhandledEffect": 4,
                "EscalationOfPrivilege": 5,
                "UntrustedReserveLocation": 6,
                "UntrustedTeleportLocation": 7,
                "DestinationBufferOverflow": 8,
                "CannotReachDestination": 9,
                "MultiLocationFull": 10,
                "FailedToDecode": 11,
                "BadOrigin": 12,
                "ExceedsMaxMessageSize": 13,
                "FailedToTransactAsset": 14
              }
            },
            "ReferendumInfo": {
              "_enum": {
                "Ongoing": "ReferendumStatus",
                "Finished": "ReferendumInfoFinished"
              }
            }
          }
        },
        {
          "minmax": [
            9,
            9
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "DidIdentifierOf",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "DidIdentifierOf",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "DidIdentifierOf",
            "DelegationSignature": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "rootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "owner": "DelegatorIdOf",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            }
          }
        },
        {
          "minmax": [
            10,
            11
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "rootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "owner": "DelegatorIdOf",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            }
          }
        },
        {
          "minmax": [
            12,
            16
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "rootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "owner": "DelegatorIdOf",
              "permissions": "Permissions",
              "revoked": "bool"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            }
          }
        },
        {
          "minmax": [
            17,
            17
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BTreeSet<DelegationNodeIdOf>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidCreationOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "DidVerificationKey",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateOperation": {
              "did": "DidIdentifierOf",
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>",
              "txCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidDeletionOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            }
          }
        },
        {
          "minmax": [
            18,
            18
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BTreeSet<DelegationNodeIdOf>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "endpointUrl": "Option<Url>",
              "lastTxCounter": "u64"
            },
            "DidVerificationKeyUpdateAction": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newEndpointUrl": "Option<Url>"
            },
            "DidUpdateDetails": {
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidVerificationKeyUpdateAction",
              "delegationKeyUpdate": "DidVerificationKeyUpdateAction",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "newEndpointUrl": "Option<Url>"
            }
          }
        },
        {
          "minmax": [
            19,
            19
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BTreeSet<DelegationNodeIdOf>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "BTreeSet<KeyIdOf>",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "Vec<Stake>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "DidUpdateDetails": {
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
              "attestationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "delegationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "publicKeysToRemove": "BTreeSet<KeyIdOf>",
              "serviceEndpointsUpdate": "DidFragmentUpdateAction_ServiceEndpoints"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "Vec<Url>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "ApplicationJson",
                "ApplicationJsonLd"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            }
          }
        },
        {
          "minmax": [
            20,
            20
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "Vec<u8>",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "delegationKey": "Option<KeyIdOf>",
              "attestationKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "OrderedSet": "BoundedVec<Stake, MaxCollatorCandidates>",
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "OrderedSet<Stake, MaxCollatorsPerDelegator>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "OrderedSet<Stake, MaxDelegatorsPerCollator>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAttestationKey": "Option<DidVerificationKey>",
              "newDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "DidUpdateDetails": {
              "newAuthenticationKey": "Option<DidVerificationKey>",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "attestationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "delegationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
              "publicKeysToRemove": "DidVerificationKeysToRevoke",
              "serviceEndpointsUpdate": "DidFragmentUpdateAction_ServiceEndpoints"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "ApplicationJson",
                "ApplicationJsonLd"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxCollatorCandidates": "u32",
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32"
          }
        },
        {
          "minmax": [
            21,
            22
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "Collator": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "application/json",
                "application/ld+json"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxCollatorCandidates": "u32",
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32"
          }
        },
        {
          "minmax": [
            23,
            24
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "application/json",
                "application/ld+json"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4",
                "V5"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32",
            "MinCollators": "u32",
            "MaxTopCandidates": "u32",
            "Candidate": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "status": "CandidateStatus"
            },
            "CandidateStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            }
          }
        },
        {
          "minmax": [
            25,
            2699
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationRoot": {
              "ctypeHash": "CtypeHashOf",
              "owner": "DelegatorIdOf",
              "revoked": "bool"
            },
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "UrlError": "UrlError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "VerificationKeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxTxCounterValue": "Null",
                "MaxPublicKeysPerDidKeyIdentifierExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "MaxOldAttestationKeysExceeded": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "UrlError": {
              "_enum": [
                "InvalidUrlEncoding",
                "InvalidUrlScheme"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded",
                "MaxUrlLengthExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "serviceEndpoints": "Option<ServiceEndpoints>",
              "lastTxCounter": "u64"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf",
              "submitter": "AccountId"
            },
            "HttpUrl": {
              "payload": "Text"
            },
            "FtpUrl": {
              "payload": "Text"
            },
            "IpfsUrl": {
              "payload": "Text"
            },
            "Url": {
              "_enum": {
                "Http": "HttpUrl",
                "Ftp": "FtpUrl",
                "Ipfs": "IpfsUrl"
              }
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>",
              "newServiceEndpoints": "Option<ServiceEndpoints>"
            },
            "ServiceEndpoints": {
              "contentHash": "Hash",
              "urls": "BoundedVec<Url, MaxEndpointUrlsCount>",
              "contentType": "ContentType"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "ContentType": {
              "_enum": [
                "application/json",
                "application/ld+json"
              ]
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4",
                "V5"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MaxUrlLength": "u32",
            "MaxEndpointUrlsCount": "u32",
            "MinCollators": "u32",
            "MaxTopCandidates": "u32",
            "Candidate": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "status": "CandidateStatus"
            },
            "CandidateStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            }
          }
        },
        {
          "minmax": [
            2700,
            10710
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "AmountOf": "i128",
            "Balance": "u128",
            "BlockNumber": "u64",
            "Index": "u64",
            "LookupSource": "MultiAddress",
            "CtypeCreatorOf": "AccountId",
            "CtypeHashOf": "Hash",
            "ClaimHashOf": "Hash",
            "AttesterOf": "AccountId",
            "AttestationDetails": {
              "ctypeHash": "CtypeHashOf",
              "attester": "AttesterOf",
              "delegationId": "Option<DelegationNodeIdOf>",
              "revoked": "bool",
              "deposit": "Deposit"
            },
            "Permissions": "u32",
            "DelegationNodeIdOf": "Hash",
            "DelegatorIdOf": "AccountId",
            "DelegateSignatureTypeOf": "DidSignature",
            "DelegationNode": {
              "hierarchyRootId": "DelegationNodeIdOf",
              "parent": "Option<DelegationNodeIdOf>",
              "children": "BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",
              "details": "DelegationDetails",
              "deposit": "Deposit"
            },
            "KeyIdOf": "Hash",
            "DidIdentifierOf": "AccountId",
            "AccountIdentifierOf": "AccountId",
            "BlockNumberOf": "BlockNumber",
            "DidCallableOf": "Call",
            "DidVerificationKey": {
              "_enum": {
                "Ed25519": "[u8; 32]",
                "Sr25519": "[u8; 32]",
                "Secp256k1": "[u8; 33]"
              }
            },
            "DidEncryptionKey": {
              "_enum": {
                "X25519": "[u8; 32]"
              }
            },
            "DidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "DidVerificationKey",
                "PublicEncryptionKey": "DidEncryptionKey"
              }
            },
            "DidVerificationKeyRelationship": {
              "_enum": [
                "Authentication",
                "CapabilityDelegation",
                "CapabilityInvocation",
                "AssertionMethod"
              ]
            },
            "DidSignature": {
              "_enum": {
                "Ed25519": "Ed25519Signature",
                "Sr25519": "Sr25519Signature",
                "Ecdsa-Secp256k1": "EcdsaSignature"
              }
            },
            "DidError": {
              "_enum": {
                "StorageError": "StorageError",
                "SignatureError": "SignatureError",
                "InputError": "InputError",
                "InternalError": "Null"
              }
            },
            "StorageError": {
              "_enum": {
                "DidAlreadyPresent": "Null",
                "DidNotPresent": "Null",
                "DidKeyNotPresent": "DidVerificationKeyRelationship",
                "KeyNotPresent": "Null",
                "CurrentlyActiveKey": "Null",
                "MaxPublicKeysPerDidExceeded": "Null",
                "MaxTotalKeyAgreementKeysExceeded": "Null",
                "DidAlreadyDeleted": "Null"
              }
            },
            "SignatureError": {
              "_enum": [
                "InvalidSignatureFormat",
                "InvalidSignature",
                "InvalidNonce",
                "TransactionExpired"
              ]
            },
            "KeyError": {
              "_enum": [
                "InvalidVerificationKeyFormat",
                "InvalidEncryptionKeyFormat"
              ]
            },
            "InputError": {
              "_enum": [
                "MaxKeyAgreementKeysLimitExceeded",
                "MaxVerificationKeysToRemoveLimitExceeded"
              ]
            },
            "DidPublicKeyDetails": {
              "key": "DidPublicKey",
              "blockNumber": "BlockNumberOf"
            },
            "DidDetails": {
              "authenticationKey": "KeyIdOf",
              "keyAgreementKeys": "DidKeyAgreementKeys",
              "capabilityDelegationKey": "Option<KeyIdOf>",
              "assertionMethodKey": "Option<KeyIdOf>",
              "publicKeys": "DidPublicKeyMap",
              "lastTxCounter": "u64",
              "deposit": "Deposit"
            },
            "DidAuthorizedCallOperation": {
              "did": "DidIdentifierOf",
              "txCounter": "u64",
              "call": "DidCallableOf",
              "blockNumber": "BlockNumber",
              "submitter": "AccountId"
            },
            "LockedBalance": {
              "block": "BlockNumber",
              "amount": "Balance"
            },
            "BalanceOf": "Balance",
            "RoundInfo": {
              "current": "SessionIndex",
              "first": "BlockNumber",
              "length": "BlockNumber"
            },
            "Stake": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TotalStake": {
              "collators": "Balance",
              "delegators": "Balance"
            },
            "InflationInfo": {
              "collator": "StakingInfo",
              "delegator": "StakingInfo"
            },
            "StakingInfo": {
              "maxRate": "Perquintill",
              "rewardRate": "RewardRate"
            },
            "RewardRate": {
              "annual": "Perquintill",
              "perBlock": "Perquintill"
            },
            "Delegator": {
              "delegations": "Vec<Stake>",
              "total": "Balance"
            },
            "DelegationCounter": {
              "round": "SessionIndex",
              "counter": "u32"
            },
            "DelegationDetails": {
              "owner": "DelegatorIdOf",
              "revoked": "bool",
              "permissions": "Permissions"
            },
            "DelegationHierarchyDetails": {
              "ctypeHash": "CtypeHashOf"
            },
            "DelegationStorageVersion": {
              "_enum": [
                "V1",
                "V2"
              ]
            },
            "DidCreationDetails": {
              "did": "DidIdentifierOf",
              "submitter": "AccountId",
              "newKeyAgreementKeys": "DidNewKeyAgreementKeys",
              "newAssertionMethodKey": "Option<DidVerificationKey>",
              "newCapabilityDelegationKey": "Option<DidVerificationKey>"
            },
            "DidFragmentUpdateAction_ServiceEndpoints": {
              "_enum": {
                "Ignore": "Null",
                "Change": "ServiceEndpoints",
                "Delete": "Null"
              }
            },
            "DidFragmentUpdateAction_DidVerificationKey": {
              "_enum": {
                "Ignore": "Null",
                "Change": "DidVerificationKey",
                "Delete": "Null"
              }
            },
            "DidStorageVersion": {
              "_enum": [
                "V1",
                "V2",
                "V3"
              ]
            },
            "MaxDelegatorsPerCollator": "u32",
            "MaxCollatorsPerDelegator": "u32",
            "StakingStorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0",
                "V3_0_0",
                "V4",
                "V5"
              ]
            },
            "MaxDelegatedAttestations": "u32",
            "MaxClaims": "u32",
            "MaxChildren": "u32",
            "DidNewKeyAgreementKeys": "BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",
            "DidKeyAgreementKeys": "BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",
            "DidVerificationKeysToRevoke": "BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",
            "MaxNewKeyAgreementKeys": "u32",
            "MaxTotalKeyAgreementKeys": "u32",
            "MaxVerificationKeysToRevoke": "u32",
            "MaxPublicKeysPerDid": "u32",
            "DidPublicKeyMap": "BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",
            "MinCollators": "u32",
            "MaxTopCandidates": "u32",
            "Candidate": {
              "id": "AccountId",
              "stake": "Balance",
              "delegators": "Vec<Stake>",
              "total": "Balance",
              "status": "CandidateStatus"
            },
            "CandidateStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "SessionIndex"
              }
            },
            "Deposit": {
              "owner": "AccountId",
              "amount": "Balance"
            }
          }
        },
        {
          "minmax": [
            10720,
            10899
          ],
          "types": {
            "RawDidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<Text>",
              "serviceEndpoints": "Vec<RawServiceEndpoints>",
              "details": "RawDidDetails"
            },
            "RawServiceEndpoints": {
              "id": "Text",
              "serviceTypes": "Vec<Text>",
              "urls": "Vec<Text>"
            },
            "RawDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, DidDidDetailsDidPublicKeyDetails<BlockNumber>>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "DidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<String>",
              "serviceEndpoints": "Vec<RpcServiceEndpoint>",
              "details": "RpcDidDetails"
            },
            "RpcServiceEndpoint": {
              "id": "String",
              "serviceTypes": "Vec<String>",
              "urls": "Vec<String>"
            },
            "RpcDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, RpcPublicKeyDetails>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "RpcPublicKeyDetails": {
              "key": "RpcDidPublicKey",
              "blockNumber": "BlockNumber"
            },
            "RpcDidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "RpcDidVerificationKey",
                "PublicEncryptionKey": "RpcDidEncryptionKey"
              }
            },
            "RpcDidVerificationKey": {
              "_enum": {
                "Ed25519": "AccountId32",
                "Sr25519": "AccountId32",
                "Ecdsa": "AccountId33"
              }
            },
            "RpcDidEncryptionKey": {
              "_enum": {
                "X25519": "AccountId32"
              }
            },
            "StakingRates": {
              "collatorStakingRate": "Perquintill",
              "collatorRewardRate": "Perquintill",
              "delegatorStakingRate": "Perquintill",
              "delegatorRewardRate": "Perquintill"
            }
          }
        },
        {
          "minmax": [
            10900,
            null
          ],
          "types": {
            "RawDidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<Text>",
              "serviceEndpoints": "Vec<RawServiceEndpoints>",
              "details": "RawDidDetails"
            },
            "RawServiceEndpoints": {
              "id": "Text",
              "serviceTypes": "Vec<Text>",
              "urls": "Vec<Text>"
            },
            "RawDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, DidDidDetailsDidPublicKeyDetails<BlockNumber>>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "DidLinkedInfo": {
              "identifier": "AccountId32",
              "accounts": "Vec<AccountId32>",
              "w3n": "Option<String>",
              "serviceEndpoints": "Vec<RpcServiceEndpoint>",
              "details": "RpcDidDetails"
            },
            "RpcServiceEndpoint": {
              "id": "String",
              "serviceTypes": "Vec<String>",
              "urls": "Vec<String>"
            },
            "RpcDidDetails": {
              "authenticationKey": "Hash",
              "keyAgreementKeys": "BTreeSet<Hash>",
              "delegationKey": "Option<Hash>",
              "attestationKey": "Option<Hash>",
              "publicKeys": "BTreeMap<Hash, RpcPublicKeyDetails>",
              "lastTxCounter": "BlockNumber",
              "deposit": "KiltSupportDeposit<AccountId32, Balance>"
            },
            "RpcPublicKeyDetails": {
              "key": "RpcDidPublicKey",
              "blockNumber": "BlockNumber"
            },
            "RpcDidPublicKey": {
              "_enum": {
                "PublicVerificationKey": "RpcDidVerificationKey",
                "PublicEncryptionKey": "RpcDidEncryptionKey"
              }
            },
            "RpcDidVerificationKey": {
              "_enum": {
                "Ed25519": "AccountId32",
                "Sr25519": "AccountId32",
                "Ecdsa": "AccountId33"
              }
            },
            "RpcDidEncryptionKey": {
              "_enum": {
                "X25519": "AccountId32"
              }
            },
            "StakingRates": {
              "collatorStakingRate": "Perquintill",
              "collatorRewardRate": "Perquintill",
              "delegatorStakingRate": "Perquintill",
              "delegatorRewardRate": "Perquintill"
            }
          }
        }
      ],
      "runtime": {
        "DidApi": [
          {
            "methods": {
              "query_did_by_w3n": {
                "description": "Return the information relative to the owner of the provided web3name, if any.",
                "params": [
                  {
                    "name": "name",
                    "type": "Text"
                  }
                ],
                "type": "Option<RawDidLinkedInfo<AccountId32, AccountId32, AccountId32, Balance, Key, BlockNumber>>"
              },
              "query_did_by_account_id": {
                "description": "Return the information relative to the DID to which the provided account is linked, if any.",
                "params": [
                  {
                    "name": "account",
                    "type": "AccountId32"
                  }
                ],
                "type": "Option<RawDidLinkedInfo<AccountId32, AccountId32, AccountId32, Balance, Key, BlockNumber>>"
              },
              "query_did": {
                "description": "Return the information relative to the owner of the provided DID, if present.",
                "params": [
                  {
                    "name": "did",
                    "type": "AccountId32"
                  }
                ],
                "type": "Option<RawDidLinkedInfo<AccountId32, AccountId32, AccountId32, Balance, Key, BlockNumber>>"
              }
            },
            "version": 1
          }
        ],
        "ParachainStakingApi": [
          {
            "methods": {
              "get_staking_rates": {
                "description": "Calculate the current staking and reward rates for collators and delegators",
                "params": [],
                "type": "StakingRates"
              },
              "get_unclaimed_staking_rewards": {
                "description": "Calculate the claimable staking rewards for a given account address",
                "params": [
                  {
                    "name": "account",
                    "type": "AccountId32"
                  }
                ],
                "type": "Balance"
              }
            },
            "version": 1
          }
        ]
      },
      "rpc": {
        "did": {
          "query": {
            "description": "Return the DID information linked to the provided DID identifier, if found.",
            "params": [
              {
                "name": "did",
                "type": "AccountId32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<DidLinkedInfo>"
          },
          "queryByWeb3Name": {
            "description": "Return the DID information linked to the provided web3name, if found.",
            "params": [
              {
                "name": "name",
                "type": "String"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<DidLinkedInfo>"
          },
          "queryByAccount": {
            "description": "Return the DID information linked to the provided account, if found.",
            "params": [
              {
                "name": "account",
                "type": "AccountId32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<DidLinkedInfo>"
          }
        }
      }
    },
    "mathchain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "Balance": "u128",
            "RefCount": "u32",
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "AccountServiceEnum": {
              "_enum": {
                "Nickname": "String",
                "Ethereum": "H160"
              }
            },
            "MultiAddressDetails": {
              "nickname": "AccountServiceEnum",
              "ethereum": "AccountServiceEnum"
            },
            "Nickname": "String",
            "Ethereum": "H160",
            "TransferAmountInfo": {
              "date": "u64",
              "daily_info": "Balance",
              "monthly_info": "Balance",
              "yearly_info": "Balance"
            },
            "AccountLimit": {
              "daily_limit": "Balance",
              "monthly_limit": "Balance",
              "yearly_limit": "Balance"
            },
            "Keys": "SessionKeys2"
          }
        }
      ]
    },
    "mathchain-galois": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "Balance": "u128",
            "RefCount": "u32",
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "AccountServiceEnum": {
              "_enum": {
                "Nickname": "String",
                "Ethereum": "H160"
              }
            },
            "MultiAddressDetails": {
              "nickname": "AccountServiceEnum",
              "ethereum": "AccountServiceEnum"
            },
            "Nickname": "String",
            "Ethereum": "H160",
            "TransferAmountInfo": {
              "date": "u64",
              "daily_info": "Balance",
              "monthly_info": "Balance",
              "yearly_info": "Balance"
            },
            "AccountLimit": {
              "daily_limit": "Balance",
              "monthly_limit": "Balance",
              "yearly_limit": "Balance"
            },
            "Keys": "SessionKeys2"
          }
        }
      ]
    },
    "moonbase": {
      "alias": {
        "assetManager": {
          "Balance": "TAssetBalance"
        },
        "xTokens": {
          "Balance": "TAssetBalance"
        }
      },
      "rpc": {
        "txpool": {
          "content": {
            "aliasSection": "txpool",
            "description": "The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultContent"
          },
          "inspect": {
            "aliasSection": "txpool",
            "description": "Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultInspect"
          },
          "status": {
            "aliasSection": "txpool",
            "description": "The number of Ethereum transaction that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultStatus"
          }
        },
        "trace": {
          "filter": {
            "aliasSection": "trace",
            "description": "Trace Filter",
            "params": [
              {
                "name": "filter",
                "type": "FilterRequest"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "debug": {
          "traceTransaction": {
            "aliasSection": "debug",
            "description": "Debug trace tx",
            "params": [
              {
                "name": "transaction_hash",
                "type": "H256"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "xcm": {
          "injectDownwardMessage": {
            "description": "Inject a downward message from the relay chain.",
            "params": [
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          },
          "injectHrmpMessage": {
            "description": "Inject an HRMP message from a dedicated channel from a sibling parachain",
            "params": [
              {
                "name": "sender",
                "type": "ParaId"
              },
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          }
        },
        "moon": {
          "isBlockFinalized": {
            "description": "Returns whether an Ethereum block is finalized",
            "params": [
              {
                "name": "blockHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          },
          "isTxFinalized": {
            "description": "Returns whether an Ethereum transaction is finalized",
            "params": [
              {
                "name": "txHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          }
        }
      },
      "instances": {
        "council": [
          "councilCollective"
        ],
        "technicalCommittee": [
          "techCommitteeCollective"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            4
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "RefCount": "u8",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            5,
            5
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            6,
            19
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "ValidatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "ValidatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            }
          }
        },
        {
          "minmax": [
            19,
            35
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            }
          }
        },
        {
          "minmax": [
            36,
            36
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId"
          }
        },
        {
          "minmax": [
            37,
            42
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            }
          }
        },
        {
          "minmax": [
            43,
            154
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToBottom": "Null",
                "AddedToTop": "Balance"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            }
          }
        },
        {
          "minmax": [
            155,
            199
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            }
          }
        },
        {
          "minmax": [
            200,
            399
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            400,
            599
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            600,
            799
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV0"
          }
        },
        {
          "minmax": [
            800,
            899
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV1",
            "JunctionV1": {
              "_enum": {
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            }
          }
        },
        {
          "minmax": [
            900,
            null
          ],
          "types": {
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            }
          }
        }
      ]
    },
    "moonbeam": {
      "alias": {
        "assetManager": {
          "Balance": "TAssetBalance"
        },
        "xTokens": {
          "Balance": "TAssetBalance"
        }
      },
      "rpc": {
        "txpool": {
          "content": {
            "aliasSection": "txpool",
            "description": "The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultContent"
          },
          "inspect": {
            "aliasSection": "txpool",
            "description": "Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultInspect"
          },
          "status": {
            "aliasSection": "txpool",
            "description": "The number of Ethereum transaction that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultStatus"
          }
        },
        "trace": {
          "filter": {
            "aliasSection": "trace",
            "description": "Trace Filter",
            "params": [
              {
                "name": "filter",
                "type": "FilterRequest"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "debug": {
          "traceTransaction": {
            "aliasSection": "debug",
            "description": "Debug trace tx",
            "params": [
              {
                "name": "transaction_hash",
                "type": "H256"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "xcm": {
          "injectDownwardMessage": {
            "description": "Inject a downward message from the relay chain.",
            "params": [
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          },
          "injectHrmpMessage": {
            "description": "Inject an HRMP message from a dedicated channel from a sibling parachain",
            "params": [
              {
                "name": "sender",
                "type": "ParaId"
              },
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          }
        },
        "moon": {
          "isBlockFinalized": {
            "description": "Returns whether an Ethereum block is finalized",
            "params": [
              {
                "name": "blockHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          },
          "isTxFinalized": {
            "description": "Returns whether an Ethereum transaction is finalized",
            "params": [
              {
                "name": "txHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          }
        }
      },
      "instances": {
        "council": [
          "councilCollective"
        ],
        "technicalCommittee": [
          "techCommitteeCollective"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            4
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "RefCount": "u8",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            5,
            5
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            6,
            19
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "ValidatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "ValidatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            }
          }
        },
        {
          "minmax": [
            19,
            35
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            }
          }
        },
        {
          "minmax": [
            36,
            36
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId"
          }
        },
        {
          "minmax": [
            37,
            42
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            }
          }
        },
        {
          "minmax": [
            43,
            154
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToBottom": "Null",
                "AddedToTop": "Balance"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            }
          }
        },
        {
          "minmax": [
            155,
            199
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            }
          }
        },
        {
          "minmax": [
            200,
            399
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            400,
            599
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            600,
            799
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV0"
          }
        },
        {
          "minmax": [
            800,
            899
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV1",
            "JunctionV1": {
              "_enum": {
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            }
          }
        },
        {
          "minmax": [
            900,
            null
          ],
          "types": {
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            }
          }
        }
      ]
    },
    "moonriver": {
      "alias": {
        "assetManager": {
          "Balance": "TAssetBalance"
        },
        "xTokens": {
          "Balance": "TAssetBalance"
        }
      },
      "rpc": {
        "txpool": {
          "content": {
            "aliasSection": "txpool",
            "description": "The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultContent"
          },
          "inspect": {
            "aliasSection": "txpool",
            "description": "Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultInspect"
          },
          "status": {
            "aliasSection": "txpool",
            "description": "The number of Ethereum transaction that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultStatus"
          }
        },
        "trace": {
          "filter": {
            "aliasSection": "trace",
            "description": "Trace Filter",
            "params": [
              {
                "name": "filter",
                "type": "FilterRequest"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "debug": {
          "traceTransaction": {
            "aliasSection": "debug",
            "description": "Debug trace tx",
            "params": [
              {
                "name": "transaction_hash",
                "type": "H256"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "xcm": {
          "injectDownwardMessage": {
            "description": "Inject a downward message from the relay chain.",
            "params": [
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          },
          "injectHrmpMessage": {
            "description": "Inject an HRMP message from a dedicated channel from a sibling parachain",
            "params": [
              {
                "name": "sender",
                "type": "ParaId"
              },
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          }
        },
        "moon": {
          "isBlockFinalized": {
            "description": "Returns whether an Ethereum block is finalized",
            "params": [
              {
                "name": "blockHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          },
          "isTxFinalized": {
            "description": "Returns whether an Ethereum transaction is finalized",
            "params": [
              {
                "name": "txHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          }
        }
      },
      "instances": {
        "council": [
          "councilCollective"
        ],
        "technicalCommittee": [
          "techCommitteeCollective"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            4
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "RefCount": "u8",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            5,
            5
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            6,
            19
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "ValidatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "ValidatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            }
          }
        },
        {
          "minmax": [
            19,
            35
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            }
          }
        },
        {
          "minmax": [
            36,
            36
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId"
          }
        },
        {
          "minmax": [
            37,
            42
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            }
          }
        },
        {
          "minmax": [
            43,
            154
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToBottom": "Null",
                "AddedToTop": "Balance"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            }
          }
        },
        {
          "minmax": [
            155,
            199
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            }
          }
        },
        {
          "minmax": [
            200,
            399
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            400,
            599
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            600,
            799
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV0"
          }
        },
        {
          "minmax": [
            800,
            899
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV1",
            "JunctionV1": {
              "_enum": {
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            }
          }
        },
        {
          "minmax": [
            900,
            null
          ],
          "types": {
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            }
          }
        }
      ]
    },
    "moonshadow": {
      "alias": {
        "assetManager": {
          "Balance": "TAssetBalance"
        },
        "xTokens": {
          "Balance": "TAssetBalance"
        }
      },
      "rpc": {
        "txpool": {
          "content": {
            "aliasSection": "txpool",
            "description": "The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultContent"
          },
          "inspect": {
            "aliasSection": "txpool",
            "description": "Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultInspect"
          },
          "status": {
            "aliasSection": "txpool",
            "description": "The number of Ethereum transaction that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultStatus"
          }
        },
        "trace": {
          "filter": {
            "aliasSection": "trace",
            "description": "Trace Filter",
            "params": [
              {
                "name": "filter",
                "type": "FilterRequest"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "debug": {
          "traceTransaction": {
            "aliasSection": "debug",
            "description": "Debug trace tx",
            "params": [
              {
                "name": "transaction_hash",
                "type": "H256"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "xcm": {
          "injectDownwardMessage": {
            "description": "Inject a downward message from the relay chain.",
            "params": [
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          },
          "injectHrmpMessage": {
            "description": "Inject an HRMP message from a dedicated channel from a sibling parachain",
            "params": [
              {
                "name": "sender",
                "type": "ParaId"
              },
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          }
        },
        "moon": {
          "isBlockFinalized": {
            "description": "Returns whether an Ethereum block is finalized",
            "params": [
              {
                "name": "blockHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          },
          "isTxFinalized": {
            "description": "Returns whether an Ethereum transaction is finalized",
            "params": [
              {
                "name": "txHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          }
        }
      },
      "instances": {
        "council": [
          "councilCollective"
        ],
        "technicalCommittee": [
          "techCommitteeCollective"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            4
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "RefCount": "u8",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            5,
            5
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            6,
            19
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "ValidatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "ValidatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            }
          }
        },
        {
          "minmax": [
            19,
            35
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            }
          }
        },
        {
          "minmax": [
            36,
            36
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId"
          }
        },
        {
          "minmax": [
            37,
            42
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            }
          }
        },
        {
          "minmax": [
            43,
            154
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToBottom": "Null",
                "AddedToTop": "Balance"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            }
          }
        },
        {
          "minmax": [
            155,
            199
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            }
          }
        },
        {
          "minmax": [
            200,
            399
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            400,
            599
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            600,
            799
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV0"
          }
        },
        {
          "minmax": [
            800,
            899
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV1",
            "JunctionV1": {
              "_enum": {
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            }
          }
        },
        {
          "minmax": [
            900,
            null
          ],
          "types": {
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            }
          }
        }
      ]
    },
    "mybank.network Testnet": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Token": "u8",
            "DEXShare": "(u8, u8)",
            "CurrencyId": {
              "_enum": {
                "Token": "Token",
                "DEXShare": "DEXShare"
              }
            },
            "TradingPair": "(CurrencyId, CurrencyId)",
            "CurrencyIds": {
              "_": "Vec<CurrencyId>"
            },
            "TradingPairProvisionParameters": {
              "min_contribution": "(Balance, Balance)",
              "target_provision": "(Balance, Balance)",
              "accumulated_provision": "(Balance, Balance)",
              "not_before": "BlockNumber"
            },
            "TradingPairStatus": {
              "_enum": {
                "NotEnabled": null,
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": null
              }
            },
            "PoolId": "CurrencyId",
            "Price": "FixedU128",
            "OracleKey": "u8",
            "OracleValue": "FixedU128",
            "Amount": "i128",
            "Balance": "u128",
            "Ratio": "FixedU128",
            "InterestInfo": {
              "critical_point": "Ratio",
              "base": "Ratio",
              "slope_1": "Ratio",
              "slope_2": "Ratio"
            },
            "AssetPoolInfo": {
              "maximum_total_debit_ratio": "Ratio",
              "minimum_deposit": "Balance",
              "minimum_debit": "Balance",
              "health_ratio": "Ratio",
              "total_deposit": "Balance",
              "total_debit": "Balance",
              "deposit_rate": "Ratio",
              "debit_rate": "Ratio",
              "deposit_apy": "Ratio",
              "debit_apy": "Ratio",
              "reserve_factor": "Ratio",
              "interest_info": "InterestInfo"
            },
            "LoanInfo": {
              "deposit": "Balance",
              "debit": "Balance"
            },
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "u64"
            },
            "PoolInfo": {
              "total_shares": "Compact<u128>",
              "total_rewards": "Compact<u128>",
              "total_withdrawn_rewards": "Compact<u128>"
            }
          }
        }
      ]
    },
    "neatcoin": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Label": "Vec<u8>",
            "Name": "Vec<Label>",
            "NameHash": "H256",
            "Value": {
              "_enum": {
                "U32": "U32",
                "U64": "U64",
                "U128": "U128",
                "Bool": "Bool"
              }
            }
          }
        }
      ]
    },
    "nftmart": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Properties": "u8",
            "NFTMetadata": "Vec<u8>",
            "BlockNumber": "u32",
            "BlockNumberOf": "BlockNumber",
            "BlockNumberFor": "BlockNumber",
            "GlobalId": "u64",
            "CurrencyId": "u32",
            "CurrencyIdOf": "CurrencyId",
            "Amount": "i128",
            "AmountOf": "Amount",
            "CategoryId": "GlobalId",
            "CategoryIdOf": "CategoryId",
            "ClassId": "u32",
            "ClassIdOf": "ClassId",
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "ClassInfoOf": {
              "metadata": "NFTMetadata",
              "totalIssuance": "Compact<TokenId>",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "ClassData": {
              "deposit": "Compact<Balance>",
              "properties": "Properties",
              "name": "Vec<u8>",
              "description": "Vec<u8>",
              "createBlock": "Compact<BlockNumberOf>",
              "royaltyRate": "Compact<PerU16>",
              "categoryIds": "Vec<CategoryId>"
            },
            "TokenInfoOf": {
              "metadata": "NFTMetadata",
              "data": "TokenData",
              "quantity": "Compact<TokenId>"
            },
            "TokenData": {
              "deposit": "Compact<Balance>",
              "createBlock": "Compact<BlockNumberOf>",
              "royalty_rate": "Compact<PerU16>",
              "creator": "AccountId",
              "royaltyBeneficiary": "AccountId"
            },
            "AccountToken": {
              "quantity": "Compact<TokenId>",
              "reserved": "Compact<TokenId>"
            },
            "CategoryData": {
              "metadata": "NFTMetadata",
              "nftCount": "Compact<Balance>"
            },
            "OrderItem": {
              "classId": "Compact<ClassId>",
              "tokenId": "Compact<TokenId>",
              "quantity": "Compact<TokenId>"
            },
            "OrderOf": {
              "currencyId": "Compact<CurrencyId>",
              "deposit": "Compact<Balance>",
              "price": "Compact<Balance>",
              "deadline": "Compact<BlockNumberOf>",
              "items": "Vec<OrderItem>",
              "commissionRate": "Compact<PerU16>"
            },
            "OfferOf": {
              "currencyId": "Compact<CurrencyId>",
              "price": "Compact<Balance>",
              "deadline": "Compact<BlockNumberOf>",
              "items": "Vec<OrderItem>",
              "commissionRate": "Compact<PerU16>"
            },
            "BritishAuctionOf": {
              "currencyId": "Compact<CurrencyId>",
              "hammerPrice": "Compact<Balance>",
              "minRaise": "Compact<PerU16>",
              "deposit": "Compact<Balance>",
              "initPrice": "Compact<Balance>",
              "deadline": "Compact<BlockNumberOf>",
              "allowDelay": "bool",
              "items": "Vec<OrderItem>",
              "commissionRate": "Compact<PerU16>"
            },
            "BritishAuctionBidOf": {
              "lastBidPrice": "Compact<Balance>",
              "lastBidAccount": "Option<AccountId>",
              "lastBidBlock": "Compact<BlockNumberOf>",
              "commissionAgent": "Option<AccountId>",
              "commissionData": "Option<Vec<u8>>"
            },
            "DutchAuctionOf": {
              "currencyId": "Compact<CurrencyId>",
              "deposit": "Compact<Balance>",
              "minPrice": "Compact<Balance>",
              "maxPrice": "Compact<Balance>",
              "deadline": "Compact<BlockNumberOf>",
              "createdBlock": "Compact<BlockNumberOf>",
              "items": "Vec<OrderItem>",
              "allowBritishAuction": "bool",
              "minRaise": "Compact<PerU16>",
              "commissionRate": "Compact<PerU16>"
            },
            "DutchAuctionBidOf": "BritishAuctionBidOf"
          }
        }
      ]
    },
    "node-moonbeam": {
      "alias": {
        "assetManager": {
          "Balance": "TAssetBalance"
        },
        "xTokens": {
          "Balance": "TAssetBalance"
        }
      },
      "rpc": {
        "txpool": {
          "content": {
            "aliasSection": "txpool",
            "description": "The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultContent"
          },
          "inspect": {
            "aliasSection": "txpool",
            "description": "Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultInspect"
          },
          "status": {
            "aliasSection": "txpool",
            "description": "The number of Ethereum transaction that are currently in the Substrate transaction pool.",
            "params": [],
            "type": "TxPoolResultStatus"
          }
        },
        "trace": {
          "filter": {
            "aliasSection": "trace",
            "description": "Trace Filter",
            "params": [
              {
                "name": "filter",
                "type": "FilterRequest"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "debug": {
          "traceTransaction": {
            "aliasSection": "debug",
            "description": "Debug trace tx",
            "params": [
              {
                "name": "transaction_hash",
                "type": "H256"
              }
            ],
            "type": "Result<Vec<TransactionTrace>>"
          }
        },
        "xcm": {
          "injectDownwardMessage": {
            "description": "Inject a downward message from the relay chain.",
            "params": [
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          },
          "injectHrmpMessage": {
            "description": "Inject an HRMP message from a dedicated channel from a sibling parachain",
            "params": [
              {
                "name": "sender",
                "type": "ParaId"
              },
              {
                "name": "message",
                "type": "Vec<u8>"
              }
            ],
            "type": "Result<()>"
          }
        },
        "moon": {
          "isBlockFinalized": {
            "description": "Returns whether an Ethereum block is finalized",
            "params": [
              {
                "name": "blockHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          },
          "isTxFinalized": {
            "description": "Returns whether an Ethereum transaction is finalized",
            "params": [
              {
                "name": "txHash",
                "type": "Hash"
              }
            ],
            "type": "bool"
          }
        }
      },
      "instances": {
        "council": [
          "councilCollective"
        ],
        "technicalCommittee": [
          "techCommitteeCollective"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            4
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "RefCount": "u8",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            5,
            5
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8"
          }
        },
        {
          "minmax": [
            6,
            19
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "ValidatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "ValidatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            }
          }
        },
        {
          "minmax": [
            19,
            35
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            }
          }
        },
        {
          "minmax": [
            36,
            36
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId"
          }
        },
        {
          "minmax": [
            37,
            42
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            }
          }
        },
        {
          "minmax": [
            43,
            154
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToBottom": "Null",
                "AddedToTop": "Balance"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            }
          }
        },
        {
          "minmax": [
            155,
            199
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            }
          }
        },
        {
          "minmax": [
            200,
            399
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            400,
            599
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            }
          }
        },
        {
          "minmax": [
            600,
            799
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV0"
          }
        },
        {
          "minmax": [
            800,
            899
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "Address": "AccountId",
            "Balance": "u128",
            "LookupSource": "AccountId",
            "Account": {
              "nonce": "U256",
              "balance": "u128"
            },
            "EthTransaction": "LegacyTransaction",
            "DispatchErrorModule": "DispatchErrorModuleU8",
            "ExtrinsicSignature": "EthereumSignature",
            "RoundIndex": "u32",
            "Candidate": {
              "id": "AccountId",
              "fee": "Perbill",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "TxPoolResultContent": {
              "pending": "HashMap<H160, HashMap<U256, PoolTransaction>>",
              "queued": "HashMap<H160, HashMap<U256, PoolTransaction>>"
            },
            "TxPoolResultInspect": {
              "pending": "HashMap<H160, HashMap<U256, Summary>>",
              "queued": "HashMap<H160, HashMap<U256, Summary>>"
            },
            "TxPoolResultStatus": {
              "pending": "U256",
              "queued": "U256"
            },
            "Summary": "Bytes",
            "PoolTransaction": {
              "hash": "H256",
              "nonce": "U256",
              "blockHash": "Option<H256>",
              "blockNumber": "Option<U256>",
              "from": "H160",
              "to": "Option<H160>",
              "value": "U256",
              "gasPrice": "U256",
              "gas": "U256",
              "input": "Bytes"
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "OrderedSet": "Vec<Bond>",
            "Collator": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "SystemInherentData": {
              "validationData": "PersistedValidationData",
              "relayChain_state": "StorageProof",
              "downwardMessages": "Vec<InboundDownwardMessage>",
              "horizontalMessages": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
            },
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "AuthorId": "AccountId32",
            "AccountId32": "H256",
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance",
              "contributedRelayAddresses": "Vec<RelayChainAccountId>"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": "Null"
              }
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "NominatorStatus"
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "AssetType": {
              "_enum": {
                "Xcm": "MultiLocation"
              }
            },
            "AssetId": "u128",
            "TAssetBalance": "u128",
            "ENUM_AccountId32": {
              "network": "NetworkId",
              "id": "[u8; 32]"
            },
            "ENUM_AccountKey20": {
              "network": "NetworkId",
              "key": "[u8; 20]"
            },
            "ENUM_AccountIndex64": {
              "network": "NetworkId",
              "index": "Compact<u64>"
            },
            "ENUM_Plurality": {
              "id": "BodyId",
              "part": "BodyPart"
            },
            "JunctionV0": {
              "_enum": {
                "Parent": "Null",
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            },
            "CurrencyId": {
              "_enum": {
                "SelfReserve": "Null",
                "OtherReserve": "u128"
              }
            },
            "AssetRegistrarMetadata": {
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8",
              "isFrozen": "bool"
            },
            "VestingBlockNumber": "u32",
            "MultiLocation": "MultiLocationV1",
            "JunctionV1": {
              "_enum": {
                "Parachain": "Compact<u32>",
                "AccountId32": "ENUM_AccountId32",
                "AccountIndex64": "ENUM_AccountIndex64",
                "AccountKey20": "ENUM_AccountKey20",
                "PalletInstance": "u8",
                "GeneralIndex": "Compact<u128>",
                "GeneralKey": "Vec<u8>",
                "OnlyChild": "Null",
                "Plurality": "ENUM_Plurality"
              }
            }
          }
        },
        {
          "minmax": [
            900,
            null
          ],
          "types": {
            "ProxyType": {
              "_enum": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking",
                "CancelProxy",
                "Balances",
                "AuthorMapping"
              ]
            }
          }
        }
      ]
    },
    "node-polkadex": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "BurnTxDetails": {
              "approvals": "u32",
              "approvers": "Vec<AccountId>"
            },
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule"
          }
        }
      ]
    },
    "nodle-chain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Amendment": "Call",
            "Application": {
              "candidate": "AccountId",
              "candidate_deposit": "Balance",
              "challenged_block": "BlockNumber",
              "challenger": "Option<AccountId>",
              "challenger_deposit": "Option<Balance>",
              "created_block": "BlockNumber",
              "metadata": "Vec<u8>",
              "voters_against": "Vec<(AccountId, Balance)>",
              "voters_for": "Vec<(AccountId, Balance)>",
              "votes_against": "Option<Balance>",
              "votes_for": "Option<Balance>"
            },
            "CertificateId": "AccountId",
            "RootCertificate": {
              "child_revocations": "Vec<CertificateId>",
              "created": "BlockNumber",
              "key": "CertificateId",
              "owner": "AccountId",
              "renewed": "BlockNumber",
              "revoked": "bool",
              "validity": "BlockNumber"
            },
            "VestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "period_count": "u32",
              "per_period": "Balance"
            },
            "VestingScheduleOf": "VestingSchedule"
          }
        }
      ]
    },
    "oak": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {}
        }
      ]
    },
    "opal": {
      "rpc": {
        "unique": {
          "adminlist": {
            "description": "Get admin list",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "allowlist": {
            "description": "Get allowlist",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "accountTokens": {
            "description": "Get tokens owned by account",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u32>"
          },
          "collectionTokens": {
            "description": "Get tokens contained in collection",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u32>"
          },
          "lastTokenId": {
            "description": "Get last token id",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u32"
          },
          "totalSupply": {
            "description": "Get amount of unique collection tokens",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u32"
          },
          "accountBalance": {
            "description": "Get amount of different user tokens",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u32"
          },
          "balance": {
            "description": "Get amount of specific account token",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u128"
          },
          "allowance": {
            "description": "Get allowed amount",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "sender",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "spender",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u128"
          },
          "tokenOwner": {
            "description": "Get token owner",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "topmostTokenOwner": {
            "description": "Get token owner, in case of nested token - find parent recursive",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "tokenChildren": {
            "description": "Get tokens nested directly into the token",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsTokenChild>"
          },
          "constMetadata": {
            "description": "Get token constant metadata",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u8>"
          },
          "variableMetadata": {
            "description": "Get token variable metadata",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u8>"
          },
          "collectionProperties": {
            "description": "Get collection properties",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsProperty>"
          },
          "tokenProperties": {
            "description": "Get token properties",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsProperty>"
          },
          "propertyPermissions": {
            "description": "Get property permissions",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsPropertyKeyPermission>"
          },
          "tokenData": {
            "description": "Get token data",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "UpDataStructsTokenData"
          },
          "tokenExists": {
            "description": "Check if token exists",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "bool"
          },
          "collectionById": {
            "description": "Get collection by specified id",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<UpDataStructsRpcCollection>"
          },
          "collectionStats": {
            "description": "Get collection stats",
            "params": [
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "UpDataStructsCollectionStats"
          },
          "allowed": {
            "description": "Check if user is allowed to use collection",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "bool"
          },
          "nextSponsored": {
            "description": "Get number of blocks when sponsored transaction is available",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<u64>"
          },
          "effectiveCollectionLimits": {
            "description": "Get effective collection limits",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<UpDataStructsCollectionLimits>"
          }
        }
      }
    },
    "opportunity": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "Transaction": {
              "nonce": "U256",
              "action": "String",
              "gas_price": "u64",
              "gas_limit": "u64",
              "value": "U256",
              "input": "Vec<u8>",
              "signature": "Signature"
            },
            "Signature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "XCurrencyId": {
              "chain_id": "ChainId",
              "currency_id": "Bytes"
            },
            "CurrencyIdOf": "CurrencyId",
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol"
              }
            },
            "TokenSymbol": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT",
                "XBTC",
                "LDOT",
                "RENBTC",
                "SDN",
                "PLM"
              ]
            },
            "AmountOf": "Amount",
            "Amount": "i128",
            "DataVersion": "u64",
            "RequestIdentifier": "u64",
            "SpecIndex": "Vec<u8>",
            "CDP": {
              "liquidation_fee": "Balance",
              "max_collateraization_rate": "U256",
              "stability_fee": "Balance"
            },
            "SocketIndex": "i32",
            "Currency": "Balances",
            "BridgeChainId": "u8",
            "ResourceId": "[u8; 32]",
            "DepositNonce": "u64",
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "enum"
            },
            "Erc721Token": {
              "id": "TokenId",
              "metadata": "Vec<u8>"
            },
            "TokenId": "U256"
          }
        }
      ]
    },
    "origintrail-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "parallel": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "tokens": {
          "queryExistentialDeposit": {
            "description": "Query Existential Deposit for a given currency.",
            "params": [
              {
                "name": "currencyId",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "NumberOrHex",
            "isSubscription": false,
            "jsonrpc": "tokens_queryExistentialDeposit",
            "method": "queryExistentialDeposit",
            "section": "tokens"
          }
        },
        "loans": {
          "getCollateralLiquidity": {
            "description": "Retrieves collateral liquidity for the given user.",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Liquidity, Shortfall, Liquidity, Shortfall)",
            "isSubscription": false,
            "jsonrpc": "loans_getCollateralLiquidity",
            "method": "getCollateralLiquidity",
            "section": "loans"
          },
          "getLiquidationThresholdLiquidity": {
            "description": "Retrieves liquidation threshold liquidity for the given user.",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Liquidity, Shortfall, Liquidity, Shortfall)",
            "isSubscription": false,
            "jsonrpc": "loans_getLiquidationThresholdLiquidity",
            "method": "getLiquidationThresholdLiquidity",
            "section": "loans"
          },
          "getMarketStatus": {
            "description": "Retrieves market status data for a given asset id.",
            "params": [
              {
                "name": "asset_id",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",
            "isSubscription": false,
            "jsonrpc": "loans_getMarketStatus",
            "method": "getMarketStatus",
            "section": "loans"
          }
        },
        "router": {
          "getBestRoute": {
            "description": "Returns the route that results in the largest amount out for amount in",
            "params": [
              {
                "name": "amount",
                "type": "Balance"
              },
              {
                "name": "token_in",
                "type": "CurrencyId"
              },
              {
                "name": "token_out",
                "type": "CurrencyId"
              },
              {
                "name": "reversed",
                "type": "bool"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Vec<CurrencyId>, FixedU128)",
            "isSubscription": false,
            "jsonrpc": "router_getBestRoute",
            "method": "getBestRoute",
            "section": "router"
          }
        }
      },
      "instances": {
        "council": [
          "generalCouncil"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "isActive": "bool",
              "totalDeposited": "Balance",
              "unlockHeight": "BlockNumber",
              "coolDownDuration": "BlockNumber",
              "rewardDuration": "BlockNumber",
              "periodFinish": "BlockNumber",
              "lastUpdateBlock": "BlockNumber",
              "rewardRate": "Balance",
              "rewardPerShareStored": "Balance"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Deposits": {
              "voucherBalance": "Balance",
              "isCollateral": "bool"
            },
            "BorrowSnapshot": {
              "principal": "Balance",
              "borrowIndex": "u128"
            },
            "EarnedSnapshot": {
              "totalEarnedPrior": "Balance",
              "exchangeRatePrior": "u128"
            },
            "JumpModel": {
              "baseRate": "Rate",
              "jumpRate": "Rate",
              "fullRate": "Rate",
              "jumpUtilization": "Ratio"
            },
            "CurveModel": {
              "baseRate": "Rate"
            },
            "InterestRateModel": {
              "_enum": {
                "JumpModel": "JumpModel",
                "CurveModel": "CurveModel"
              }
            },
            "Market": {
              "collateralFactor": "Ratio",
              "liquidationThreshold": "Ratio",
              "reserveFactor": "Ratio",
              "closeFactor": "Ratio",
              "liquidateIncentive": "Rate",
              "liquidateIncentiveReservedFactor": "Ratio",
              "rateModel": "InterestRateModel",
              "state": "MarketState",
              "supplyCap": "Balance",
              "borrowCap": "Balance",
              "ptokenId": "CurrencyId"
            },
            "MarketState": {
              "_enum": [
                "Active",
                "Pending",
                "Supervision"
              ]
            },
            "RewardMarketState": {
              "index": "Balance",
              "block": "BlockNumber"
            },
            "Liquidity": "FixedU128",
            "Shortfall": "FixedU128",
            "ReservableAmount": {
              "total": "Balance",
              "reserved": "Balance"
            },
            "MatchingLedger": {
              "totalStakeAmount": "ReservableAmount",
              "totalUnstakeAmount": "ReservableAmount"
            },
            "UnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "StakingLedger": {
              "stash": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>",
              "claimedRewards": "Vec<EraIndex>"
            },
            "DerivativeIndex": "u16",
            "Pool": {
              "baseAmount": "Balance",
              "quoteAmount": "Balance",
              "baseAmountLast": "Balance",
              "quoteAmountLast": "Balance",
              "lpTokenId": "AssetId",
              "blockTimestampLast": "BlockNumber",
              "price0CumulativeLast": "Balance",
              "price1CumulativeLast": "Balance"
            },
            "Amount": "i128",
            "AmountOf": "Amount",
            "Rate": "FixedU128",
            "Ratio": "Permill",
            "Timestamp": "u64",
            "PriceDetail": "(Price, Timestamp)",
            "CurrencyId": "AssetId",
            "CurrencyIdOf": "CurrencyId",
            "Currency": "CurrencyId",
            "AssetIdOf": "AssetId",
            "OracleKey": "AssetId",
            "BoundedBalance": "BoundedVec<(Balance, BlockNumber), u32>",
            "UserPosition": {
              "depositBalance": "Balance",
              "lockBalanceItems": "BoundedBalance",
              "rewardAmount": "Balance",
              "rewardPerSharePaid": "Balance"
            },
            "Route": "Vec<(AssetId, AssetId)>",
            "VaultPhase": {
              "_enum": [
                "Pending",
                "Contributing",
                "Closed",
                "Failed",
                "Succeeded",
                "Expired"
              ]
            },
            "ContributionStrategy": {
              "_enum": [
                "XCM",
                "XCMPROXY"
              ]
            },
            "ChildStorageKind": {
              "_enum": [
                "Pending",
                "Flying",
                "Contributed"
              ]
            },
            "TrieIndex": "u32",
            "LeasePeriod": "BlockNumber",
            "Vault": {
              "ctoken": "AssetId",
              "phase": "VaultPhase",
              "contributed": "Balance",
              "pending": "Balance",
              "flying": "Balance",
              "contributionStrategy": "ContributionStrategy",
              "cap": "Balance",
              "endBlock": "BlockNumber",
              "trieIndex": "TrieIndex",
              "leaseStart": "LeasePeriod",
              "leaseEnd": "LeasePeriod"
            },
            "XcmWeightFeeMisc": {
              "weight": "Weight",
              "fee": "Balance"
            },
            "XcmCall": {
              "_enum": [
                "Bond",
                "BondExtra",
                "Unbond",
                "Rebond",
                "WithdrawUnbonded",
                "Nominate",
                "Contribute",
                "Withdraw",
                "AddMemo"
              ]
            },
            "BridgeToken": {
              "id": "CurrencyId",
              "external": "bool",
              "fee": "Balance"
            },
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "TAssetBalance": "u128"
          }
        }
      ],
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "parami": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {}
        }
      ]
    },
    "phoenix-node": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Attestation": {
              "attester": "AccountId",
              "ctypeHash": "Hash",
              "delegationId": "Option<DelegationNodeId>",
              "revoked": "bool"
            },
            "Balance": "u128",
            "DelegationNode": {
              "owner": "AccountId",
              "parent": "Option<DelegationNodeId>",
              "permissions": "Permissions",
              "revoked": "bool",
              "rootId": "DelegationNodeId"
            },
            "DelegationNodeId": "Hash",
            "DelegationRoot": {
              "ctypeHash": "Hash",
              "owner": "AccountId",
              "revoked": "bool"
            },
            "DidRecord": {
              "boxKey": "Hash",
              "docRef": "Option<Vec<u8>>",
              "signKey": "Hash"
            },
            "Index": "u64",
            "Permissions": "u32",
            "PublicBoxKey": "Hash",
            "PublicSigningKey": "Hash",
            "Signature": "MultiSignature"
          }
        }
      ]
    },
    "phoenix-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Attestation": {
              "attester": "AccountId",
              "ctypeHash": "Hash",
              "delegationId": "Option<DelegationNodeId>",
              "revoked": "bool"
            },
            "Balance": "u128",
            "DelegationNode": {
              "owner": "AccountId",
              "parent": "Option<DelegationNodeId>",
              "permissions": "Permissions",
              "revoked": "bool",
              "rootId": "DelegationNodeId"
            },
            "DelegationNodeId": "Hash",
            "DelegationRoot": {
              "ctypeHash": "Hash",
              "owner": "AccountId",
              "revoked": "bool"
            },
            "DidRecord": {
              "boxKey": "Hash",
              "docRef": "Option<Vec<u8>>",
              "signKey": "Hash"
            },
            "Index": "u64",
            "Permissions": "u32",
            "PublicBoxKey": "Hash",
            "PublicSigningKey": "Hash",
            "Signature": "MultiSignature"
          }
        }
      ]
    },
    "pichiu": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "DataRequest": {
              "para_id": "Option<ParaId>",
              "account_id": "Option<AccountId>",
              "requested_block_number": "BlockNumber",
              "processed_block_number": "Option<BlockNumber>",
              "requested_timestamp": "u128",
              "processed_timestamp": "Option<u128>",
              "payload": "Text",
              "feed_name": "Text",
              "is_query": "bool",
              "url": "Option<Text>"
            }
          }
        }
      ]
    },
    "pioneer-runtime": {
      "Amount": "i128",
      "AmountOf": "Amount",
      "AuctionId": "u64",
      "AuctionIdOf": "AuctionId",
      "BalanceIdOf": "Balance",
      "MetaverseId": "u64",
      "FungibleTokenId": {
        "_enum": {
          "NativeToken": "TokenId",
          "FungibleToken": "TokenId",
          "DEXShare": "(TokenId, TokenId)",
          "MiningResource": "TokenId"
        }
      },
      "CurrencyIdOf": "FungibleTokenId",
      "TradingPairStatus": {
        "_enum": [
          "NotEnabled",
          "Enabled"
        ]
      },
      "TradingPair": "(FungibleTokenId,FungibleTokenId)",
      "TokenId": "u64",
      "SpotId": "u32",
      "ItemId": {
        "_enum": {
          "NFT": "AssetId",
          "Spot": "(u64, MetaverseId)",
          "Metaverse": "MetaverseId",
          "Block": "u64"
        }
      },
      "Address": "MultiAddress",
      "LookupSource": "MultiAddress",
      "AccountInfo": "AccountInfoWithTripleRefCount",
      "AssetInfo": {
        "owner": "AccountId",
        "data": "AssetData"
      },
      "AssetId": "u64",
      "AssetData": {
        "name": "Text",
        "description": "Text",
        "properties": "Text",
        "supporters": "Vec<AccountId>"
      },
      "AuctionItem": {
        "itemId": "ItemId",
        "recipient": "AccountId",
        "initialAmount": "Balance",
        "amount": "Balance",
        "startTime": "u32",
        "endTime": "u32",
        "auctionType": "AuctionType",
        "listingLevel": "ListingLevel",
        "currencyId": "FungibleTokenId"
      },
      "AuctionInfo": {
        "bid": "Option<(AccountId,Balance)>",
        "start": "BlockNumber",
        "end": "Option<BlockNumber>"
      },
      "AuctionType": {
        "_enum": [
          "Auction",
          "BuyNow"
        ]
      },
      "RentId": "u64",
      "RentalInfo": {
        "owner": "AccountId",
        "start": "BlockNumber",
        "end": "Option<BlockNumber>",
        "price_per_block": "Balance"
      },
      "CountryId": "u64",
      "CollectionId": "u64",
      "ClassId": "u32",
      "ClassInfoOf": {
        "metadata": "Vec<u8>",
        "totalIssuance": "TokenId",
        "owner": "AccountId",
        "data": "NftClassData"
      },
      "TokenInfoOf": {
        "metadata": "Vec<u8>",
        "owner": "AccountId",
        "data": "NftAssetData"
      },
      "NftCollectionData": {
        "name": "Vec<u8>",
        "owner": "AccountId",
        "properties": "Vec<u8>"
      },
      "NftGroupCollectionData": {
        "name": "Vec<u8>",
        "properties": "Vec<u8>"
      },
      "NftAssetData": {
        "deposit": "Balance",
        "attributes": "Attributes"
      },
      "NftClassData": {
        "deposit": "Balance",
        "attributes": "Attributes",
        "tokenType": "TokenType",
        "collectionType": "CollectionType",
        "totalSupply": "u64",
        "initialSupply": "u64"
      },
      "NetworkId": {
        "_enum": {
          "Any": "Null",
          "Named": "Vec<u8>",
          "Polkadot": "Null",
          "Kusama": "Null"
        }
      },
      "CollectionType": {
        "_enum": [
          "Collectable",
          "Wearable",
          "Executable"
        ]
      },
      "CurrencyId": "SocialTokenCurrencyId",
      "TokenSymbol": {
        "_enum": [
          "NUUM",
          "AUSD",
          "ACA",
          "DOT"
        ]
      },
      "CountryCurrencyId": "u32",
      "ChainId": {
        "_enum": {
          "RelayChain": "Null",
          "ParaChain": "ParaId"
        }
      },
      "XCurrencyId": {
        "chain_id": "ChainId",
        "currency_id": "CurrencyId"
      },
      "GroupCollectionId": "u64",
      "ClassIdOf": "ClassId",
      "TokenIdOf": "TokenId",
      "PoolId": "u32",
      "SocialTokenCurrencyId": {
        "_enum": {
          "NativeToken": "TokenId",
          "FungibleToken": "TokenId",
          "DEXShare": "(TokenId, TokenId)",
          "MiningResource": "TokenId"
        }
      },
      "Country": {
        "owner": "AccountId",
        "metadata": "Text",
        "currency_id": "SocialTokenCurrencyId"
      },
      "Ticker": "Vec<u8>",
      "Token": {
        "ticker": "Ticker",
        "total_supply": "Balance"
      },
      "CountryFund": {
        "vault": "AccountId",
        "value": "u128",
        "backing": "u128",
        "currency_id": "SocialTokenCurrencyId"
      },
      "LandId": "u64",
      "BlindBoxId": "u64",
      "BlindBoxType": {
        "_enum": [
          "KSM",
          "NUUM",
          "MainnetNFTHat",
          "MainnetNFTJacket",
          "MainnetNFTPants",
          "MainnetNFTShoes",
          "CollectableNFT"
        ]
      },
      "BlindBoxRewardItem": {
        "recipient": "AccountId",
        "amount": "u32",
        "blindbox_type": "BlindBoxType"
      },
      "TokenType": {
        "_enum": [
          "Transferable",
          "BoundToAddress"
        ]
      },
      "ListingLevel": {
        "_enum": {
          "Global": "Null",
          "Local": "MetaverseId"
        }
      },
      "ResourceId": "[u8; 32]",
      "VoteThreshold": {
        "_enum": [
          "SuperMajorityApprove",
          "SuperMajorityAgainst",
          "RelativeMajority"
        ]
      },
      "ProposalId": "u64",
      "ReferendumId": "u64",
      "CountryParameter": {
        "_enum": {
          "MaxProposals": "u8",
          "SetReferendumJury": "AccountId"
        }
      },
      "PreimageStatus": {
        "_enum": {
          "Missing": "BlockNumber",
          "Available": {
            "data": "Vec<u8>",
            "provider": "AccountId",
            "deposit": "Balance",
            "since": "BlockNumber",
            "expiry": "Option<BlockNumber>"
          }
        }
      },
      "ReferendumParameters": {
        "voting_threshold": "Option<VoteThreshold>",
        "min_proposal_launch_period": "BlockNumber",
        "voting_period": "BlockNumber",
        "enactment_period": "BlockNumber",
        "local_vote_locking_period": "BlockNumber",
        "max_proposals_per_metaverse": "u8"
      },
      "Vote": {
        "aye": "bool"
      },
      "Tally": {
        "ayes": "Balance",
        "nays": "Balance",
        "turnout": "Balance"
      },
      "VotingRecord": {
        "votes": "Vec<(ReferendumId,Vote<Balance>)>",
        "prior": "PriorLock<BlockNumber, Balance>"
      },
      "ProposalInfo": {
        "proposed_by": "AccountId",
        "hash": "Hash",
        "description": "Vec<u8>",
        "referendum_launch_block": "BlockNumber"
      },
      "ReferendumStatus": {
        "end": "BlockNumber",
        "metaverse": "MetaverseId",
        "proposal": "ProposalId",
        "tally": "Tally<Balance>",
        "threshold": "Option<VoteThreshold>"
      },
      "RoundIndex": "u32",
      "MetaverseMetadata": "Vec<u8>",
      "VestingScheduleOf": "VestingSchedule",
      "VestingSchedule": {
        "token": "FungibleTokenId",
        "start": "BlockNumber",
        "period": "BlockNumber",
        "periodCount": "u32",
        "perPeriod": "Compact<Balance>"
      },
      "NFTClassId": "u32",
      "Attributes": "BTreeMap<Vec<u8>,Vec<u8>>",
      "EstateId": "u64",
      "Coordinates": "Vec<(i32,i32)>",
      "Coordinate": "(i32,i32)",
      "NewBound": "(i32,i32)",
      "UndeployedLandBlockId": "u128",
      "LandUnits": "Vec<(i32, i32)>",
      "UndeployedLandBlockType": {
        "_enum": [
          "Transferable",
          "BoundToAddress"
        ]
      },
      "MetaverseInfo": {
        "owner": "AccountId",
        "metadata": "MetaverseMetadata",
        "currencyId": "FungibleTokenId"
      },
      "OrmlAccountData": {
        "free": "Balance",
        "frozen": "Balance",
        "reserved": "Balance"
      },
      "OrmlBalanceLock": {
        "amount": "Balance",
        "id": "LockIdentifier"
      },
      "OrmlVestingSchedule": {
        "token": "FungibleTokenId",
        "start": "BlockNumber",
        "period": "BlockNumber",
        "periodCount": "u32",
        "perPeriod": "Balance"
      },
      "Candidate": {
        "id": "AccountId",
        "fee": "Perbill",
        "bond": "Balance",
        "nominators": "Vec<Bond>",
        "total": "Balance",
        "state": "CollatorStatus"
      },
      "CollatorStatus": {
        "_enum": {
          "Active": "Null",
          "Idle": "Null",
          "Leaving": "RoundIndex"
        }
      },
      "RangeBalance": {
        "min": "Balance",
        "ideal": "Balance",
        "max": "Balance"
      },
      "RangePerbill": {
        "min": "Perbill",
        "ideal": "Perbill",
        "max": "Perbill"
      },
      "InflationInfo": {
        "expect": "RangeBalance",
        "annual": "RangePerbill",
        "round": "RangePerbill"
      },
      "OrderedSet": "Vec<Bond>",
      "Collator": {
        "id": "AccountId",
        "bond": "Balance",
        "nominators": "Vec<Bond>",
        "total": "Balance",
        "state": "CollatorStatus"
      },
      "CollatorSnapshot": {
        "bond": "Balance",
        "nominators": "Vec<Bond>",
        "total": "Balance"
      },
      "RoundInfo": {
        "current": "RoundIndex",
        "first": "BlockNumber",
        "length": "u32"
      },
      "Nominator": {
        "nominations": "Vec<Bond>",
        "total": "Balance"
      },
      "Bond": {
        "owner": "AccountId",
        "amount": "Balance"
      },
      "ValidatorStatus": {
        "_enum": {
          "Active": "Null",
          "Idle": "Null",
          "Leaving": "RoundIndex"
        }
      },
      "MetaverseToken": {
        "ticker": "Ticker",
        "totalSupply": "Balance"
      },
      "MetaverseParameter": {
        "_enum": {
          "MaxProposals": "u8",
          "SetReferendumJury": "AccountId"
        }
      },
      "Delegations": {
        "votes": "Balance",
        "capital": "Balance"
      },
      "Conviction": {
        "_enum": [
          "None",
          "Locked1x",
          "Locked2x",
          "Locked3x",
          "Locked4x",
          "Locked5x",
          "Locked6x"
        ]
      },
      "PalletGovernanceVote": {
        "aye": "bool",
        "balance": "Balance",
        "conviction": "Conviction"
      },
      "PriorLock": "(BlockNumber, Balance)",
      "ReferendumInfo": {
        "_enum": {
          "Ongoing": "ReferendumStatus<BlockNumber,Balance>",
          "Finished": {
            "passed": "bool",
            "end": "BlockNumber"
          }
        }
      },
      "PowerAmount": "u64",
      "ElementId": "u32",
      "GeneratorNftId": "(ClassId, TokenId)",
      "DistributorNftId": "(ClassId, TokenId)"
    },
    "polymesh": {
      "rpc": {
        "compliance": {
          "canTransfer": {
            "description": "Checks whether a transaction with given parameters is compliant to the compliance manager conditions",
            "params": [
              {
                "name": "ticker",
                "type": "Ticker",
                "isOptional": false
              },
              {
                "name": "from_did",
                "type": "Option<IdentityId>",
                "isOptional": false
              },
              {
                "name": "to_did",
                "type": "Option<IdentityId>",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "AssetComplianceResult"
          }
        },
        "identity": {
          "isIdentityHasValidCdd": {
            "description": "use to tell whether the given did has valid cdd claim or not",
            "params": [
              {
                "name": "did",
                "type": "IdentityId",
                "isOptional": false
              },
              {
                "name": "buffer_time",
                "type": "u64",
                "isOptional": true
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "CddStatus"
          },
          "getAssetDid": {
            "description": "function is used to query the given ticker DID",
            "params": [
              {
                "name": "ticker",
                "type": "Ticker",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "AssetDidResult"
          },
          "getDidRecords": {
            "description": "Used to get the did record values for a given DID",
            "params": [
              {
                "name": "did",
                "type": "IdentityId",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "DidRecords"
          },
          "getDidStatus": {
            "description": "Retrieve status of the DID",
            "params": [
              {
                "name": "did",
                "type": "Vec<IdentityId>",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<DidStatus>"
          },
          "getFilteredAuthorizations": {
            "description": "Retrieve authorizations data for a given signatory and filtered using the given authorization type",
            "params": [
              {
                "name": "signatory",
                "type": "Signatory",
                "isOptional": false
              },
              {
                "name": "allow_expired",
                "type": "bool",
                "isOptional": false
              },
              {
                "name": "auth_type",
                "type": "AuthorizationType",
                "isOptional": true
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<Authorization>"
          },
          "getKeyIdentityData": {
            "description": "Query relation between a signing key and a DID",
            "params": [
              {
                "name": "acc",
                "type": "AccountId",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<KeyIdentityData>"
          }
        },
        "pips": {
          "getVotes": {
            "description": "Summary of votes of a proposal given by index",
            "params": [
              {
                "name": "index",
                "type": "u32",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "VoteCount"
          },
          "proposedBy": {
            "description": "Retrieves proposal indices started by address",
            "params": [
              {
                "name": "address",
                "type": "AccountId",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u32>"
          },
          "votedOn": {
            "description": "Retrieves proposal address indices voted on",
            "params": [
              {
                "name": "address",
                "type": "AccountId",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u32>"
          }
        },
        "protocolFee": {
          "computeFee": {
            "description": "Gets the fee of a chargeable extrinsic operation",
            "params": [
              {
                "name": "op",
                "type": "ProtocolOp",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "CappedFee"
          }
        },
        "staking": {
          "getCurve": {
            "description": "Retrieves curves parameters",
            "params": [
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<(Perbill, Perbill)>"
          }
        },
        "asset": {
          "canTransfer": {
            "description": "Checks whether a transaction with given parameters can take place or not",
            "params": [
              {
                "name": "sender",
                "type": "AccountId",
                "isOptional": false
              },
              {
                "name": "from_custodian",
                "type": "Option<IdentityId>",
                "isOptional": false
              },
              {
                "name": "from_portfolio",
                "type": "PortfolioId",
                "isOptional": false
              },
              {
                "name": "to_custodian",
                "type": "Option<IdentityId>",
                "isOptional": false
              },
              {
                "name": "to_portfolio",
                "type": "PortfolioId",
                "isOptional": false
              },
              {
                "name": "ticker",
                "type": "Ticker",
                "isOptional": false
              },
              {
                "name": "value",
                "type": "Balance",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "CanTransferResult"
          },
          "canTransferGranular": {
            "description": "Checks whether a transaction with given parameters can take place or not. The result is granular meaning each check is run and returned regardless of outcome.",
            "params": [
              {
                "name": "from_custodian",
                "type": "Option<IdentityId>",
                "isOptional": false
              },
              {
                "name": "from_portfolio",
                "type": "PortfolioId",
                "isOptional": false
              },
              {
                "name": "to_custodian",
                "type": "Option<IdentityId>",
                "isOptional": false
              },
              {
                "name": "to_portfolio",
                "type": "PortfolioId",
                "isOptional": false
              },
              {
                "name": "ticker",
                "type": "Ticker",
                "isOptional": false
              },
              {
                "name": "value",
                "type": "Balance",
                "isOptional": false
              },
              {
                "name": "blockHash",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "GranularCanTransferResult"
          }
        }
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountInfo": "AccountInfoWithRefCount",
            "Address": "IndicesLookupSource",
            "LookupSource": "IndicesLookupSource",
            "ValidatorPrefsWithBlocked": {
              "commission": "Compact<Perbill>"
            },
            "IdentityId": "[u8; 32]",
            "EventDid": "IdentityId",
            "InvestorUid": "[u8; 16]",
            "Ticker": "[u8; 12]",
            "CddId": "[u8; 32]",
            "ScopeId": "[u8; 32]",
            "PosRatio": "(u32, u32)",
            "DocumentId": "u32",
            "DocumentName": "Text",
            "DocumentUri": "Text",
            "DocumentHash": {
              "_enum": {
                "None": "",
                "H512": "[u8; 64]",
                "H384": "[u8; 48]",
                "H320": "[u8; 40]",
                "H256": "[u8; 32]",
                "H224": "[u8; 28]",
                "H192": "[u8; 24]",
                "H160": "[u8; 20]",
                "H128": "[u8; 16]"
              }
            },
            "DocumentType": "Text",
            "Document": {
              "uri": "DocumentUri",
              "content_hash": "DocumentHash",
              "name": "DocumentName",
              "doc_type": "Option<DocumentType>",
              "filing_date": "Option<Moment>"
            },
            "Version": "u8",
            "AssetType": {
              "_enum": {
                "EquityCommon": "",
                "EquityPreferred": "",
                "Commodity": "",
                "FixedIncome": "",
                "REIT": "",
                "Fund": "",
                "RevenueShareAgreement": "",
                "StructuredProduct": "",
                "Derivative": "",
                "Custom": "Vec<u8>",
                "StableCoin": ""
              }
            },
            "AssetIdentifier": {
              "_enum": {
                "CUSIP": "[u8; 9]",
                "CINS": "[u8; 9]",
                "ISIN": "[u8; 12]",
                "LEI": "[u8; 20]"
              }
            },
            "AssetOwnershipRelation": {
              "_enum": {
                "NotOwned": "",
                "TickerOwned": "",
                "AssetOwned": ""
              }
            },
            "AssetName": "Text",
            "FundingRoundName": "Text",
            "VenueDetails": "Text",
            "SecurityToken": {
              "name": "AssetName",
              "total_supply": "Balance",
              "owner_did": "IdentityId",
              "divisible": "bool",
              "asset_type": "AssetType",
              "primary_issuance_agent": "Option<IdentityId>"
            },
            "PalletName": "Text",
            "DispatchableName": "Text",
            "PalletPermissions": {
              "pallet_name": "PalletName",
              "dispatchable_names": "Option<Vec<DispatchableName>>"
            },
            "Permissions": {
              "asset": "Option<Vec<Ticker>>",
              "extrinsic": "Option<Vec<PalletPermissions>>",
              "portfolio": "Option<Vec<PortfolioId>>"
            },
            "LegacyPalletPermissions": {
              "pallet_name": "PalletName",
              "total": "bool",
              "dispatchable_names": "Vec<DispatchableName>"
            },
            "LegacyPermissions": {
              "asset": "Option<Vec<Ticker>>",
              "extrinsic": "Option<Vec<LegacyPalletPermissions>>",
              "portfolio": "Option<Vec<PortfolioId>>"
            },
            "Signatory": {
              "_enum": {
                "Identity": "IdentityId",
                "Account": "AccountId"
              }
            },
            "SecondaryKey": {
              "signer": "Signatory",
              "permissions": "Permissions"
            },
            "SecondaryKeyWithAuth": {
              "secondary_key": "SecondaryKey",
              "auth_signature": "Signature"
            },
            "IdentityRole": {
              "_enum": [
                "Issuer",
                "SimpleTokenIssuer",
                "Validator",
                "ClaimIssuer",
                "Investor",
                "NodeRunner",
                "PM",
                "CDDAMLClaimIssuer",
                "AccreditedInvestorClaimIssuer",
                "VerifiedIdentityClaimIssuer"
              ]
            },
            "PreAuthorizedKeyInfo": {
              "target_id": "IdentityId",
              "secondary_key": "SecondaryKey"
            },
            "DidRecord": {
              "primary_key": "AccountId",
              "secondary_keys": "Vec<SecondaryKey>"
            },
            "KeyIdentityData": {
              "identity": "IdentityId",
              "permissions": "Option<Permissions>"
            },
            "CountryCode": {
              "_enum": [
                "AF",
                "AX",
                "AL",
                "DZ",
                "AS",
                "AD",
                "AO",
                "AI",
                "AQ",
                "AG",
                "AR",
                "AM",
                "AW",
                "AU",
                "AT",
                "AZ",
                "BS",
                "BH",
                "BD",
                "BB",
                "BY",
                "BE",
                "BZ",
                "BJ",
                "BM",
                "BT",
                "BO",
                "BA",
                "BW",
                "BV",
                "BR",
                "VG",
                "IO",
                "BN",
                "BG",
                "BF",
                "BI",
                "KH",
                "CM",
                "CA",
                "CV",
                "KY",
                "CF",
                "TD",
                "CL",
                "CN",
                "HK",
                "MO",
                "CX",
                "CC",
                "CO",
                "KM",
                "CG",
                "CD",
                "CK",
                "CR",
                "CI",
                "HR",
                "CU",
                "CY",
                "CZ",
                "DK",
                "DJ",
                "DM",
                "DO",
                "EC",
                "EG",
                "SV",
                "GQ",
                "ER",
                "EE",
                "ET",
                "FK",
                "FO",
                "FJ",
                "FI",
                "FR",
                "GF",
                "PF",
                "TF",
                "GA",
                "GM",
                "GE",
                "DE",
                "GH",
                "GI",
                "GR",
                "GL",
                "GD",
                "GP",
                "GU",
                "GT",
                "GG",
                "GN",
                "GW",
                "GY",
                "HT",
                "HM",
                "VA",
                "HN",
                "HU",
                "IS",
                "IN",
                "ID",
                "IR",
                "IQ",
                "IE",
                "IM",
                "IL",
                "IT",
                "JM",
                "JP",
                "JE",
                "JO",
                "KZ",
                "KE",
                "KI",
                "KP",
                "KR",
                "KW",
                "KG",
                "LA",
                "LV",
                "LB",
                "LS",
                "LR",
                "LY",
                "LI",
                "LT",
                "LU",
                "MK",
                "MG",
                "MW",
                "MY",
                "MV",
                "ML",
                "MT",
                "MH",
                "MQ",
                "MR",
                "MU",
                "YT",
                "MX",
                "FM",
                "MD",
                "MC",
                "MN",
                "ME",
                "MS",
                "MA",
                "MZ",
                "MM",
                "NA",
                "NR",
                "NP",
                "NL",
                "AN",
                "NC",
                "NZ",
                "NI",
                "NE",
                "NG",
                "NU",
                "NF",
                "MP",
                "NO",
                "OM",
                "PK",
                "PW",
                "PS",
                "PA",
                "PG",
                "PY",
                "PE",
                "PH",
                "PN",
                "PL",
                "PT",
                "PR",
                "QA",
                "RE",
                "RO",
                "RU",
                "RW",
                "BL",
                "SH",
                "KN",
                "LC",
                "MF",
                "PM",
                "VC",
                "WS",
                "SM",
                "ST",
                "SA",
                "SN",
                "RS",
                "SC",
                "SL",
                "SG",
                "SK",
                "SI",
                "SB",
                "SO",
                "ZA",
                "GS",
                "SS",
                "ES",
                "LK",
                "SD",
                "SR",
                "SJ",
                "SZ",
                "SE",
                "CH",
                "SY",
                "TW",
                "TJ",
                "TZ",
                "TH",
                "TL",
                "TG",
                "TK",
                "TO",
                "TT",
                "TN",
                "TR",
                "TM",
                "TC",
                "TV",
                "UG",
                "UA",
                "AE",
                "GB",
                "US",
                "UM",
                "UY",
                "UZ",
                "VU",
                "VE",
                "VN",
                "VI",
                "WF",
                "EH",
                "YE",
                "ZM",
                "ZW",
                "BQ",
                "CW",
                "SX"
              ]
            },
            "Scope": {
              "_enum": {
                "Identity": "IdentityId",
                "Ticker": "Ticker",
                "Custom": "Vec<u8>"
              }
            },
            "InvestorZKProofData": "Signature",
            "Scalar": "[u8; 32]",
            "RistrettoPoint": "[u8; 32]",
            "ZkProofData": {
              "challenge_responses": "[Scalar; 2]",
              "subtract_expressions_res": "RistrettoPoint",
              "blinded_scope_did_hash": "RistrettoPoint"
            },
            "ScopeClaimProof": {
              "proof_scope_id_wellformed": "Signature",
              "proof_scope_id_cdd_id_match": "ZkProofData",
              "scope_id": "RistrettoPoint"
            },
            "Claim": {
              "_enum": {
                "Accredited": "Scope",
                "Affiliate": "Scope",
                "BuyLockup": "Scope",
                "SellLockup": "Scope",
                "CustomerDueDiligence": "CddId",
                "KnowYourCustomer": "Scope",
                "Jurisdiction": "(CountryCode, Scope)",
                "Exempted": "Scope",
                "Blocked": "Scope",
                "InvestorUniqueness": "(Scope, ScopeId, CddId)",
                "NoData": "",
                "InvestorUniquenessV2": "(CddId)"
              }
            },
            "ClaimType": {
              "_enum": {
                "Accredited": "",
                "Affiliate": "",
                "BuyLockup": "",
                "SellLockup": "",
                "CustomerDueDiligence": "",
                "KnowYourCustomer": "",
                "Jurisdiction": "",
                "Exempted": "",
                "Blocked": "",
                "InvestorUniqueness": "",
                "NoData": "",
                "InvestorUniquenessV2": ""
              }
            },
            "IdentityClaim": {
              "claim_issuer": "IdentityId",
              "issuance_date": "Moment",
              "last_update_date": "Moment",
              "expiry": "Option<Moment>",
              "claim": "Claim"
            },
            "IdentityClaimKey": {
              "id": "IdentityId",
              "claim_type": "ClaimType"
            },
            "ComplianceRequirement": {
              "sender_conditions": "Vec<Condition>",
              "receiver_conditions": "Vec<Condition>",
              "id": "u32"
            },
            "ComplianceRequirementResult": {
              "sender_conditions": "Vec<ConditionResult>",
              "receiver_conditions": "Vec<ConditionResult>",
              "id": "u32",
              "result": "bool"
            },
            "ConditionType": {
              "_enum": {
                "IsPresent": "Claim",
                "IsAbsent": "Claim",
                "IsAnyOf": "Vec<Claim>",
                "IsNoneOf": "Vec<Claim>",
                "IsIdentity": "TargetIdentity"
              }
            },
            "TrustedFor": {
              "_enum": {
                "Any": "",
                "Specific": "Vec<ClaimType>"
              }
            },
            "TrustedIssuer": {
              "issuer": "IdentityId",
              "trusted_for": "TrustedFor"
            },
            "Condition": {
              "condition_type": "ConditionType",
              "issuers": "Vec<TrustedIssuer>"
            },
            "ConditionResult": {
              "condition": "Condition",
              "result": "bool"
            },
            "SimpleTokenRecord": {
              "ticker": "Ticker",
              "total_supply": "Balance",
              "owner_did": "IdentityId"
            },
            "FeeOf": "Balance",
            "TargetIdAuthorization": {
              "target_id": "IdentityId",
              "nonce": "u64",
              "expires_at": "Moment"
            },
            "TickerRegistration": {
              "owner": "IdentityId",
              "expiry": "Option<Moment>"
            },
            "TickerRegistrationConfig": {
              "max_ticker_length": "u8",
              "registration_length": "Option<Moment>"
            },
            "ClassicTickerRegistration": {
              "eth_owner": "EthereumAddress",
              "is_created": "bool"
            },
            "ClassicTickerImport": {
              "eth_owner": "EthereumAddress",
              "ticker": "Ticker",
              "is_contract": "bool",
              "is_created": "bool"
            },
            "EthereumAddress": "[u8; 20]",
            "EcdsaSignature": "[u8; 65]",
            "MotionTitle": "Text",
            "MotionInfoLink": "Text",
            "ChoiceTitle": "Text",
            "Motion": {
              "title": "MotionTitle",
              "info_link": "MotionInfoLink",
              "choices": "Vec<ChoiceTitle>"
            },
            "BallotTitle": "Text",
            "BallotMeta": {
              "title": "BallotTitle",
              "motions": "Vec<Motion>"
            },
            "BallotTimeRange": {
              "start": "Moment",
              "end": "Moment"
            },
            "BallotVote": {
              "power": "Balance",
              "fallback": "Option<u16>"
            },
            "MaybeBlock": {
              "_enum": {
                "Some": "BlockNumber",
                "None": ""
              }
            },
            "Url": "Text",
            "PipDescription": "Text",
            "PipsMetadata": {
              "id": "PipId",
              "url": "Option<Url>",
              "description": "Option<PipDescription>",
              "created_at": "BlockNumber",
              "transaction_version": "u32",
              "expiry": "MaybeBlock"
            },
            "Proposer": {
              "_enum": {
                "Community": "AccountId",
                "Committee": "Committee"
              }
            },
            "Committee": {
              "_enum": {
                "Technical": "",
                "Upgrade": ""
              }
            },
            "SkippedCount": "u8",
            "SnapshottedPip": {
              "id": "PipId",
              "weight": "(bool, Balance)"
            },
            "SnapshotId": "u32",
            "SnapshotMetadata": {
              "created_at": "BlockNumber",
              "made_by": "AccountId",
              "id": "SnapshotId"
            },
            "SnapshotResult": {
              "_enum": {
                "Approve": "",
                "Reject": "",
                "Skip": ""
              }
            },
            "Beneficiary": {
              "id": "IdentityId",
              "amount": "Balance"
            },
            "DepositInfo": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "PolymeshVotes": {
              "index": "u32",
              "ayes": "Vec<(IdentityId, Balance)>",
              "nays": "Vec<(IdentityId, Balance)>",
              "end": "BlockNumber",
              "expiry": "MaybeBlock"
            },
            "PipId": "u32",
            "ProposalState": {
              "_enum": [
                "Pending",
                "Rejected",
                "Scheduled",
                "Failed",
                "Executed",
                "Expired"
              ]
            },
            "Pip": {
              "id": "PipId",
              "proposal": "Call",
              "state": "ProposalState",
              "proposer": "Proposer"
            },
            "ProposalData": {
              "_enum": {
                "Hash": "Hash",
                "Proposal": "Vec<u8>"
              }
            },
            "TickerTransferApproval": {
              "authorized_by": "IdentityId",
              "next_ticker": "Option<Ticker>",
              "previous_ticker": "Option<Ticker>"
            },
            "OffChainSignature": {
              "_enum": {
                "Ed25519": "H512",
                "Sr25519": "H512",
                "Ecdsa": "H512"
              }
            },
            "Authorization": {
              "authorization_data": "AuthorizationData",
              "authorized_by": "IdentityId",
              "expiry": "Option<Moment>",
              "auth_id": "u64"
            },
            "AuthorizationData": {
              "_enum": {
                "AttestPrimaryKeyRotation": "IdentityId",
                "RotatePrimaryKey": "IdentityId",
                "TransferTicker": "Ticker",
                "TransferPrimaryIssuanceAgent": "Ticker",
                "AddMultiSigSigner": "AccountId",
                "TransferAssetOwnership": "Ticker",
                "JoinIdentity": "Permissions",
                "PortfolioCustody": "PortfolioId",
                "Custom": "Ticker",
                "NoData": "",
                "TransferCorporateActionAgent": "Ticker"
              }
            },
            "AuthIdentifier": {
              "signatory": "Signatory",
              "auth_id": "u64"
            },
            "SmartExtensionType": {
              "_enum": {
                "TransferManager": "",
                "Offerings": "",
                "SmartWallet": "",
                "Custom": "Vec<u8>"
              }
            },
            "SmartExtensionName": "Text",
            "SmartExtension": {
              "extension_type": "SmartExtensionType",
              "extension_name": "SmartExtensionName",
              "extension_id": "AccountId",
              "is_archive": "bool"
            },
            "MetaUrl": "Text",
            "MetaDescription": "Text",
            "MetaVersion": "u32",
            "ExtVersion": "u32",
            "TemplateMetadata": {
              "url": "Option<MetaUrl>",
              "se_type": "SmartExtensionType",
              "usage_fee": "Balance",
              "description": "MetaDescription",
              "version": "MetaVersion"
            },
            "TemplateDetails": {
              "instantiation_fee": "Balance",
              "owner": "IdentityId",
              "frozen": "bool"
            },
            "ProportionMatch": {
              "_enum": [
                "AtLeast",
                "MoreThan"
              ]
            },
            "AuthorizationNonce": "u64",
            "Counter": "u64",
            "Percentage": "Permill",
            "TransferManager": {
              "_enum": {
                "CountTransferManager": "Counter",
                "PercentageTransferManager": "Percentage"
              }
            },
            "RestrictionResult": {
              "_enum": [
                "Valid",
                "Invalid",
                "ForceValid"
              ]
            },
            "Memo": "[u8;32]",
            "IssueRecipient": {
              "_enum": {
                "Account": "AccountId",
                "Identity": "IdentityId"
              }
            },
            "BridgeTx": {
              "nonce": "u32",
              "recipient": "AccountId",
              "value": "Balance",
              "tx_hash": "H256"
            },
            "PendingTx": {
              "did": "IdentityId",
              "bridge_tx": "BridgeTx"
            },
            "AssetCompliance": {
              "is_paused": "bool",
              "requirements": "Vec<ComplianceRequirement>"
            },
            "AssetComplianceResult": {
              "paused": "bool",
              "requirements": "Vec<ComplianceRequirementResult>",
              "result": "bool"
            },
            "Claim1stKey": {
              "target": "IdentityId",
              "claim_type": "ClaimType"
            },
            "Claim2ndKey": {
              "issuer": "IdentityId",
              "scope": "Option<Scope>"
            },
            "BatchAddClaimItem": {
              "target": "IdentityId",
              "claim": "Claim",
              "expiry": "Option<Moment>"
            },
            "BatchRevokeClaimItem": {
              "target": "IdentityId",
              "claim": "Claim"
            },
            "InactiveMember": {
              "id": "IdentityId",
              "deactivated_at": "Moment",
              "expiry": "Option<Moment>"
            },
            "VotingResult": {
              "ayes_count": "u32",
              "ayes_stake": "Balance",
              "nays_count": "u32",
              "nays_stake": "Balance"
            },
            "ProtocolOp": {
              "_enum": [
                "AssetRegisterTicker",
                "AssetIssue",
                "AssetAddDocument",
                "AssetCreateAsset",
                "AssetCreateCheckpointSchedule",
                "DividendNew",
                "ComplianceManagerAddComplianceRequirement",
                "IdentityRegisterDid",
                "IdentityCddRegisterDid",
                "IdentityAddClaim",
                "IdentitySetPrimaryKey",
                "IdentityAddSecondaryKeysWithAuthorization",
                "PipsPropose",
                "VotingAddBallot",
                "ContractsPutCode",
                "BallotAttachBallot",
                "DistributionDistribute"
              ]
            },
            "CddStatus": {
              "_enum": {
                "Ok": "IdentityId",
                "Err": "Vec<u8>"
              }
            },
            "AssetDidResult": {
              "_enum": {
                "Ok": "IdentityId",
                "Err": "Vec<u8>"
              }
            },
            "DidRecordsSuccess": {
              "primary_key": "AccountId",
              "secondary_key": "Vec<SecondaryKey>"
            },
            "DidRecords": {
              "_enum": {
                "Success": "DidRecordsSuccess",
                "IdNotFound": "Vec<u8>"
              }
            },
            "VoteCountProposalFound": {
              "ayes": "u64",
              "nays": "u64"
            },
            "VoteCount": {
              "_enum": {
                "ProposalFound": "VoteCountProposalFound",
                "ProposalNotFound": "Vec<u8>"
              }
            },
            "Vote": "(bool, Balance)",
            "VoteByPip": {
              "pip": "PipId",
              "vote": "Vote"
            },
            "BridgeTxDetail": {
              "amount": "Balance",
              "status": "BridgeTxStatus",
              "execution_block": "BlockNumber",
              "tx_hash": "H256"
            },
            "BridgeTxStatus": {
              "_enum": {
                "Absent": "",
                "Pending": "u8",
                "Frozen": "",
                "Timelocked": "",
                "Handled": ""
              }
            },
            "HandledTxStatus": {
              "_enum": {
                "Success": "",
                "Error": "Text"
              }
            },
            "CappedFee": "u64",
            "CanTransferResult": {
              "_enum": {
                "Ok": "u8",
                "Err": "Vec<u8>"
              }
            },
            "AuthorizationType": {
              "_enum": {
                "AttestPrimaryKeyRotation": "",
                "RotatePrimaryKey": "",
                "TransferTicker": "",
                "TransferPrimaryIssuanceAgent": "",
                "AddMultiSigSigner": "",
                "TransferAssetOwnership": "",
                "JoinIdentity": "",
                "PortfolioCustody": "",
                "Custom": "",
                "NoData": "",
                "TransferCorporateActionAgent": ""
              }
            },
            "ProposalDetails": {
              "approvals": "u64",
              "rejections": "u64",
              "status": "ProposalStatus",
              "expiry": "Option<Moment>",
              "auto_close": "bool"
            },
            "ProposalStatus": {
              "_enum": {
                "Invalid": "",
                "ActiveOrExpired": "",
                "ExecutionSuccessful": "",
                "ExecutionFailed": "",
                "Rejected": ""
              }
            },
            "DidStatus": {
              "_enum": {
                "Unknown": "",
                "Exists": "",
                "CddVerified": ""
              }
            },
            "PortfolioName": "Text",
            "PortfolioNumber": "u64",
            "PortfolioKind": {
              "_enum": {
                "Default": "",
                "User": "PortfolioNumber"
              }
            },
            "PortfolioId": {
              "did": "IdentityId",
              "kind": "PortfolioKind"
            },
            "ProverTickerKey": {
              "prover": "IdentityId",
              "ticker": "Ticker"
            },
            "TickerRangeProof": {
              "initial_message": "[u8; 32]",
              "final_response": "Vec<u8>",
              "max_two_exp": "u32"
            },
            "Moment": "u64",
            "CalendarUnit": {
              "_enum": [
                "Second",
                "Minute",
                "Hour",
                "Day",
                "Week",
                "Month",
                "Year"
              ]
            },
            "CalendarPeriod": {
              "unit": "CalendarUnit",
              "amount": "u64"
            },
            "CheckpointSchedule": {
              "start": "Moment",
              "period": "CalendarPeriod"
            },
            "CheckpointId": "u64",
            "ScheduleId": "u64",
            "StoredSchedule": {
              "schedule": "CheckpointSchedule",
              "id": "ScheduleId",
              "at": "Moment",
              "remaining": "u32"
            },
            "ScheduleSpec": {
              "start": "Option<Moment>",
              "period": "CalendarPeriod",
              "remaining": "u32"
            },
            "InstructionStatus": {
              "_enum": {
                "Unknown": "",
                "Pending": ""
              }
            },
            "LegStatus": {
              "_enum": {
                "PendingTokenLock": "",
                "ExecutionPending": "",
                "ExecutionToBeSkipped": "(AccountId, u64)"
              }
            },
            "AffirmationStatus": {
              "_enum": {
                "Unknown": "",
                "Pending": "",
                "Affirmed": "",
                "Rejected": ""
              }
            },
            "SettlementType": {
              "_enum": {
                "SettleOnAffirmation": "",
                "SettleOnBlock": "BlockNumber"
              }
            },
            "Instruction": {
              "instruction_id": "u64",
              "venue_id": "u64",
              "status": "InstructionStatus",
              "settlement_type": "SettlementType",
              "created_at": "Option<Moment>",
              "trade_date": "Option<Moment>",
              "value_date": "Option<Moment>"
            },
            "Leg": {
              "from": "PortfolioId",
              "to": "PortfolioId",
              "asset": "Ticker",
              "amount": "Balance"
            },
            "Venue": {
              "creator": "IdentityId",
              "instructions": "Vec<u64>",
              "details": "VenueDetails",
              "venue_type": "VenueType"
            },
            "Receipt": {
              "receipt_uid": "u64",
              "from": "PortfolioId",
              "to": "PortfolioId",
              "asset": "Ticker",
              "amount": "Balance"
            },
            "ReceiptMetadata": "Text",
            "ReceiptDetails": {
              "receipt_uid": "u64",
              "leg_id": "u64",
              "signer": "AccountId",
              "signature": "OffChainSignature",
              "metadata": "ReceiptMetadata"
            },
            "UniqueCall": {
              "nonce": "u64",
              "call": "Call"
            },
            "MovePortfolioItem": {
              "ticker": "Ticker",
              "amount": "Balance"
            },
            "WeightToFeeCoefficient": {
              "coeffInteger": "Balance",
              "coeffFrac": "Perbill",
              "negative": "bool",
              "degree": "u8"
            },
            "TargetIdentity": {
              "_enum": {
                "PrimaryIssuanceAgent": "",
                "Specific": "IdentityId"
              }
            },
            "FundraiserName": "Text",
            "FundraiserStatus": {
              "_enum": [
                "Live",
                "Frozen",
                "Closed",
                "ClosedEarly"
              ]
            },
            "FundraiserTier": {
              "total": "Balance",
              "price": "Balance",
              "remaining": "Balance"
            },
            "Fundraiser": {
              "creator": "IdentityId",
              "offering_portfolio": "PortfolioId",
              "offering_asset": "Ticker",
              "raising_portfolio": "PortfolioId",
              "raising_asset": "Ticker",
              "tiers": "Vec<FundraiserTier>",
              "venue_id": "u64",
              "start": "Moment",
              "end": "Option<Moment>",
              "status": "FundraiserStatus",
              "minimum_investment": "Balance"
            },
            "VenueType": {
              "_enum": [
                "Other",
                "Distribution",
                "Sto",
                "Exchange"
              ]
            },
            "Payload": {
              "block_number": "BlockNumber",
              "nominators": "Vec<AccountId>",
              "public": "H256"
            },
            "ExtensionAttributes": {
              "usage_fee": "Balance",
              "version": "MetaVersion"
            },
            "Tax": "Permill",
            "TargetIdentities": {
              "identities": "Vec<IdentityId>",
              "treatment": "TargetTreatment"
            },
            "TargetTreatment": {
              "_enum": [
                "Include",
                "Exclude"
              ]
            },
            "CAKind": {
              "_enum": [
                "PredictableBenefit",
                "UnpredictableBenefit",
                "IssuerNotice",
                "Reorganization",
                "Other"
              ]
            },
            "CADetails": "Text",
            "CACheckpoint": {
              "_enum": {
                "Scheduled": "(ScheduleId, u64)",
                "Existing": "CheckpointId"
              }
            },
            "RecordDate": {
              "date": "Moment",
              "checkpoint": "CACheckpoint"
            },
            "RecordDateSpec": {
              "_enum": {
                "Scheduled": "Moment",
                "ExistingSchedule": "ScheduleId",
                "Existing": "CheckpointId"
              }
            },
            "CorporateAction": {
              "kind": "CAKind",
              "decl_date": "Moment",
              "record_date": "Option<RecordDate>",
              "details": "Text",
              "targets": "TargetIdentities",
              "default_withholding_tax": "Tax",
              "withholding_tax": "Vec<(IdentityId, Tax)>"
            },
            "LocalCAId": "u32",
            "CAId": {
              "ticker": "Ticker",
              "local_id": "LocalCAId"
            },
            "Distribution": {
              "from": "PortfolioId",
              "currency": "Ticker",
              "per_share": "Balance",
              "amount": "Balance",
              "remaining": "Balance",
              "reclaimed": "bool",
              "payment_at": "Moment",
              "expires_at": "Option<Moment>"
            },
            "SlashingSwitch": {
              "_enum": [
                "Validator",
                "ValidatorAndNominator",
                "None"
              ]
            },
            "PriceTier": {
              "total": "Balance",
              "price": "Balance"
            },
            "AssetMigrationError": {
              "_enum": {
                "AssetDocumentFail": "(Ticker, DocumentId)"
              }
            },
            "MigrationError": {
              "_enum": {
                "DecodeKey": "Vec<u8>",
                "Map": "AssetMigrationError"
              }
            },
            "PermissionedIdentityPrefs": {
              "intended_count": "u32",
              "running_count": "u32"
            },
            "GranularCanTransferResult": {
              "invalid_granularity": "bool",
              "self_transfer": "bool",
              "invalid_receiver_cdd": "bool",
              "invalid_sender_cdd": "bool",
              "missing_scope_claim": "bool",
              "receiver_custodian_error": "bool",
              "sender_custodian_error": "bool",
              "sender_insufficient_balance": "bool",
              "portfolio_validity_result": "PortfolioValidityResult",
              "asset_frozen": "bool",
              "statistics_result": "Vec<TransferManagerResult>",
              "compliance_result": "AssetComplianceResult",
              "result": "bool"
            },
            "PortfolioValidityResult": {
              "receiver_is_same_portfolio": "bool",
              "sender_portfolio_does_not_exist": "bool",
              "receiver_portfolio_does_not_exist": "bool",
              "sender_insufficient_balance": "bool",
              "result": "bool"
            },
            "TransferManagerResult": {
              "tm": "TransferManager",
              "result": "bool"
            }
          }
        }
      ]
    },
    "pontem-node": {
      "rpc": {
        "mvm": {
          "estimateGasExecute": {
            "aliasSection": "mvm",
            "description": "estimate gas for script execution",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "tx_bc",
                "type": "Bytes"
              },
              {
                "name": "gas_limit",
                "type": "u64"
              }
            ],
            "type": "Estimation"
          },
          "estimateGasPublish": {
            "aliasSection": "mvm",
            "description": "estimate gas for module publishing",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "module_bc",
                "type": "Bytes"
              },
              {
                "name": "gas_limit",
                "type": "u64"
              }
            ],
            "type": "Estimation"
          },
          "gasToWeight": {
            "aliasSection": "mvm",
            "description": "convert gas to weight",
            "params": [
              {
                "name": "gas",
                "type": "u64"
              }
            ],
            "type": "Weight"
          },
          "weightToGas": {
            "aliasSection": "mvm",
            "description": "convert gas to weight",
            "params": [
              {
                "name": "weight",
                "type": "Weight"
              }
            ],
            "type": "u64"
          }
        }
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AuthorId": "[u8;32]",
            "Balance": "u64",
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "top_nominators": "Vec<Bond>",
              "bottom_nominators": "Vec<Bond>",
              "total_counted": "Balance",
              "total_backing": "Balance",
              "state": "CollatorStatus"
            },
            "Candidate": {
              "bond": "Balance",
              "fee": "Perbill",
              "id": "AccountId",
              "nominators": "Vec<Bond>",
              "state": "ValidatorStatus",
              "total": "Balance"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "nominators": "Vec<Bond>",
              "total": "Balance"
            },
            "Estimation": {
              "gas_used": "u64",
              "status_code": "u64"
            },
            "ExitQ": {
              "candidate_schedule": "Vec<(AccountId, RoundIndex)>",
              "candidates": "Vec<AccountId>",
              "nominator_schedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>",
              "nominators_leaving": "Vec<AccountId>"
            },
            "InflationInfo": {
              "annual": "RangePerbill",
              "expect": "RangeBalance",
              "round": "RangePerbill"
            },
            "MoveStructTag": {
              "address": "AccountId",
              "module": "Text",
              "name": "Text"
            },
            "MoveTypeTag": {
              "Address": "",
              "Bool": "",
              "Signer": "",
              "Struct": "MoveStructTag",
              "U128": "",
              "U64": "",
              "U8": "",
              "Vector": "MoveTypeTag",
              "_enum": [
                "Bool",
                "U8",
                "U64",
                "U128",
                "Address",
                "Signer",
                "Vector",
                "Struct"
              ]
            },
            "Nominator": {
              "nominations": "Vec<Bond>",
              "total": "Balance"
            },
            "Nominator2": {
              "nominations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "scheduled_revocations_count": "u32",
              "scheduled_revocations_total": "Balance",
              "status": "NominatorStatus",
              "total": "Balance"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToBottom": "Null",
                "AddedToTop": "Balance"
              }
            },
            "OrderedSet": "Vec<Bond>",
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "Range": "RangeBalance",
            "RangeBalance": {
              "ideal": "Balance",
              "max": "Balance",
              "min": "Balance"
            },
            "RangePerbill": {
              "ideal": "Perbill",
              "max": "Perbill",
              "min": "Perbill"
            },
            "RegistrationInfo": {
              "account": "AccountId",
              "deposit": "Balance"
            },
            "RoundIndex": "u32",
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "ValidatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "CollatorStatus": {
              "_enum": {
                "Active": "Null",
                "Idle": "Null",
                "Leaving": "RoundIndex"
              }
            },
            "NominatorStatus": {
              "_enum": {
                "Active": "Null",
                "Leaving": "RoundIndex"
              }
            }
          }
        }
      ]
    },
    "prism": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "quartz": {
      "rpc": {
        "unique": {
          "adminlist": {
            "description": "Get admin list",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "allowlist": {
            "description": "Get allowlist",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "accountTokens": {
            "description": "Get tokens owned by account",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u32>"
          },
          "collectionTokens": {
            "description": "Get tokens contained in collection",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u32>"
          },
          "lastTokenId": {
            "description": "Get last token id",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u32"
          },
          "totalSupply": {
            "description": "Get amount of unique collection tokens",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u32"
          },
          "accountBalance": {
            "description": "Get amount of different user tokens",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u32"
          },
          "balance": {
            "description": "Get amount of specific account token",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u128"
          },
          "allowance": {
            "description": "Get allowed amount",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "sender",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "spender",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u128"
          },
          "tokenOwner": {
            "description": "Get token owner",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "topmostTokenOwner": {
            "description": "Get token owner, in case of nested token - find parent recursive",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "tokenChildren": {
            "description": "Get tokens nested directly into the token",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsTokenChild>"
          },
          "constMetadata": {
            "description": "Get token constant metadata",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u8>"
          },
          "variableMetadata": {
            "description": "Get token variable metadata",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u8>"
          },
          "collectionProperties": {
            "description": "Get collection properties",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsProperty>"
          },
          "tokenProperties": {
            "description": "Get token properties",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsProperty>"
          },
          "propertyPermissions": {
            "description": "Get property permissions",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsPropertyKeyPermission>"
          },
          "tokenData": {
            "description": "Get token data",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "UpDataStructsTokenData"
          },
          "tokenExists": {
            "description": "Check if token exists",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "bool"
          },
          "collectionById": {
            "description": "Get collection by specified id",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<UpDataStructsRpcCollection>"
          },
          "collectionStats": {
            "description": "Get collection stats",
            "params": [
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "UpDataStructsCollectionStats"
          },
          "allowed": {
            "description": "Check if user is allowed to use collection",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "bool"
          },
          "nextSponsored": {
            "description": "Get number of blocks when sponsored transaction is available",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<u64>"
          },
          "effectiveCollectionLimits": {
            "description": "Get effective collection limits",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<UpDataStructsCollectionLimits>"
          }
        }
      }
    },
    "realis": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Rarity": {
              "_enum": [
                "Common",
                "Uncommon",
                "Rare",
                "Epic",
                "Legendary",
                "Relic"
              ]
            },
            "TokenId": "U256",
            "Stackable": {
              "_enum": [
                "Silver",
                "Gold",
                "Diamond"
              ]
            },
            "String": "Vec<u8>",
            "TokenType": {
              "_enum": {
                "Basic": "(Rarity, String, u32, String)"
              }
            },
            "Status": {
              "_enum": [
                "OnSell",
                "InDelegation",
                "Free"
              ]
            },
            "Token": {
              "token_id": "TokenId",
              "token": "TokenType"
            }
          }
        }
      ]
    },
    "riochain-runtime": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "LookupSource": "IndicesLookupSource",
            "Address": "LookupSource",
            "Amount": "i128",
            "AmountOf": "Amount",
            "CurrencyId": "u32",
            "CurrencyIdOf": "CurrencyId",
            "Price": "FixedU128",
            "OracleKey": "CurrencyId",
            "Chain": {
              "_enum": [
                "Rio",
                "Bitcoin",
                "Litecoin",
                "Ethereum",
                "EOS",
                "Polkadot",
                "Kusama",
                "ChainX"
              ]
            },
            "AssetInfo": {
              "chain": "Chain",
              "symbol": "Text",
              "name": "Text",
              "decimals": "u8",
              "desc": "Text"
            },
            "FeeExchangeV1": {
              "max_payment": "Compact<Balance>"
            },
            "FeeExchange": {
              "_enum": {
                "V1": "Compact<FeeExchangeV1>"
              }
            },
            "Restriction": {
              "_enum": [
                "Transferable",
                "Depositable",
                "Withdrawable",
                "Slashable",
                "Reservable",
                "Unreservable"
              ]
            },
            "TxHash": "H256",
            "Deposit": {
              "account_id": "AccountId",
              "amount": "Balance"
            },
            "Auths": {
              "mask": "u8"
            },
            "Auth": {
              "_enum": [
                "Register",
                "Deposit",
                "Withdraw",
                "Sudo"
              ]
            },
            "WithdrawState": {
              "_enum": {
                "Pending": null,
                "Cancelled": null,
                "Rejected": null,
                "Approved": null,
                "Success": "TxHash",
                "ReBroadcasted": "TxHash"
              }
            },
            "ChainAddress": "Bytes",
            "Memo": "Text",
            "WithdrawInfo": {
              "currency_id": "CurrencyId",
              "who": "AccountId",
              "value": "Balance",
              "addr": "ChainAddress",
              "memo": "Text"
            },
            "WithdrawItem": {
              "currency_id": "CurrencyId",
              "applicant": "AccountId",
              "value": "Balance",
              "addr": "ChainAddress",
              "memo": "Text",
              "state": "WithdrawState"
            },
            "DepositAddrInfo": {
              "_enum": {
                "Bip32": "Bip32",
                "Create2": "Create2"
              }
            },
            "Bip32": {
              "x_pub": "Text",
              "path": "Text"
            },
            "Create2": {
              "creator_address": "Vec<u8>",
              "implementation_address": "Vec<u8>",
              "vault_address": "Vec<u8>"
            }
          }
        }
      ]
    },
    "robonomics": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Record": "Vec<u8>",
            "Technics": "Vec<u8>",
            "Economics": "{}",
            "Report": {
              "index": "LiabilityIndex",
              "sender": "AccountId",
              "payload": "Vec<u8>",
              "signature": "MultiSignature"
            },
            "ReportFor": "Report",
            "Agreement": {
              "technics": "Technics",
              "economics": "Economics",
              "promisee": "AccountId",
              "promisor": "AccountId",
              "promisee_signature": "MultiSignature",
              "promisor_signature": "MultiSignature"
            },
            "LiabilityIndex": "u32"
          }
        }
      ]
    },
    "root": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountId": "EthereumAccountId",
            "AccountId20": "EthereumAccountId",
            "AccountId32": "EthereumAccountId",
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "Lookup0": "AccountId",
            "EthereumSignature": {
              "r": "H256",
              "s": "H256",
              "v": "U8"
            },
            "ExtrinsicSignature": "EthereumSignature"
          }
        }
      ]
    },
    "shibuya": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Keys": "AccountId",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AmountOf": "Amount",
            "Amount": "i128",
            "SmartContract": {
              "_enum": {
                "Evm": "H160",
                "Wasm": "AccountId"
              }
            },
            "EraStakingPoints": {
              "total": "Balance",
              "stakers": "BTreeMap<AccountId, Balance>",
              "formerStakedEra": "EraIndex",
              "claimedRewards": "Balance"
            },
            "PalletDappsStakingEraStakingPoints": {
              "total": "Balance",
              "stakers": "BTreeMap<AccountId, Balance>",
              "formerStakedEra": "EraIndex",
              "claimedRewards": "Balance"
            },
            "EraRewardAndStake": {
              "rewards": "Balance",
              "staked": "Balance"
            },
            "PalletDappsStakingEraRewardAndStake": {
              "rewards": "Balance",
              "staked": "Balance"
            },
            "EraIndex": "u32"
          }
        }
      ]
    },
    "shiden": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Keys": "AccountId",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AmountOf": "Amount",
            "Amount": "i128",
            "SmartContract": {
              "_enum": {
                "Evm": "H160",
                "Wasm": "AccountId"
              }
            },
            "EraStakingPoints": {
              "total": "Balance",
              "stakers": "BTreeMap<AccountId, Balance>",
              "formerStakedEra": "EraIndex",
              "claimedRewards": "Balance"
            },
            "PalletDappsStakingEraStakingPoints": {
              "total": "Balance",
              "stakers": "BTreeMap<AccountId, Balance>",
              "formerStakedEra": "EraIndex",
              "claimedRewards": "Balance"
            },
            "EraRewardAndStake": {
              "rewards": "Balance",
              "staked": "Balance"
            },
            "PalletDappsStakingEraRewardAndStake": {
              "rewards": "Balance",
              "staked": "Balance"
            },
            "EraIndex": "u32"
          }
        }
      ]
    },
    "snowbridge": {
      "alias": {
        "dispatch": {
          "MessageId": "DispatchMessageId"
        }
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "DispatchMessageId": {
              "channelId": "ChannelId",
              "nonce": "u64"
            },
            "ChannelId": {
              "_enum": [
                "Basic",
                "Incentivized"
              ]
            },
            "MessageNonce": "u64",
            "Message": {
              "data": "Vec<u8>",
              "proof": "Proof"
            },
            "Proof": {
              "blockHash": "H256",
              "txIndex": "u32",
              "data": "(Vec<Vec<u8>>, Vec<Vec<u8>>)"
            },
            "EthereumHeaderId": {
              "number": "u64",
              "hash": "H256"
            },
            "EthereumHeader": {
              "parentHash": "H256",
              "timestamp": "u64",
              "number": "u64",
              "author": "H160",
              "transactionsRoot": "H256",
              "ommersHash": "H256",
              "extraData": "Vec<u8>",
              "stateRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "gasUsed": "U256",
              "gasLimit": "U256",
              "difficulty": "U256",
              "seal": "Vec<Vec<u8>>",
              "baseFee": "Option<U256>"
            },
            "StoredHeader": {
              "submitter": "Option<AccountId>",
              "header": "EthereumHeader",
              "totalDifficulty": "U256",
              "finalized": "bool"
            },
            "EthashProofData": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "Bloom": "[u8; 256]",
            "PruningRange": {
              "oldestUnprunedBlock": "u64",
              "oldestBlockToKeep": "u64"
            },
            "EthereumDifficultyConfig": {
              "byzantiumForkBlock": "u64",
              "constantinopleForkBlock": "u64",
              "muirGlacierForkBlock": "u64",
              "londonForkBlock": "u64"
            },
            "AssetId": {
              "_enum": {
                "ETH": null,
                "Token": "H160"
              }
            },
            "TokenId": "u128",
            "TokenData": {
              "tokenContract": "H160",
              "tokenId": "U256"
            },
            "TokenInfoOf": {
              "owner": "AccountId",
              "metadata": "Vec<u8>",
              "data": "TokenData"
            }
          }
        }
      ]
    },
    "sora-substrate": {
      "alias": {
        "ethBridge": {
          "StorageVersion": "EthBridgeStorageVersion"
        },
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      },
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "assets": {
          "freeBalance": {
            "description": "Get free balance of particular asset for account.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_freeBalance",
            "method": "freeBalance",
            "section": "assets"
          },
          "usableBalance": {
            "description": "Get usable (free and non-frozen, except for network fees) balance of particular asset for account.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_usableBalance",
            "method": "usableBalance",
            "section": "assets"
          },
          "totalBalance": {
            "description": "Get total balance (free + reserved) of particular asset for account.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_totalBalance",
            "method": "totalBalance",
            "section": "assets"
          },
          "totalSupply": {
            "description": "Get total supply of particular asset on chain.",
            "params": [
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_totalSupply",
            "method": "totalSupply",
            "section": "assets"
          },
          "listAssetIds": {
            "description": "List Ids of all assets registered on chain.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<AssetId>",
            "isSubscription": false,
            "jsonrpc": "assets_listAssetIds",
            "method": "listAssetIds",
            "section": "assets"
          },
          "listAssetInfos": {
            "description": "List Infos of all assets registered on chain.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<AssetInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_listAssetInfos",
            "method": "listAssetInfos",
            "section": "assets"
          },
          "getAssetInfo": {
            "description": "Get Info for particular asset on chain.",
            "params": [
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<AssetInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_getAssetInfo",
            "method": "getAssetInfo",
            "section": "assets"
          }
        },
        "dexApi": {
          "canExchange": {
            "description": "Query capability to exchange particular tokens on DEX.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "liquiditySourceType",
                "type": "LiquiditySourceType"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "dexApi_canExchange",
            "method": "canExchange",
            "section": "dexApi"
          },
          "listSupportedSources": {
            "description": "List liquidity source types enabled on chain.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<LiquiditySourceType>",
            "isSubscription": false,
            "jsonrpc": "dexApi_listSupportedSources",
            "method": "listSupportedSources",
            "section": "dexApi"
          },
          "quote": {
            "description": "Get price for a given input or output token amount.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "liquiditySourceType",
                "type": "LiquiditySourceType"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "amount",
                "type": "String"
              },
              {
                "name": "swapVariant",
                "type": "SwapVariant"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<SwapOutcomeInfo>",
            "isSubscription": false,
            "jsonrpc": "dexApi_quote",
            "method": "quote",
            "section": "dexApi"
          }
        },
        "dexManager": {
          "listDEXIds": {
            "description": "Enumerate available ids of DEXes",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<DEXId>",
            "isSubscription": false,
            "jsonrpc": "dexManager_listDEXIds",
            "method": "listDEXIds",
            "section": "dexManager"
          },
          "testBalance": {
            "description": "Test type of Balance",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Fixed",
            "isSubscription": false,
            "jsonrpc": "dexManager_testBalance",
            "method": "testBalance",
            "section": "dexManager"
          }
        },
        "ethBridge": {
          "getRequests": {
            "description": "Get registered requests and their statuses.",
            "params": [
              {
                "name": "requestHashes",
                "type": "Vec<H256>"
              },
              {
                "name": "networkId",
                "type": "BridgeNetworkId",
                "isOptional": true
              },
              {
                "name": "redirectFinishedLoadRequests",
                "type": "bool",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<(OffchainRequest, RequestStatus)>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getRequests",
            "method": "getRequests",
            "section": "ethBridge"
          },
          "getApprovedRequests": {
            "description": "Get approved encoded requests and their approvals.",
            "params": [
              {
                "name": "requestHashes",
                "type": "Vec<H256>"
              },
              {
                "name": "networkId",
                "type": "BridgeNetworkId",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<(OutgoingRequestEncoded, Vec<SignatureParams>)>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getApprovedRequests",
            "method": "getApprovedRequests",
            "section": "ethBridge"
          },
          "getApprovals": {
            "description": "Get approvals of the given requests.",
            "params": [
              {
                "name": "requestHashes",
                "type": "Vec<H256>"
              },
              {
                "name": "networkId",
                "type": "BridgeNetworkId",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<Vec<SignatureParams>>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getApprovals",
            "method": "getApprovals",
            "section": "ethBridge"
          },
          "getAccountRequests": {
            "description": "Get account requests hashes.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "statusFilter",
                "type": "RequestStatus",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<(BridgeNetworkId, H256)>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getAccountRequests",
            "method": "getAccountRequests",
            "section": "ethBridge"
          },
          "getRegisteredAssets": {
            "description": "Get registered assets and tokens.",
            "params": [
              {
                "name": "networkId",
                "type": "BridgeNetworkId",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<(AssetKind, (AssetId, BalancePrecision), Option<(H160, BalancePrecision)>)>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getRegisteredAssets",
            "method": "getRegisteredAssets",
            "section": "ethBridge"
          }
        },
        "irohaMigration": {
          "needsMigration": {
            "description": "Check if the account needs migration",
            "params": [
              {
                "name": "irohaAddress",
                "type": "String"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "irohaMigration_needsMigration",
            "method": "needsMigration",
            "section": "irohaMigration"
          }
        },
        "liquidityProxy": {
          "quote": {
            "description": "Get price with indicated Asset amount and direction, filtered by selected_types",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "amount",
                "type": "String"
              },
              {
                "name": "swapVariant",
                "type": "SwapVariant"
              },
              {
                "name": "selectedSourceTypes",
                "type": "Vec<LiquiditySourceType>"
              },
              {
                "name": "filterMode",
                "type": "FilterMode"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<LPSwapOutcomeInfo>",
            "isSubscription": false,
            "jsonrpc": "liquidityProxy_quote",
            "method": "quote",
            "section": "liquidityProxy"
          },
          "isPathAvailable": {
            "description": "Check if given two arbitrary tokens can be exchanged via any liquidity sources",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "liquidityProxy_isPathAvailable",
            "method": "isPathAvailable",
            "section": "liquidityProxy"
          },
          "listEnabledSourcesForPath": {
            "description": "Given two arbitrary tokens, list liquidity sources that can be used along the path.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<LiquiditySourceType>",
            "isSubscription": false,
            "jsonrpc": "liquidityProxy_listEnabledSourcesForPath",
            "method": "listEnabledSourcesForPath",
            "section": "liquidityProxy"
          }
        },
        "pswapDistribution": {
          "claimableAmount": {
            "description": "Get amount of PSWAP claimable by user (liquidity provision reward).",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "BalanceInfo",
            "isSubscription": false,
            "jsonrpc": "pswapDistribution_claimableAmount",
            "method": "claimableAmount",
            "section": "pswapDistribution"
          }
        },
        "rewards": {
          "claimables": {
            "description": "Get claimable rewards",
            "params": [
              {
                "name": "ethAddress",
                "type": "EthAddress"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "rewards_claimables",
            "method": "claimables",
            "section": "rewards"
          }
        },
        "template": {
          "testMultiply2": {
            "description": "Test type of Balance",
            "params": [
              {
                "name": "amount",
                "type": "String"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<CustomInfo>",
            "isSubscription": false,
            "jsonrpc": "template_testMultiply2",
            "method": "testMultiply2",
            "section": "template"
          }
        },
        "tradingPair": {
          "listEnabledPairs": {
            "description": "List enabled trading pairs for DEX.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<TradingPair>",
            "isSubscription": false,
            "jsonrpc": "tradingPair_listEnabledPairs",
            "method": "listEnabledPairs",
            "section": "tradingPair"
          },
          "isPairEnabled": {
            "description": "Query if particular trading pair is enabled for DEX.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "tradingPair_isPairEnabled",
            "method": "isPairEnabled",
            "section": "tradingPair"
          },
          "listEnabledSourcesForPair": {
            "description": "List enabled liquidity sources for trading pair.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "baseAssetId",
                "type": "AssetId"
              },
              {
                "name": "targetAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<LiquiditySourceType>",
            "isSubscription": false,
            "jsonrpc": "tradingPair_listEnabledSourcesForPair",
            "method": "listEnabledSourcesForPair",
            "section": "tradingPair"
          },
          "isSourceEnabledForPair": {
            "description": "Query if particular liquidity source is enabled for pair.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "baseAssetId",
                "type": "AssetId"
              },
              {
                "name": "targetAssetId",
                "type": "AssetId"
              },
              {
                "name": "liquiditySourceType",
                "type": "LiquiditySourceType"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "tradingPair_isSourceEnabledForPair",
            "method": "isSourceEnabledForPair",
            "section": "tradingPair"
          }
        },
        "vestedRewards": {
          "crowdloanClaimable": {
            "description": "Get available crowdloan reward for a user.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "vestedRewards_crowdloanClaimable",
            "method": "crowdloanClaimable",
            "section": "vestedRewards"
          },
          "crowdloanLease": {
            "description": "Get crowdloan rewards lease period info.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "CrowdloanLease",
            "isSubscription": false,
            "jsonrpc": "vestedRewards_crowdloanLease",
            "method": "crowdloanLease",
            "section": "vestedRewards"
          }
        },
        "leafProvider": {
          "latestDigest": {
            "description": "Get leaf provider logs.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "AuxiliaryDigest",
            "isSubscription": false,
            "jsonrpc": "leafProvider_latestDigest",
            "method": "latestDigest",
            "section": "leafProvider"
          }
        },
        "basicChannel": {
          "commitment": {
            "description": "Get basic channel messages.",
            "params": [
              {
                "name": "commitmentHash",
                "type": "H256"
              }
            ],
            "type": "Option<Vec<BasicChannelMessage>>",
            "isSubscription": false,
            "jsonrpc": "basicChannel_commitment",
            "method": "commitment",
            "section": "basicChannel"
          }
        },
        "intentivizedChannel": {
          "commitment": {
            "description": "Get intentivized channel messages.",
            "params": [
              {
                "name": "commitmentHash",
                "type": "H256"
              }
            ],
            "type": "Option<Vec<IntentivizedChannelMessage>>",
            "isSubscription": false,
            "jsonrpc": "intentivizedChannel_commitment",
            "method": "commitment",
            "section": "intentivizedChannel"
          }
        }
      },
      "types": [
        {
          "minmax": [
            2,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "Share": "u128",
            "OracleValue": "FixedU128",
            "BalanceInfo": {
              "balance": "Balance"
            },
            "AssetInfo": {
              "assetId": "AssetId",
              "symbol": "AssetSymbolStr",
              "name": "AssetNameStr",
              "precision": "u8",
              "isMintable": "bool"
            },
            "AssetSymbolStr": "String",
            "AssetNameStr": "String",
            "AssetRecord": "Null",
            "VotingInfo": {
              "votingOption": "u32",
              "numberOfVotes": "Balance",
              "ceresWithdrawn": "bool"
            },
            "PollInfo": {
              "numberOfOptions": "u32",
              "pollStartTimestamp": "Moment",
              "pollEndTimestamp": "Moment"
            },
            "LockInfo": {
              "poolTokens": "Balance",
              "unlockingTimestamp": "Moment",
              "assetA": "AssetId",
              "assetB": "AssetId"
            },
            "StakingInfo": {
              "deposited": "Balance",
              "rewards": "Balance"
            },
            "TokenLockInfo": {
              "tokens": "Balance",
              "unlockingTimestamp": "Moment",
              "assetId": "AssetId"
            },
            "ContributorsVesting": {
              "firstReleasePercent": "Balance",
              "vestingPeriod": "Moment",
              "vestingPercent": "Balance"
            },
            "TeamVesting": {
              "teamVestingTotalTokens": "Balance",
              "teamVestingFirstReleasePercent": "Balance",
              "teamVestingPeriod": "Moment",
              "teamVestingPercent": "Balance"
            },
            "ContributionInfo": {
              "fundsContributed": "Balance",
              "tokensBought": "Balance",
              "tokensClaimed": "Balance",
              "claimingFinished": "bool",
              "numberOfClaims": "u32"
            },
            "ILOInfo": {
              "iloOrganizer": "AccountId",
              "tokensForIlo": "Balance",
              "tokensForLiquidity": "Balance",
              "iloPrice": "Balance",
              "softCap": "Balance",
              "hardCap": "Balance",
              "minContribution": "Balance",
              "maxContribution": "Balance",
              "refundType": "bool",
              "liquidityPercent": "Balance",
              "listingPrice": "Balance",
              "lockupDays": "u32",
              "startTimestamp": "Moment",
              "endTimestamp": "Moment",
              "contributorsVesting": "ContributorsVesting",
              "teamVesting": "TeamVesting",
              "soldTokens": "Balance",
              "fundsRaised": "Balance",
              "succeeded": "bool",
              "failed": "bool",
              "lpTokens": "Balance",
              "claimedLpTokens": "bool",
              "finishTimestamp": "Moment"
            },
            "PoolData": {
              "multiplier": "u32",
              "depositFee": "Balance",
              "isCore": "bool",
              "isFarm": "bool",
              "totalTokensInPool": "Balance",
              "rewards": "Balance",
              "rewardsToBeDistributed": "Balance",
              "isRemoved": "bool"
            },
            "TokenInfo": {
              "farmsTotalMultiplier": "u32",
              "stakingTotalMultiplier": "u32",
              "tokenPerBlock": "Balance",
              "farmsAllocation": "Balance",
              "stakingAllocation": "Balance",
              "teamAllocation": "Balance",
              "teamAccount": "AccountId"
            },
            "UserInfo": {
              "poolAsset": "AssetId",
              "rewardAsset": "AssetId",
              "isFarm": "bool",
              "pooledTokens": "Balance",
              "rewards": "Balance"
            },
            "MultiChainHeight": {
              "_enum": {
                "Thischain": "BlockNumber",
                "Sidechain": "u64"
              }
            },
            "BridgeTimepoint": {
              "height": "MultiChainHeight",
              "index": "u32"
            },
            "EthPeersSync": {
              "isBridgeReady": "bool",
              "isXorReady": "bool",
              "isValReady": "bool"
            },
            "BridgeStatus": {
              "_enum": [
                "Initialized",
                "Migrating"
              ]
            },
            "BridgeNetworkId": "u32",
            "AssetKind": {
              "_enum": [
                "Thischain",
                "Sidechain",
                "SidechainOwned"
              ]
            },
            "RequestStatus": {
              "_enum": [
                "Pending",
                "Frozen",
                "ApprovalsReady",
                "Failed",
                "Done"
              ]
            },
            "SignatureParams": {
              "r": "[u8; 32]",
              "s": "[u8; 32]",
              "v": "u8"
            },
            "IncomingTransactionRequestKind": {
              "_enum": [
                "Transfer",
                "AddAsset",
                "AddPeer",
                "RemovePeer",
                "PrepareForMigration",
                "Migrate",
                "AddPeerCompat",
                "RemovePeerCompat",
                "TransferXOR"
              ]
            },
            "IncomingMetaRequestKind": {
              "_enum": [
                "CancelOutgoingRequest",
                "MarkAsDone"
              ]
            },
            "IncomingRequestKind": {
              "_enum": {
                "Transaction": "IncomingTransactionRequestKind",
                "Meta": "IncomingMetaRequestKind"
              }
            },
            "ChangePeersContract": {
              "_enum": [
                "XOR",
                "VAL"
              ]
            },
            "CurrencyIdEncoded": {
              "_enum": {
                "AssetId": "H256",
                "TokenAddress": "H160"
              }
            },
            "FixedBytes": "Vec<u8>",
            "OutgoingTransfer": {
              "from": "AccountId",
              "to": "EthAddress",
              "assetId": "AssetId",
              "amount": "Balance",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingTransferEncoded": {
              "currencyId": "CurrencyIdEncoded",
              "amount": "U256",
              "to": "EthAddress",
              "from": "EthAddress",
              "txHash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingAddAsset": {
              "author": "AccountId",
              "assetId": "AssetId",
              "supply": "Balance",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingAddAssetEncoded": {
              "name": "String",
              "symbol": "String",
              "decimal": "u8",
              "supply": "U256",
              "sidechainAssetId": "FixedBytes",
              "hash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingAddToken": {
              "author": "AccountId",
              "tokenAddress": "EthAddress",
              "ticker": "String",
              "name": "String",
              "decimals": "u8",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingAddTokenEncoded": {
              "tokenAddress": "EthAddress",
              "ticker": "String",
              "name": "String",
              "decimals": "u8",
              "hash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingAddPeer": {
              "author": "AccountId",
              "peerAddress": "EthAddress",
              "peerAccountId": "AccountId",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingAddPeerCompat": {
              "author": "AccountId",
              "peerAddress": "EthAddress",
              "peerAccountId": "AccountId",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingAddPeerEncoded": {
              "peerAddress": "EthAddress",
              "txHash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingRemovePeer": {
              "author": "AccountId",
              "peerAccountId": "AccountId",
              "peerAddress": "EthAddress",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingRemovePeerCompat": {
              "author": "AccountId",
              "peerAccountId": "AccountId",
              "peerAddress": "EthAddress",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingRemovePeerEncoded": {
              "peerAddress": "EthAddress",
              "txHash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingPrepareForMigration": {
              "author": "AccountId",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingPrepareForMigrationEncoded": {
              "thisContractAddress": "EthAddress",
              "txHash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingMigrate": {
              "author": "AccountId",
              "newContractAddress": "EthAddress",
              "erc20NativeTokens": "Vec<EthAddress>",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingMigrateEncoded": {
              "thisContractAddress": "EthAddress",
              "txHash": "H256",
              "newContractAddress": "EthAddress",
              "erc20NativeTokens": "Vec<EthAddress>",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingRequest": {
              "_enum": {
                "Transfer": "OutgoingTransfer",
                "AddAsset": "OutgoingAddAsset",
                "AddToken": "OutgoingAddToken",
                "AddPeer": "OutgoingAddPeer",
                "RemovePeer": "OutgoingRemovePeer",
                "PrepareForMigration": "OutgoingPrepareForMigration",
                "Migrate": "OutgoingMigrate"
              }
            },
            "OutgoingRequestEncoded": {
              "_enum": {
                "Transfer": "OutgoingTransferEncoded",
                "AddAsset": "OutgoingAddAssetEncoded",
                "AddToken": "OutgoingAddTokenEncoded",
                "AddPeer": "OutgoingAddPeerEncoded",
                "RemovePeer": "OutgoingRemovePeerEncoded",
                "PrepareForMigration": "OutgoingPrepareForMigrationEncoded",
                "Migrate": "OutgoingMigrateEncoded"
              }
            },
            "IncomingTransfer": {
              "from": "EthAddress",
              "to": "AccountId",
              "assetId": "AssetId",
              "assetKind": "AssetKind",
              "amount": "Balance",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingAddToken": {
              "tokenAddress": "EthAddress",
              "assetId": "AssetId",
              "precision": "BalancePrecision",
              "symbol": "AssetSymbol",
              "name": "AssetName",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingChangePeers": {
              "peerAccountId": "AccountId",
              "peerAddress": "EthAddress",
              "added": "bool",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingChangePeersCompat": {
              "peerAccountId": "AccountId",
              "peerAddress": "EthAddress",
              "added": "bool",
              "contract": "ChangePeersContract",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingCancelOutgoingRequest": {
              "outgoingRequest": "OutgoingRequest",
              "outgoingRequestHash": "H256",
              "initialRequestHash": "H256",
              "txInput": "Vec<u8>",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingMarkAsDoneRequest": {
              "outgoingRequestHash": "H256",
              "initialRequestHash": "H256",
              "author": "AccountId",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingPrepareForMigration": {
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingMigrate": {
              "newContractAddress": "EthAddress",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingRequest": {
              "_enum": {
                "Transfer": "IncomingTransfer",
                "AddToken": "IncomingAddToken",
                "ChangePeers": "IncomingChangePeers",
                "CancelOutgoingRequest": "IncomingCancelOutgoingRequest",
                "MarkAsDone": "IncomingMarkAsDoneRequest",
                "PrepareForMigration": "IncomingPrepareForMigration",
                "Migrate": "IncomingMigrate"
              }
            },
            "LoadIncomingTransactionRequest": {
              "author": "AccountId",
              "hash": "H256",
              "timepoint": "BridgeTimepoint",
              "kind": "IncomingTransactionRequestKind",
              "networkId": "BridgeNetworkId"
            },
            "LoadIncomingMetaRequest": {
              "author": "AccountId",
              "hash": "H256",
              "timepoint": "BridgeTimepoint",
              "kind": "IncomingMetaRequestKind",
              "networkId": "BridgeNetworkId"
            },
            "LoadIncomingRequest": {
              "_enum": {
                "Transaction": "LoadIncomingTransactionRequest",
                "Meta": "(LoadIncomingMetaRequest, H256)"
              }
            },
            "OffchainRequest": {
              "_enum": {
                "Outgoing": "(OutgoingRequest, H256)",
                "LoadIncoming": "LoadIncomingRequest",
                "Incoming": "(IncomingRequest, H256)"
              }
            },
            "EthBridgeStorageVersion": {
              "_enum": [
                "V1",
                "V2RemovePendingTransfers"
              ]
            },
            "EthAddress": "H160",
            "PoolFarmer": {
              "account": "AccountId",
              "block": "BlockNumber",
              "weight": "Balance"
            },
            "PendingMultisigAccount": {
              "approvingAccounts": "Vec<AccountId>",
              "migrateAt": "Option<BlockNumber>"
            },
            "LPSwapOutcomeInfo": {
              "amount": "Balance",
              "fee": "Balance",
              "rewards": "Vec<LPRewardsInfo>",
              "amountWithoutImpact": "Balance"
            },
            "LPRewardsInfo": {
              "amount": "Balance",
              "currency": "AssetId",
              "reason": "RewardReason"
            },
            "LiquiditySourceIdOf": {
              "dexId": "DEXId",
              "liquiditySourceIndex": "LiquiditySourceType"
            },
            "AssetIdOf": "AssetId",
            "Amount": "i128",
            "AmountOf": "Amount",
            "CurrencyId": "AssetId",
            "CurrencyIdOf": "AssetId",
            "BasisPoints": "u16",
            "Fixed": "FixedU128",
            "FarmId": "u64",
            "DEXId": "u32",
            "DEXIdOf": "DEXId",
            "DEXInfo": {
              "baseAssetId": "AssetId",
              "defaultFee": "BasisPoints",
              "defaultProtocolFee": "BasisPoints"
            },
            "BalancePrecision": "u8",
            "AssetSymbol": "Vec<u8>",
            "AssetName": "Vec<u8>",
            "AssetId32": "[u8; 32]",
            "SwapWithDesiredInput": {
              "desiredAmountIn": "Balance",
              "minAmountOut": "Balance"
            },
            "SwapWithDesiredOutput": {
              "desiredAmountOut": "Balance",
              "maxAmountIn": "Balance"
            },
            "SwapAmount": {
              "_enum": {
                "WithDesiredInput": "SwapWithDesiredInput",
                "WithDesiredOutput": "SwapWithDesiredOutput"
              }
            },
            "QuoteWithDesiredInput": {
              "desiredAmountIn": "Balance"
            },
            "QuoteWithDesiredOutput": {
              "desiredAmountOut": "Balance"
            },
            "QuoteAmount": {
              "_enum": {
                "WithDesiredInput": "QuoteWithDesiredInput",
                "WithDesiredOutput": "QuoteWithDesiredOutput"
              }
            },
            "SwapVariant": {
              "_enum": [
                "WithDesiredInput",
                "WithDesiredOutput"
              ]
            },
            "TechAmount": "Amount",
            "TechBalance": "Balance",
            "SwapOutcome": {
              "amount": "Balance",
              "fee": "Balance"
            },
            "LiquiditySourceType": {
              "_enum": [
                "XYKPool",
                "BondingCurvePool",
                "MulticollateralBondingCurvePool",
                "MockPool",
                "MockPool2",
                "MockPool3",
                "MockPool4",
                "XSTPool"
              ]
            },
            "FilterMode": {
              "_enum": [
                "Disabled",
                "ForbidSelected",
                "AllowSelected"
              ]
            },
            "SwapOutcomeInfo": {
              "amount": "Balance",
              "fee": "Balance"
            },
            "TradingPair": {
              "baseAssetId": "AssetId",
              "targetAssetId": "AssetId"
            },
            "PermissionId": "u32",
            "HolderId": "AccountId",
            "OwnerId": "AccountId",
            "Mode": {
              "_enum": [
                "Permit",
                "Forbid"
              ]
            },
            "Scope": {
              "_enum": {
                "Limited": "H512",
                "Unlimited": "Null"
              }
            },
            "OracleKey": "AssetId",
            "ChargeFeeInfo": {
              "tip": "Compact<Balance>",
              "target_asset_id": "AssetId"
            },
            "SwapAction": "Null",
            "ValidationFunction": "Null",
            "Permission": "Null",
            "DistributionAccounts": "Null",
            "MultisigAccount": {
              "signatories": "Vec<AccountId>",
              "threshold": "u8"
            },
            "Farmer": "Null",
            "Farm": "Null",
            "SmoothPriceState": "Null",
            "MultiCurrencyBalanceOf": "MultiCurrencyBalance",
            "Duration": "Null",
            "PostDispatchInfo": {
              "actualWeight": "Option<Weight>",
              "paysFee": "Pays"
            },
            "DispatchErrorWithPostInfoTPostDispatchInfo": {
              "postInfo": "PostDispatchInfo",
              "error": "DispatchError"
            },
            "DispatchResultWithPostInfo": "Result<PostDispatchInfo, DispatchErrorWithPostInfoTPostDispatchInfo>",
            "Public": "[u8; 33]",
            "RewardReason": {
              "_enum": [
                "Unspecified",
                "BuyOnBondingCurve",
                "LiquidityProvisionFarming",
                "MarketMakerVolume"
              ]
            },
            "StorageVersion": "Null",
            "MarketMakerInfo": {
              "count": "u32",
              "volume": "Balance"
            },
            "CrowdloanReward": {
              "id": "Vec<u8>",
              "address": "Vec<u8>",
              "contribution": "Fixed",
              "xorReward": "Fixed",
              "valReward": "Fixed",
              "pswapReward": "Fixed",
              "xstusdReward": "Fixed",
              "percent": "Fixed"
            },
            "PredefinedAssetId": {
              "_enum": [
                "XOR",
                "DOT",
                "KSM",
                "USDT",
                "VAL",
                "PSWAP",
                "DAI",
                "ETH",
                "XSTUSD"
              ]
            },
            "RewardInfo": {
              "limit": "Balance",
              "totalAvailable": "Balance",
              "rewards": "BTreeMap<RewardReason, Balance>"
            },
            "TechTradingPair": {
              "baseAssetId": "TechAssetId",
              "targetAssetId": "TechAssetId"
            },
            "TechAssetId": {
              "_enum": {
                "Wrapped": "PredefinedAssetId",
                "Escaped": "AssetId"
              }
            },
            "TechPurpose": {
              "_enum": {
                "FeeCollector": "Null",
                "FeeCollectorForPair": "TechTradingPair",
                "LiquidityKeeper": "TechTradingPair",
                "Identifier": "Vec<u8>"
              }
            },
            "TechAccountId": {
              "_enum": {
                "Pure": "(DEXId, TechPurpose)",
                "Generic": "(Vec<u8>, Vec<u8>)",
                "Wrapped": "AccountId",
                "WrappedRepr": "AccountId"
              }
            },
            "PriceInfo": {
              "priceFailures": "u32",
              "spotPrices": "Vec<Balance>",
              "averagePrice": "Balance",
              "needsUpdate": "bool",
              "lastSpotPrice": "Balance"
            },
            "ContentSource": "Text",
            "Description": "Text",
            "CustomInfo": {
              "amount": "Balance"
            },
            "TP": "TradingPair",
            "CrowdloanLease": {
              "startBlock": "String",
              "totalDays": "String",
              "blocksPerDay": "String"
            },
            "AuxiliaryDigest": {
              "logs": "Vec<AuxiliaryDigestItem>"
            },
            "AuxiliaryDigestItem": {
              "_enum": {
                "Commitment": "(EthNetworkId, ChannelId, H256)"
              }
            },
            "EthNetworkId": "U256",
            "ChannelId": {
              "_enum": {
                "Basic": null,
                "Incentivized": null
              }
            },
            "BasicChannelMessage": {
              "networkId": "EthNetworkId",
              "target": "H160",
              "nonce": "u64",
              "payload": "Vec<u8>"
            },
            "IntentivizedChannelMessage": {
              "networkId": "EthNetworkId",
              "target": "H160",
              "nonce": "u64",
              "fee": "U256",
              "payload": "Vec<u8>"
            },
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "AssetId": "AssetId32",
            "Keys": "SessionKeys3",
            "RefCount": "u32",
            "Balance": "u128",
            "TAssetBalance": "Balance",
            "MultiCurrencyBalance": "Balance",
            "AccountInfo": "AccountInfoWithDualRefCount"
          }
        }
      ]
    },
    "sora_ksm": {
      "alias": {
        "ethBridge": {
          "StorageVersion": "EthBridgeStorageVersion"
        },
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      },
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "assets": {
          "freeBalance": {
            "description": "Get free balance of particular asset for account.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_freeBalance",
            "method": "freeBalance",
            "section": "assets"
          },
          "usableBalance": {
            "description": "Get usable (free and non-frozen, except for network fees) balance of particular asset for account.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_usableBalance",
            "method": "usableBalance",
            "section": "assets"
          },
          "totalBalance": {
            "description": "Get total balance (free + reserved) of particular asset for account.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_totalBalance",
            "method": "totalBalance",
            "section": "assets"
          },
          "totalSupply": {
            "description": "Get total supply of particular asset on chain.",
            "params": [
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_totalSupply",
            "method": "totalSupply",
            "section": "assets"
          },
          "listAssetIds": {
            "description": "List Ids of all assets registered on chain.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<AssetId>",
            "isSubscription": false,
            "jsonrpc": "assets_listAssetIds",
            "method": "listAssetIds",
            "section": "assets"
          },
          "listAssetInfos": {
            "description": "List Infos of all assets registered on chain.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<AssetInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_listAssetInfos",
            "method": "listAssetInfos",
            "section": "assets"
          },
          "getAssetInfo": {
            "description": "Get Info for particular asset on chain.",
            "params": [
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<AssetInfo>",
            "isSubscription": false,
            "jsonrpc": "assets_getAssetInfo",
            "method": "getAssetInfo",
            "section": "assets"
          }
        },
        "dexApi": {
          "canExchange": {
            "description": "Query capability to exchange particular tokens on DEX.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "liquiditySourceType",
                "type": "LiquiditySourceType"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "dexApi_canExchange",
            "method": "canExchange",
            "section": "dexApi"
          },
          "listSupportedSources": {
            "description": "List liquidity source types enabled on chain.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<LiquiditySourceType>",
            "isSubscription": false,
            "jsonrpc": "dexApi_listSupportedSources",
            "method": "listSupportedSources",
            "section": "dexApi"
          },
          "quote": {
            "description": "Get price for a given input or output token amount.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "liquiditySourceType",
                "type": "LiquiditySourceType"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "amount",
                "type": "String"
              },
              {
                "name": "swapVariant",
                "type": "SwapVariant"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<SwapOutcomeInfo>",
            "isSubscription": false,
            "jsonrpc": "dexApi_quote",
            "method": "quote",
            "section": "dexApi"
          }
        },
        "dexManager": {
          "listDEXIds": {
            "description": "Enumerate available ids of DEXes",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<DEXId>",
            "isSubscription": false,
            "jsonrpc": "dexManager_listDEXIds",
            "method": "listDEXIds",
            "section": "dexManager"
          },
          "testBalance": {
            "description": "Test type of Balance",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Fixed",
            "isSubscription": false,
            "jsonrpc": "dexManager_testBalance",
            "method": "testBalance",
            "section": "dexManager"
          }
        },
        "ethBridge": {
          "getRequests": {
            "description": "Get registered requests and their statuses.",
            "params": [
              {
                "name": "requestHashes",
                "type": "Vec<H256>"
              },
              {
                "name": "networkId",
                "type": "BridgeNetworkId",
                "isOptional": true
              },
              {
                "name": "redirectFinishedLoadRequests",
                "type": "bool",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<(OffchainRequest, RequestStatus)>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getRequests",
            "method": "getRequests",
            "section": "ethBridge"
          },
          "getApprovedRequests": {
            "description": "Get approved encoded requests and their approvals.",
            "params": [
              {
                "name": "requestHashes",
                "type": "Vec<H256>"
              },
              {
                "name": "networkId",
                "type": "BridgeNetworkId",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<(OutgoingRequestEncoded, Vec<SignatureParams>)>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getApprovedRequests",
            "method": "getApprovedRequests",
            "section": "ethBridge"
          },
          "getApprovals": {
            "description": "Get approvals of the given requests.",
            "params": [
              {
                "name": "requestHashes",
                "type": "Vec<H256>"
              },
              {
                "name": "networkId",
                "type": "BridgeNetworkId",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<Vec<SignatureParams>>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getApprovals",
            "method": "getApprovals",
            "section": "ethBridge"
          },
          "getAccountRequests": {
            "description": "Get account requests hashes.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "statusFilter",
                "type": "RequestStatus",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<(BridgeNetworkId, H256)>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getAccountRequests",
            "method": "getAccountRequests",
            "section": "ethBridge"
          },
          "getRegisteredAssets": {
            "description": "Get registered assets and tokens.",
            "params": [
              {
                "name": "networkId",
                "type": "BridgeNetworkId",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Result<Vec<(AssetKind, (AssetId, BalancePrecision), Option<(H160, BalancePrecision)>)>, DispatchError>",
            "isSubscription": false,
            "jsonrpc": "ethBridge_getRegisteredAssets",
            "method": "getRegisteredAssets",
            "section": "ethBridge"
          }
        },
        "irohaMigration": {
          "needsMigration": {
            "description": "Check if the account needs migration",
            "params": [
              {
                "name": "irohaAddress",
                "type": "String"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "irohaMigration_needsMigration",
            "method": "needsMigration",
            "section": "irohaMigration"
          }
        },
        "liquidityProxy": {
          "quote": {
            "description": "Get price with indicated Asset amount and direction, filtered by selected_types",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "amount",
                "type": "String"
              },
              {
                "name": "swapVariant",
                "type": "SwapVariant"
              },
              {
                "name": "selectedSourceTypes",
                "type": "Vec<LiquiditySourceType>"
              },
              {
                "name": "filterMode",
                "type": "FilterMode"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<LPSwapOutcomeInfo>",
            "isSubscription": false,
            "jsonrpc": "liquidityProxy_quote",
            "method": "quote",
            "section": "liquidityProxy"
          },
          "isPathAvailable": {
            "description": "Check if given two arbitrary tokens can be exchanged via any liquidity sources",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "liquidityProxy_isPathAvailable",
            "method": "isPathAvailable",
            "section": "liquidityProxy"
          },
          "listEnabledSourcesForPath": {
            "description": "Given two arbitrary tokens, list liquidity sources that can be used along the path.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<LiquiditySourceType>",
            "isSubscription": false,
            "jsonrpc": "liquidityProxy_listEnabledSourcesForPath",
            "method": "listEnabledSourcesForPath",
            "section": "liquidityProxy"
          }
        },
        "pswapDistribution": {
          "claimableAmount": {
            "description": "Get amount of PSWAP claimable by user (liquidity provision reward).",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "BalanceInfo",
            "isSubscription": false,
            "jsonrpc": "pswapDistribution_claimableAmount",
            "method": "claimableAmount",
            "section": "pswapDistribution"
          }
        },
        "rewards": {
          "claimables": {
            "description": "Get claimable rewards",
            "params": [
              {
                "name": "ethAddress",
                "type": "EthAddress"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "rewards_claimables",
            "method": "claimables",
            "section": "rewards"
          }
        },
        "template": {
          "testMultiply2": {
            "description": "Test type of Balance",
            "params": [
              {
                "name": "amount",
                "type": "String"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<CustomInfo>",
            "isSubscription": false,
            "jsonrpc": "template_testMultiply2",
            "method": "testMultiply2",
            "section": "template"
          }
        },
        "tradingPair": {
          "listEnabledPairs": {
            "description": "List enabled trading pairs for DEX.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<TradingPair>",
            "isSubscription": false,
            "jsonrpc": "tradingPair_listEnabledPairs",
            "method": "listEnabledPairs",
            "section": "tradingPair"
          },
          "isPairEnabled": {
            "description": "Query if particular trading pair is enabled for DEX.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "inputAssetId",
                "type": "AssetId"
              },
              {
                "name": "outputAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "tradingPair_isPairEnabled",
            "method": "isPairEnabled",
            "section": "tradingPair"
          },
          "listEnabledSourcesForPair": {
            "description": "List enabled liquidity sources for trading pair.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "baseAssetId",
                "type": "AssetId"
              },
              {
                "name": "targetAssetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Vec<LiquiditySourceType>",
            "isSubscription": false,
            "jsonrpc": "tradingPair_listEnabledSourcesForPair",
            "method": "listEnabledSourcesForPair",
            "section": "tradingPair"
          },
          "isSourceEnabledForPair": {
            "description": "Query if particular liquidity source is enabled for pair.",
            "params": [
              {
                "name": "dexId",
                "type": "DEXId"
              },
              {
                "name": "baseAssetId",
                "type": "AssetId"
              },
              {
                "name": "targetAssetId",
                "type": "AssetId"
              },
              {
                "name": "liquiditySourceType",
                "type": "LiquiditySourceType"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "bool",
            "isSubscription": false,
            "jsonrpc": "tradingPair_isSourceEnabledForPair",
            "method": "isSourceEnabledForPair",
            "section": "tradingPair"
          }
        },
        "vestedRewards": {
          "crowdloanClaimable": {
            "description": "Get available crowdloan reward for a user.",
            "params": [
              {
                "name": "accountId",
                "type": "AccountId"
              },
              {
                "name": "assetId",
                "type": "AssetId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "Option<BalanceInfo>",
            "isSubscription": false,
            "jsonrpc": "vestedRewards_crowdloanClaimable",
            "method": "crowdloanClaimable",
            "section": "vestedRewards"
          },
          "crowdloanLease": {
            "description": "Get crowdloan rewards lease period info.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "CrowdloanLease",
            "isSubscription": false,
            "jsonrpc": "vestedRewards_crowdloanLease",
            "method": "crowdloanLease",
            "section": "vestedRewards"
          }
        },
        "leafProvider": {
          "latestDigest": {
            "description": "Get leaf provider logs.",
            "params": [
              {
                "name": "at",
                "type": "BlockHash",
                "isOptional": true
              }
            ],
            "type": "AuxiliaryDigest",
            "isSubscription": false,
            "jsonrpc": "leafProvider_latestDigest",
            "method": "latestDigest",
            "section": "leafProvider"
          }
        },
        "basicChannel": {
          "commitment": {
            "description": "Get basic channel messages.",
            "params": [
              {
                "name": "commitmentHash",
                "type": "H256"
              }
            ],
            "type": "Option<Vec<BasicChannelMessage>>",
            "isSubscription": false,
            "jsonrpc": "basicChannel_commitment",
            "method": "commitment",
            "section": "basicChannel"
          }
        },
        "intentivizedChannel": {
          "commitment": {
            "description": "Get intentivized channel messages.",
            "params": [
              {
                "name": "commitmentHash",
                "type": "H256"
              }
            ],
            "type": "Option<Vec<IntentivizedChannelMessage>>",
            "isSubscription": false,
            "jsonrpc": "intentivizedChannel_commitment",
            "method": "commitment",
            "section": "intentivizedChannel"
          }
        }
      },
      "types": [
        {
          "minmax": [
            2,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "Share": "u128",
            "OracleValue": "FixedU128",
            "BalanceInfo": {
              "balance": "Balance"
            },
            "AssetInfo": {
              "assetId": "AssetId",
              "symbol": "AssetSymbolStr",
              "name": "AssetNameStr",
              "precision": "u8",
              "isMintable": "bool"
            },
            "AssetSymbolStr": "String",
            "AssetNameStr": "String",
            "AssetRecord": "Null",
            "VotingInfo": {
              "votingOption": "u32",
              "numberOfVotes": "Balance",
              "ceresWithdrawn": "bool"
            },
            "PollInfo": {
              "numberOfOptions": "u32",
              "pollStartTimestamp": "Moment",
              "pollEndTimestamp": "Moment"
            },
            "LockInfo": {
              "poolTokens": "Balance",
              "unlockingTimestamp": "Moment",
              "assetA": "AssetId",
              "assetB": "AssetId"
            },
            "StakingInfo": {
              "deposited": "Balance",
              "rewards": "Balance"
            },
            "TokenLockInfo": {
              "tokens": "Balance",
              "unlockingTimestamp": "Moment",
              "assetId": "AssetId"
            },
            "ContributorsVesting": {
              "firstReleasePercent": "Balance",
              "vestingPeriod": "Moment",
              "vestingPercent": "Balance"
            },
            "TeamVesting": {
              "teamVestingTotalTokens": "Balance",
              "teamVestingFirstReleasePercent": "Balance",
              "teamVestingPeriod": "Moment",
              "teamVestingPercent": "Balance"
            },
            "ContributionInfo": {
              "fundsContributed": "Balance",
              "tokensBought": "Balance",
              "tokensClaimed": "Balance",
              "claimingFinished": "bool",
              "numberOfClaims": "u32"
            },
            "ILOInfo": {
              "iloOrganizer": "AccountId",
              "tokensForIlo": "Balance",
              "tokensForLiquidity": "Balance",
              "iloPrice": "Balance",
              "softCap": "Balance",
              "hardCap": "Balance",
              "minContribution": "Balance",
              "maxContribution": "Balance",
              "refundType": "bool",
              "liquidityPercent": "Balance",
              "listingPrice": "Balance",
              "lockupDays": "u32",
              "startTimestamp": "Moment",
              "endTimestamp": "Moment",
              "contributorsVesting": "ContributorsVesting",
              "teamVesting": "TeamVesting",
              "soldTokens": "Balance",
              "fundsRaised": "Balance",
              "succeeded": "bool",
              "failed": "bool",
              "lpTokens": "Balance",
              "claimedLpTokens": "bool",
              "finishTimestamp": "Moment"
            },
            "PoolData": {
              "multiplier": "u32",
              "depositFee": "Balance",
              "isCore": "bool",
              "isFarm": "bool",
              "totalTokensInPool": "Balance",
              "rewards": "Balance",
              "rewardsToBeDistributed": "Balance",
              "isRemoved": "bool"
            },
            "TokenInfo": {
              "farmsTotalMultiplier": "u32",
              "stakingTotalMultiplier": "u32",
              "tokenPerBlock": "Balance",
              "farmsAllocation": "Balance",
              "stakingAllocation": "Balance",
              "teamAllocation": "Balance",
              "teamAccount": "AccountId"
            },
            "UserInfo": {
              "poolAsset": "AssetId",
              "rewardAsset": "AssetId",
              "isFarm": "bool",
              "pooledTokens": "Balance",
              "rewards": "Balance"
            },
            "MultiChainHeight": {
              "_enum": {
                "Thischain": "BlockNumber",
                "Sidechain": "u64"
              }
            },
            "BridgeTimepoint": {
              "height": "MultiChainHeight",
              "index": "u32"
            },
            "EthPeersSync": {
              "isBridgeReady": "bool",
              "isXorReady": "bool",
              "isValReady": "bool"
            },
            "BridgeStatus": {
              "_enum": [
                "Initialized",
                "Migrating"
              ]
            },
            "BridgeNetworkId": "u32",
            "AssetKind": {
              "_enum": [
                "Thischain",
                "Sidechain",
                "SidechainOwned"
              ]
            },
            "RequestStatus": {
              "_enum": [
                "Pending",
                "Frozen",
                "ApprovalsReady",
                "Failed",
                "Done"
              ]
            },
            "SignatureParams": {
              "r": "[u8; 32]",
              "s": "[u8; 32]",
              "v": "u8"
            },
            "IncomingTransactionRequestKind": {
              "_enum": [
                "Transfer",
                "AddAsset",
                "AddPeer",
                "RemovePeer",
                "PrepareForMigration",
                "Migrate",
                "AddPeerCompat",
                "RemovePeerCompat",
                "TransferXOR"
              ]
            },
            "IncomingMetaRequestKind": {
              "_enum": [
                "CancelOutgoingRequest",
                "MarkAsDone"
              ]
            },
            "IncomingRequestKind": {
              "_enum": {
                "Transaction": "IncomingTransactionRequestKind",
                "Meta": "IncomingMetaRequestKind"
              }
            },
            "ChangePeersContract": {
              "_enum": [
                "XOR",
                "VAL"
              ]
            },
            "CurrencyIdEncoded": {
              "_enum": {
                "AssetId": "H256",
                "TokenAddress": "H160"
              }
            },
            "FixedBytes": "Vec<u8>",
            "OutgoingTransfer": {
              "from": "AccountId",
              "to": "EthAddress",
              "assetId": "AssetId",
              "amount": "Balance",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingTransferEncoded": {
              "currencyId": "CurrencyIdEncoded",
              "amount": "U256",
              "to": "EthAddress",
              "from": "EthAddress",
              "txHash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingAddAsset": {
              "author": "AccountId",
              "assetId": "AssetId",
              "supply": "Balance",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingAddAssetEncoded": {
              "name": "String",
              "symbol": "String",
              "decimal": "u8",
              "supply": "U256",
              "sidechainAssetId": "FixedBytes",
              "hash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingAddToken": {
              "author": "AccountId",
              "tokenAddress": "EthAddress",
              "ticker": "String",
              "name": "String",
              "decimals": "u8",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingAddTokenEncoded": {
              "tokenAddress": "EthAddress",
              "ticker": "String",
              "name": "String",
              "decimals": "u8",
              "hash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingAddPeer": {
              "author": "AccountId",
              "peerAddress": "EthAddress",
              "peerAccountId": "AccountId",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingAddPeerCompat": {
              "author": "AccountId",
              "peerAddress": "EthAddress",
              "peerAccountId": "AccountId",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingAddPeerEncoded": {
              "peerAddress": "EthAddress",
              "txHash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingRemovePeer": {
              "author": "AccountId",
              "peerAccountId": "AccountId",
              "peerAddress": "EthAddress",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingRemovePeerCompat": {
              "author": "AccountId",
              "peerAccountId": "AccountId",
              "peerAddress": "EthAddress",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingRemovePeerEncoded": {
              "peerAddress": "EthAddress",
              "txHash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingPrepareForMigration": {
              "author": "AccountId",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingPrepareForMigrationEncoded": {
              "thisContractAddress": "EthAddress",
              "txHash": "H256",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingMigrate": {
              "author": "AccountId",
              "newContractAddress": "EthAddress",
              "erc20NativeTokens": "Vec<EthAddress>",
              "nonce": "Index",
              "networkId": "BridgeNetworkId",
              "timepoint": "BridgeTimepoint"
            },
            "OutgoingMigrateEncoded": {
              "thisContractAddress": "EthAddress",
              "txHash": "H256",
              "newContractAddress": "EthAddress",
              "erc20NativeTokens": "Vec<EthAddress>",
              "networkId": "H256",
              "raw": "Vec<u8>"
            },
            "OutgoingRequest": {
              "_enum": {
                "Transfer": "OutgoingTransfer",
                "AddAsset": "OutgoingAddAsset",
                "AddToken": "OutgoingAddToken",
                "AddPeer": "OutgoingAddPeer",
                "RemovePeer": "OutgoingRemovePeer",
                "PrepareForMigration": "OutgoingPrepareForMigration",
                "Migrate": "OutgoingMigrate"
              }
            },
            "OutgoingRequestEncoded": {
              "_enum": {
                "Transfer": "OutgoingTransferEncoded",
                "AddAsset": "OutgoingAddAssetEncoded",
                "AddToken": "OutgoingAddTokenEncoded",
                "AddPeer": "OutgoingAddPeerEncoded",
                "RemovePeer": "OutgoingRemovePeerEncoded",
                "PrepareForMigration": "OutgoingPrepareForMigrationEncoded",
                "Migrate": "OutgoingMigrateEncoded"
              }
            },
            "IncomingTransfer": {
              "from": "EthAddress",
              "to": "AccountId",
              "assetId": "AssetId",
              "assetKind": "AssetKind",
              "amount": "Balance",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingAddToken": {
              "tokenAddress": "EthAddress",
              "assetId": "AssetId",
              "precision": "BalancePrecision",
              "symbol": "AssetSymbol",
              "name": "AssetName",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingChangePeers": {
              "peerAccountId": "AccountId",
              "peerAddress": "EthAddress",
              "added": "bool",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingChangePeersCompat": {
              "peerAccountId": "AccountId",
              "peerAddress": "EthAddress",
              "added": "bool",
              "contract": "ChangePeersContract",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingCancelOutgoingRequest": {
              "outgoingRequest": "OutgoingRequest",
              "outgoingRequestHash": "H256",
              "initialRequestHash": "H256",
              "txInput": "Vec<u8>",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingMarkAsDoneRequest": {
              "outgoingRequestHash": "H256",
              "initialRequestHash": "H256",
              "author": "AccountId",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingPrepareForMigration": {
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingMigrate": {
              "newContractAddress": "EthAddress",
              "author": "AccountId",
              "txHash": "H256",
              "atHeight": "u64",
              "timepoint": "BridgeTimepoint",
              "networkId": "BridgeNetworkId"
            },
            "IncomingRequest": {
              "_enum": {
                "Transfer": "IncomingTransfer",
                "AddToken": "IncomingAddToken",
                "ChangePeers": "IncomingChangePeers",
                "CancelOutgoingRequest": "IncomingCancelOutgoingRequest",
                "MarkAsDone": "IncomingMarkAsDoneRequest",
                "PrepareForMigration": "IncomingPrepareForMigration",
                "Migrate": "IncomingMigrate"
              }
            },
            "LoadIncomingTransactionRequest": {
              "author": "AccountId",
              "hash": "H256",
              "timepoint": "BridgeTimepoint",
              "kind": "IncomingTransactionRequestKind",
              "networkId": "BridgeNetworkId"
            },
            "LoadIncomingMetaRequest": {
              "author": "AccountId",
              "hash": "H256",
              "timepoint": "BridgeTimepoint",
              "kind": "IncomingMetaRequestKind",
              "networkId": "BridgeNetworkId"
            },
            "LoadIncomingRequest": {
              "_enum": {
                "Transaction": "LoadIncomingTransactionRequest",
                "Meta": "(LoadIncomingMetaRequest, H256)"
              }
            },
            "OffchainRequest": {
              "_enum": {
                "Outgoing": "(OutgoingRequest, H256)",
                "LoadIncoming": "LoadIncomingRequest",
                "Incoming": "(IncomingRequest, H256)"
              }
            },
            "EthBridgeStorageVersion": {
              "_enum": [
                "V1",
                "V2RemovePendingTransfers"
              ]
            },
            "EthAddress": "H160",
            "PoolFarmer": {
              "account": "AccountId",
              "block": "BlockNumber",
              "weight": "Balance"
            },
            "PendingMultisigAccount": {
              "approvingAccounts": "Vec<AccountId>",
              "migrateAt": "Option<BlockNumber>"
            },
            "LPSwapOutcomeInfo": {
              "amount": "Balance",
              "fee": "Balance",
              "rewards": "Vec<LPRewardsInfo>",
              "amountWithoutImpact": "Balance"
            },
            "LPRewardsInfo": {
              "amount": "Balance",
              "currency": "AssetId",
              "reason": "RewardReason"
            },
            "LiquiditySourceIdOf": {
              "dexId": "DEXId",
              "liquiditySourceIndex": "LiquiditySourceType"
            },
            "AssetIdOf": "AssetId",
            "Amount": "i128",
            "AmountOf": "Amount",
            "CurrencyId": "AssetId",
            "CurrencyIdOf": "AssetId",
            "BasisPoints": "u16",
            "Fixed": "FixedU128",
            "FarmId": "u64",
            "DEXId": "u32",
            "DEXIdOf": "DEXId",
            "DEXInfo": {
              "baseAssetId": "AssetId",
              "defaultFee": "BasisPoints",
              "defaultProtocolFee": "BasisPoints"
            },
            "BalancePrecision": "u8",
            "AssetSymbol": "Vec<u8>",
            "AssetName": "Vec<u8>",
            "AssetId32": "[u8; 32]",
            "SwapWithDesiredInput": {
              "desiredAmountIn": "Balance",
              "minAmountOut": "Balance"
            },
            "SwapWithDesiredOutput": {
              "desiredAmountOut": "Balance",
              "maxAmountIn": "Balance"
            },
            "SwapAmount": {
              "_enum": {
                "WithDesiredInput": "SwapWithDesiredInput",
                "WithDesiredOutput": "SwapWithDesiredOutput"
              }
            },
            "QuoteWithDesiredInput": {
              "desiredAmountIn": "Balance"
            },
            "QuoteWithDesiredOutput": {
              "desiredAmountOut": "Balance"
            },
            "QuoteAmount": {
              "_enum": {
                "WithDesiredInput": "QuoteWithDesiredInput",
                "WithDesiredOutput": "QuoteWithDesiredOutput"
              }
            },
            "SwapVariant": {
              "_enum": [
                "WithDesiredInput",
                "WithDesiredOutput"
              ]
            },
            "TechAmount": "Amount",
            "TechBalance": "Balance",
            "SwapOutcome": {
              "amount": "Balance",
              "fee": "Balance"
            },
            "LiquiditySourceType": {
              "_enum": [
                "XYKPool",
                "BondingCurvePool",
                "MulticollateralBondingCurvePool",
                "MockPool",
                "MockPool2",
                "MockPool3",
                "MockPool4",
                "XSTPool"
              ]
            },
            "FilterMode": {
              "_enum": [
                "Disabled",
                "ForbidSelected",
                "AllowSelected"
              ]
            },
            "SwapOutcomeInfo": {
              "amount": "Balance",
              "fee": "Balance"
            },
            "TradingPair": {
              "baseAssetId": "AssetId",
              "targetAssetId": "AssetId"
            },
            "PermissionId": "u32",
            "HolderId": "AccountId",
            "OwnerId": "AccountId",
            "Mode": {
              "_enum": [
                "Permit",
                "Forbid"
              ]
            },
            "Scope": {
              "_enum": {
                "Limited": "H512",
                "Unlimited": "Null"
              }
            },
            "OracleKey": "AssetId",
            "ChargeFeeInfo": {
              "tip": "Compact<Balance>",
              "target_asset_id": "AssetId"
            },
            "SwapAction": "Null",
            "ValidationFunction": "Null",
            "Permission": "Null",
            "DistributionAccounts": "Null",
            "MultisigAccount": {
              "signatories": "Vec<AccountId>",
              "threshold": "u8"
            },
            "Farmer": "Null",
            "Farm": "Null",
            "SmoothPriceState": "Null",
            "MultiCurrencyBalanceOf": "MultiCurrencyBalance",
            "Duration": "Null",
            "PostDispatchInfo": {
              "actualWeight": "Option<Weight>",
              "paysFee": "Pays"
            },
            "DispatchErrorWithPostInfoTPostDispatchInfo": {
              "postInfo": "PostDispatchInfo",
              "error": "DispatchError"
            },
            "DispatchResultWithPostInfo": "Result<PostDispatchInfo, DispatchErrorWithPostInfoTPostDispatchInfo>",
            "Public": "[u8; 33]",
            "RewardReason": {
              "_enum": [
                "Unspecified",
                "BuyOnBondingCurve",
                "LiquidityProvisionFarming",
                "MarketMakerVolume"
              ]
            },
            "StorageVersion": "Null",
            "MarketMakerInfo": {
              "count": "u32",
              "volume": "Balance"
            },
            "CrowdloanReward": {
              "id": "Vec<u8>",
              "address": "Vec<u8>",
              "contribution": "Fixed",
              "xorReward": "Fixed",
              "valReward": "Fixed",
              "pswapReward": "Fixed",
              "xstusdReward": "Fixed",
              "percent": "Fixed"
            },
            "PredefinedAssetId": {
              "_enum": [
                "XOR",
                "DOT",
                "KSM",
                "USDT",
                "VAL",
                "PSWAP",
                "DAI",
                "ETH",
                "XSTUSD"
              ]
            },
            "RewardInfo": {
              "limit": "Balance",
              "totalAvailable": "Balance",
              "rewards": "BTreeMap<RewardReason, Balance>"
            },
            "TechTradingPair": {
              "baseAssetId": "TechAssetId",
              "targetAssetId": "TechAssetId"
            },
            "TechAssetId": {
              "_enum": {
                "Wrapped": "PredefinedAssetId",
                "Escaped": "AssetId"
              }
            },
            "TechPurpose": {
              "_enum": {
                "FeeCollector": "Null",
                "FeeCollectorForPair": "TechTradingPair",
                "LiquidityKeeper": "TechTradingPair",
                "Identifier": "Vec<u8>"
              }
            },
            "TechAccountId": {
              "_enum": {
                "Pure": "(DEXId, TechPurpose)",
                "Generic": "(Vec<u8>, Vec<u8>)",
                "Wrapped": "AccountId",
                "WrappedRepr": "AccountId"
              }
            },
            "PriceInfo": {
              "priceFailures": "u32",
              "spotPrices": "Vec<Balance>",
              "averagePrice": "Balance",
              "needsUpdate": "bool",
              "lastSpotPrice": "Balance"
            },
            "ContentSource": "Text",
            "Description": "Text",
            "CustomInfo": {
              "amount": "Balance"
            },
            "TP": "TradingPair",
            "CrowdloanLease": {
              "startBlock": "String",
              "totalDays": "String",
              "blocksPerDay": "String"
            },
            "AuxiliaryDigest": {
              "logs": "Vec<AuxiliaryDigestItem>"
            },
            "AuxiliaryDigestItem": {
              "_enum": {
                "Commitment": "(EthNetworkId, ChannelId, H256)"
              }
            },
            "EthNetworkId": "U256",
            "ChannelId": {
              "_enum": {
                "Basic": null,
                "Incentivized": null
              }
            },
            "BasicChannelMessage": {
              "networkId": "EthNetworkId",
              "target": "H160",
              "nonce": "u64",
              "payload": "Vec<u8>"
            },
            "IntentivizedChannelMessage": {
              "networkId": "EthNetworkId",
              "target": "H160",
              "nonce": "u64",
              "fee": "U256",
              "payload": "Vec<u8>"
            },
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "AssetId": "AssetId32",
            "Keys": "SessionKeys3",
            "RefCount": "u32",
            "Balance": "u128",
            "TAssetBalance": "Balance",
            "MultiCurrencyBalance": "Balance",
            "AccountInfo": "AccountInfoWithDualRefCount"
          }
        }
      ]
    },
    "spanner": {
      "types": [
        {
          "minmax": [
            0,
            104
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "PoolInfo": {
              "total_shares": "Balance",
              "total_rewards": "Balance",
              "total_withdrawn_rewards": "Balance"
            },
            "Share": "u128",
            "OracleValue": "FixedU128",
            "DpoInfo": "DpoInfoV1",
            "Target": "TargetV1",
            "DpoMemberInfo": "DpoMemberInfoV1",
            "TravelCabinBuyerInfo": "TravelCabinBuyerInfoV1",
            "TravelCabinIndex": "u32",
            "TravelCabinInventoryIndex": "u16",
            "DpoIndex": "u32",
            "TravelCabinInfo": {
              "name": "Text",
              "creator": "AccountId",
              "token_id": "CurrencyId",
              "index": "TravelCabinIndex",
              "deposit_amount": "Balance",
              "bonus_total": "Balance",
              "yield_total": "Balance",
              "maturity": "BlockNumber"
            },
            "TravelCabinBuyerInfoV1": {
              "buyer": "Buyer",
              "purchase_blk": "BlockNumber",
              "yield_withdrawn": "Balance",
              "fare_withdrawn": "bool",
              "blk_of_last_withdraw": "BlockNumber"
            },
            "MilestoneRewardInfo": {
              "token_id": "CurrencyId",
              "deposited": "Balance",
              "milestones": "Vec<(Balance, Balance)>"
            },
            "DpoState": {
              "_enum": [
                "CREATED",
                "ACTIVE",
                "RUNNING",
                "FAILED",
                "COMPLETED"
              ]
            },
            "TargetV1": {
              "_enum": {
                "Dpo": "(DpoIndex, u8)",
                "TravelCabin": "TravelCabinIndex"
              }
            },
            "Buyer": {
              "_enum": {
                "Dpo": "DpoIndex",
                "Passenger": "AccountId",
                "InvalidBuyer": null
              }
            },
            "DpoInfoV1": {
              "index": "DpoIndex",
              "name": "Text",
              "token_id": "CurrencyId",
              "manager": "AccountId",
              "target": "TargetV1",
              "target_maturity": "BlockNumber",
              "target_amount": "Balance",
              "target_yield_estimate": "Balance",
              "target_bonus_estimate": "Balance",
              "amount_per_seat": "Balance",
              "empty_seats": "u8",
              "fifo": "Vec<Buyer>",
              "vault_deposit": "Balance",
              "vault_withdraw": "Balance",
              "vault_yield": "Balance",
              "vault_bonus": "Balance",
              "total_yield_received": "Balance",
              "total_bonus_received": "Balance",
              "total_milestone_received": "Balance",
              "blk_of_last_yield": "Option<BlockNumber>",
              "blk_of_dpo_filled": "Option<BlockNumber>",
              "expiry_blk": "BlockNumber",
              "state": "DpoState",
              "referrer": "Option<AccountId>",
              "fare_withdrawn": "bool",
              "direct_referral_rate": "u32",
              "fee": "u32",
              "fee_slashed": "bool"
            },
            "DpoMemberInfoV1": {
              "buyer": "Buyer",
              "number_of_seats": "u8",
              "referrer": "Referrer"
            },
            "Referrer": {
              "_enum": {
                "None": null,
                "MemberOfDpo": "Buyer",
                "External": "(AccountId, Buyer)"
              }
            },
            "PaymentType": {
              "_enum": [
                "Deposit",
                "Bonus",
                "MilestoneReward",
                "Yield",
                "UnusedFund",
                "WithdrawOnCompletion",
                "WithdrawOnFailure"
              ]
            },
            "DpoInfoV2": {
              "index": "DpoIndex",
              "name": "Text",
              "token_id": "CurrencyId",
              "manager": "AccountId",
              "target": "TargetV2",
              "target_maturity": "BlockNumber",
              "target_amount": "Balance",
              "target_yield_estimate": "Balance",
              "target_bonus_estimate": "Balance",
              "issued_shares": "Balance",
              "share_rate": "(Balance, Balance)",
              "fifo": "Vec<Buyer>",
              "base_fee": "u32",
              "fee": "u32",
              "fee_slashed": "bool",
              "vault_deposit": "Balance",
              "vault_withdraw": "Balance",
              "vault_yield": "Balance",
              "vault_bonus": "Balance",
              "total_fund": "Balance",
              "total_yield_received": "Balance",
              "total_bonus_received": "Balance",
              "total_milestone_received": "Balance",
              "blk_of_last_yield": "Option<BlockNumber>",
              "blk_of_dpo_filled": "Option<BlockNumber>",
              "expiry_blk": "BlockNumber",
              "state": "DpoState",
              "referrer": "Option<AccountId>",
              "fare_withdrawn": "bool",
              "direct_referral_rate": "u32"
            },
            "TargetV2": {
              "_enum": {
                "Dpo": "(DpoIndex, Balance)",
                "TravelCabin": "TravelCabinIndex"
              }
            },
            "DpoMemberInfoV2": {
              "buyer": "Buyer",
              "share": "Balance",
              "referrer": "Referrer"
            },
            "TravelCabinBuyerInfoV2": {
              "buyer": "Buyer",
              "purchase_blk": "BlockNumber",
              "yield_withdrawn": "Balance",
              "fare_withdrawn": "bool"
            },
            "ExchangeRate": "FixedU128",
            "Ratio": "FixedU128",
            "Rate": "FixedU128",
            "TradingPair": "(CurrencyId, CurrencyId)",
            "TradingPairStatus": {
              "_enum": {
                "NotEnabled": null,
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": null
              }
            },
            "TradingPairProvisionParameters": {
              "min_contribution": "(Balance, Balance)",
              "target_provision": "(Balance, Balance)",
              "accumulated_provision": "(Balance, Balance)",
              "not_before": "BlockNumber"
            },
            "Amount": "i128",
            "AmountOf": "Amount",
            "TokenSymbol": {
              "_enum": [
                "BOLT",
                "WUSD",
                "BBOT",
                "NCAT",
                "PLKT"
              ]
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DexShare": "(TokenSymbol, TokenSymbol)"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "PoolId": {
              "_enum": {
                "DexYieldFarming": "CurrencyId"
              }
            }
          }
        },
        {
          "minmax": [
            105,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "PoolInfo": {
              "total_shares": "Balance",
              "total_rewards": "Balance",
              "total_withdrawn_rewards": "Balance"
            },
            "Share": "u128",
            "OracleValue": "FixedU128",
            "DpoInfo": "DpoInfoV2",
            "Target": "TargetV2",
            "DpoMemberInfo": "DpoMemberInfoV2",
            "TravelCabinBuyerInfo": "TravelCabinBuyerInfoV2",
            "TravelCabinIndex": "u32",
            "TravelCabinInventoryIndex": "u16",
            "DpoIndex": "u32",
            "TravelCabinInfo": {
              "name": "Text",
              "creator": "AccountId",
              "token_id": "CurrencyId",
              "index": "TravelCabinIndex",
              "deposit_amount": "Balance",
              "bonus_total": "Balance",
              "yield_total": "Balance",
              "maturity": "BlockNumber"
            },
            "TravelCabinBuyerInfoV1": {
              "buyer": "Buyer",
              "purchase_blk": "BlockNumber",
              "yield_withdrawn": "Balance",
              "fare_withdrawn": "bool",
              "blk_of_last_withdraw": "BlockNumber"
            },
            "MilestoneRewardInfo": {
              "token_id": "CurrencyId",
              "deposited": "Balance",
              "milestones": "Vec<(Balance, Balance)>"
            },
            "DpoState": {
              "_enum": [
                "CREATED",
                "ACTIVE",
                "RUNNING",
                "FAILED",
                "COMPLETED"
              ]
            },
            "TargetV1": {
              "_enum": {
                "Dpo": "(DpoIndex, u8)",
                "TravelCabin": "TravelCabinIndex"
              }
            },
            "Buyer": {
              "_enum": {
                "Dpo": "DpoIndex",
                "Passenger": "AccountId",
                "InvalidBuyer": null
              }
            },
            "DpoInfoV1": {
              "index": "DpoIndex",
              "name": "Text",
              "token_id": "CurrencyId",
              "manager": "AccountId",
              "target": "TargetV1",
              "target_maturity": "BlockNumber",
              "target_amount": "Balance",
              "target_yield_estimate": "Balance",
              "target_bonus_estimate": "Balance",
              "amount_per_seat": "Balance",
              "empty_seats": "u8",
              "fifo": "Vec<Buyer>",
              "vault_deposit": "Balance",
              "vault_withdraw": "Balance",
              "vault_yield": "Balance",
              "vault_bonus": "Balance",
              "total_yield_received": "Balance",
              "total_bonus_received": "Balance",
              "total_milestone_received": "Balance",
              "blk_of_last_yield": "Option<BlockNumber>",
              "blk_of_dpo_filled": "Option<BlockNumber>",
              "expiry_blk": "BlockNumber",
              "state": "DpoState",
              "referrer": "Option<AccountId>",
              "fare_withdrawn": "bool",
              "direct_referral_rate": "u32",
              "fee": "u32",
              "fee_slashed": "bool"
            },
            "DpoMemberInfoV1": {
              "buyer": "Buyer",
              "number_of_seats": "u8",
              "referrer": "Referrer"
            },
            "Referrer": {
              "_enum": {
                "None": null,
                "MemberOfDpo": "Buyer",
                "External": "(AccountId, Buyer)"
              }
            },
            "PaymentType": {
              "_enum": [
                "Deposit",
                "Bonus",
                "MilestoneReward",
                "Yield",
                "UnusedFund",
                "WithdrawOnCompletion",
                "WithdrawOnFailure"
              ]
            },
            "DpoInfoV2": {
              "index": "DpoIndex",
              "name": "Text",
              "token_id": "CurrencyId",
              "manager": "AccountId",
              "target": "TargetV2",
              "target_maturity": "BlockNumber",
              "target_amount": "Balance",
              "target_yield_estimate": "Balance",
              "target_bonus_estimate": "Balance",
              "issued_shares": "Balance",
              "share_rate": "(Balance, Balance)",
              "fifo": "Vec<Buyer>",
              "base_fee": "u32",
              "fee": "u32",
              "fee_slashed": "bool",
              "vault_deposit": "Balance",
              "vault_withdraw": "Balance",
              "vault_yield": "Balance",
              "vault_bonus": "Balance",
              "total_fund": "Balance",
              "total_yield_received": "Balance",
              "total_bonus_received": "Balance",
              "total_milestone_received": "Balance",
              "blk_of_last_yield": "Option<BlockNumber>",
              "blk_of_dpo_filled": "Option<BlockNumber>",
              "expiry_blk": "BlockNumber",
              "state": "DpoState",
              "referrer": "Option<AccountId>",
              "fare_withdrawn": "bool",
              "direct_referral_rate": "u32"
            },
            "TargetV2": {
              "_enum": {
                "Dpo": "(DpoIndex, Balance)",
                "TravelCabin": "TravelCabinIndex"
              }
            },
            "DpoMemberInfoV2": {
              "buyer": "Buyer",
              "share": "Balance",
              "referrer": "Referrer"
            },
            "TravelCabinBuyerInfoV2": {
              "buyer": "Buyer",
              "purchase_blk": "BlockNumber",
              "yield_withdrawn": "Balance",
              "fare_withdrawn": "bool"
            },
            "ExchangeRate": "FixedU128",
            "Ratio": "FixedU128",
            "Rate": "FixedU128",
            "TradingPair": "(CurrencyId, CurrencyId)",
            "TradingPairStatus": {
              "_enum": {
                "NotEnabled": null,
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": null
              }
            },
            "TradingPairProvisionParameters": {
              "min_contribution": "(Balance, Balance)",
              "target_provision": "(Balance, Balance)",
              "accumulated_provision": "(Balance, Balance)",
              "not_before": "BlockNumber"
            },
            "Amount": "i128",
            "AmountOf": "Amount",
            "TokenSymbol": {
              "_enum": [
                "BOLT",
                "WUSD",
                "BBOT",
                "NCAT",
                "PLKT"
              ]
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DexShare": "(TokenSymbol, TokenSymbol)"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "PoolId": {
              "_enum": {
                "DexYieldFarming": "CurrencyId"
              }
            }
          }
        }
      ]
    },
    "stafi": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "RefCount": "u8"
          }
        }
      ]
    },
    "standard": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "Transaction": {
              "nonce": "U256",
              "action": "String",
              "gas_price": "u64",
              "gas_limit": "u64",
              "value": "U256",
              "input": "Vec<u8>",
              "signature": "Signature"
            },
            "Signature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "XCurrencyId": {
              "chain_id": "ChainId",
              "currency_id": "Bytes"
            },
            "CurrencyIdOf": "CurrencyId",
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol"
              }
            },
            "TokenSymbol": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT",
                "XBTC",
                "LDOT",
                "RENBTC",
                "SDN",
                "PLM"
              ]
            },
            "AmountOf": "Amount",
            "Amount": "i128",
            "DataVersion": "u64",
            "RequestIdentifier": "u64",
            "SpecIndex": "Vec<u8>",
            "CDP": {
              "liquidation_fee": "Balance",
              "max_collateraization_rate": "U256",
              "stability_fee": "Balance"
            },
            "SocketIndex": "i32",
            "Currency": "Balances",
            "BridgeChainId": "u8",
            "ResourceId": "[u8; 32]",
            "DepositNonce": "u64",
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "enum"
            },
            "Erc721Token": {
              "id": "TokenId",
              "metadata": "Vec<u8>"
            },
            "TokenId": "U256"
          }
        }
      ]
    },
    "steam": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountIdOf": "AccountId",
            "Address": "MultiAddress",
            "AirDropCurrencyId": {
              "_enum": [
                "ICE",
                "EAVE"
              ]
            },
            "Amount": "i128",
            "AmountOf": "Amount",
            "AsOriginId": "AuthoritysOriginId",
            "AssetId": "u64",
            "AssetIdOf": "AssetId",
            "AuctionId": "u32",
            "AuctionIdOf": "AuctionId",
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "AuthoritysOriginId": {
              "_enum": [
                "Root",
                "EaveTreasury",
                "CdpTreasury",
                "ElpTreasury",
                "DSWF"
              ]
            },
            "BalanceInfo": {
              "amount": "Balance"
            },
            "BalanceRequest": {
              "amount": "Balance"
            },
            "BalanceWrapper": {
              "amount": "Balance"
            },
            "BondingLedger": {
              "total": "Compact<Balance>",
              "active": "Compact<Balance>",
              "unlocking": "Vec<UnlockChunk>"
            },
            "CID": "Vec<u8>",
            "CallOf": "Call",
            "CallRequest": {
              "from": "Option<H160>",
              "to": "Option<H160>",
              "gasLimit": "Option<u32>",
              "storageLimit": "Option<u32>",
              "value": "Option<U128>",
              "data": "Option<Bytes>"
            },
            "ChainId": {
              "_enum": {
                "RelayChain": "Null",
                "ParaChain": "ParaId"
              }
            },
            "ChangeBalance": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Balance"
              }
            },
            "ChangeOptionRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRate"
              }
            },
            "ChangeOptionRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "OptionRatio"
              }
            },
            "ChangeRate": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Rate"
              }
            },
            "ChangeRatio": {
              "_enum": {
                "NoChange": "Null",
                "NewValue": "Ratio"
              }
            },
            "ClassData": {
              "deposit": "Balance",
              "properties": "Properties"
            },
            "ClassId": "u32",
            "ClassIdOf": "ClassId",
            "ClassInfoOf": {
              "metadata": "CID",
              "totalIssuance": "TokenId",
              "owner": "AccountId",
              "data": "ClassData"
            },
            "CodeInfo": {
              "codeSize": "u32",
              "refCount": "u32"
            },
            "CollateralAuctionItem": {
              "refundRecipient": "AccountId",
              "currencyId": "CurrencyId",
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "target": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "DEXShare": "(TokenSymbol, TokenSymbol)",
                "ERC20": "EvmAddress"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "DataProviderId": {
              "_enum": [
                "Aggregated",
                "Eave",
                "Band"
              ]
            },
            "DebitAuctionItem": {
              "initialAmount": "Compact<Balance>",
              "amount": "Compact<Balance>",
              "fix": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "DestAddress": "Vec<u8>",
            "DispatchId": "u32",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ElpUnlockChunk": {
              "value": "Compact<Balance>",
              "era": "Compact<EraIndex>"
            },
            "EvmAccountInfo": {
              "nonce": "Index",
              "contractInfo": "Option<EvmContractInfo>",
              "developerDeposit": "Option<Balance>"
            },
            "EvmAddress": "H160",
            "EvmContractInfo": {
              "codeHash": "H256",
              "maintainer": "H160",
              "deployed": "bool"
            },
            "ExchangeRate": "FixedU128",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "Keys": "SessionKeys2",
            "Ledger": {
              "bonded": "Balance",
              "unbondingToFree": "Balance",
              "freePool": "Balance",
              "toUnbondNextEra": "(Balance, Balance)"
            },
            "LiquidationStrategy": {
              "_enum": [
                "Auction",
                "Exchange"
              ]
            },
            "LiquidityPool": {
              "currency_ids": "Vec<AssetIdOf>",
              "lp_token_id": "AssetId",
              "pool_config_id": "u32",
              "pool_reserves": "Vec<Balance>"
            },
            "LiquidityPoolConfig_": "PoolConfig",
            "LiquidityPool_": "LiquidityPool",
            "LookupSource": "MultiAddress",
            "NomineeId": "AccountId",
            "NFTBalance": "u128",
            "OptionRate": "Option<Rate>",
            "OptionRatio": "Option<Ratio>",
            "OracleKey": "CurrencyId",
            "OracleValue": "Price",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "PalletBalanceOf": "Balance",
            "PalletsOrigin": {
              "_enum": {
                "System": "SystemOrigin",
                "Timestamp": "Null",
                "RandomnessCollectiveFlip": "Null",
                "Balances": "Null",
                "Accounts": "Null",
                "Currencies": "Null",
                "Tokens": "Null",
                "Vesting": "Null",
                "EaveTreasury": "Null",
                "Utility": "Null",
                "Multisig": "Null",
                "Recovery": "Null",
                "Proxy": "Null",
                "Scheduler": "Null",
                "Indices": "Null",
                "GraduallyUpdate": "Null",
                "Authorship": "Null",
                "Babe": "Null",
                "Grandpa": "Null",
                "Staking": "Null",
                "Session": "Null",
                "Historical": "Null",
                "GeneralCouncil": "CollectiveOrigin",
                "GeneralCouncilMembership": "Null",
                "EYECouncil": "CollectiveOrigin",
                "EYECouncilMembership": "Null",
                "ElpCouncil": "CollectiveOrigin",
                "ElpCouncilMembership": "Null",
                "TechnicalCommittee": "CollectiveOrigin",
                "TechnicalCommitteeMembership": "Null",
                "Authority": "DelayedOrigin",
                "ElectionsPhragmen": "Null",
                "EaveOracle": "Null",
                "BandOracle": "Null",
                "OperatorMembershipEave": "Null",
                "OperatorMembershipBand": "Null",
                "Auction": "Null",
                "Rewards": "Null",
                "OrmlNFT": "Null",
                "Prices": "Null",
                "Dex": "Null",
                "AuctionManager": "Null",
                "Loans": "Null",
                "EYE": "Null",
                "CdpTreasury": "Null",
                "CdpEngine": "Null",
                "EmergencyShutdown": "Null",
                "Elp": "Null",
                "NomineesElection": "Null",
                "StakingPool": "Null",
                "PolkadotBridge": "Null",
                "Incentives": "Null",
                "AirDrop": "Null",
                "NFT": "Null",
                "RenVmBridge": "Null",
                "Contracts": "Null",
                "EVM": "Null",
                "Sudo": "Null",
                "TransactionPayment": "Null"
              }
            },
            "Params": {
              "targetMaxFreeUnbondedRatio": "Ratio",
              "targetMinFreeUnbondedRatio": "Ratio",
              "targetUnbondingToFreeRatio": "Ratio",
              "unbondingToFreeAdjustment": "Ratio",
              "baseFeeRate": "Rate"
            },
            "PolkadotAccountId": "AccountId",
            "PolkadotAccountIdOf": "PolkadotAccountId",
            "PoolId": {
              "_enum": {
                "Loans": "CurrencyId",
                "DexIncentive": "CurrencyId",
                "DexSaving": "CurrencyId",
                "Elp": "Null"
              }
            },
            "PoolInfo": {
              "totalShares": "Compact<Share>",
              "totalRewards": "Compact<Balance>",
              "totalWithdrawnRewards": "Compact<Balance>"
            },
            "Position": {
              "collateral": "Balance",
              "debit": "Balance"
            },
            "Price": "FixedU128",
            "Properties": {
              "_set": {
                "_bitLength": 8,
                "Transferable": 1,
                "Burnable": 2
              }
            },
            "PublicKey": "[u8; 20]",
            "Rate": "FixedU128",
            "Ratio": "FixedU128",
            "RedeemStrategy": {
              "_enum": {
                "Immediately": "Null",
                "Target": "EraIndex",
                "WaitForUnbonding": "Null"
              }
            },
            "RelaychainAccountId": "AccountId",
            "RiskManagementParams": {
              "maximumTotalDebitValue": "Balance",
              "stabilityFee": "Option<Rate>",
              "liquidationRatio": "Option<Rate>",
              "liquidationPenalty": "Option<Rate>",
              "requiredCollateralRatio": "Option<Rate>"
            },
            "RpcDataProviderId": "Text",
            "ScheduleTaskIndex": "u32",
            "Share": "u128",
            "StorageKeyBytes": "Vec<u8>",
            "StorageValue": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "SubAccountStatus": {
              "bonded": "Balance",
              "available": "Balance",
              "unbonding": "Vec<(EraIndex,Balance)>",
              "mockRewardRate": "Rate"
            },
            "SurplusAuctionItem": {
              "amount": "Compact<Balance>",
              "startTime": "BlockNumber"
            },
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "TokenBalanceOf": "Balance",
            "TokenData": {
              "deposit": "Balance"
            },
            "TokenId": "u64",
            "TokenIdOf": "TokenId",
            "TokenInfo": {
              "name": "Text",
              "symbol": "Text",
              "decimals": "u8",
              "owner": "AccountId"
            },
            "TokenInfoOf": {
              "metadata": "CID",
              "owner": "AccountId",
              "data": "TokenData"
            },
            "TokenSymbol": {
              "_enum": {
                "EAVE": 0,
                "EUSD": 1,
                "DOT": 2,
                "LDOT": 3,
                "XBTC": 4,
                "RENBTC": 5,
                "INTERBTC": 6,
                "PLM": 7,
                "PHA": 8,
                "HDT": 9,
                "ICE": 128,
                "IUSD": 129,
                "KSM": 130,
                "LKSM": 131,
                "SDN": 135,
                "KILT": 138
              }
            },
            "TradingPair": "(CurrencyId,  CurrencyId)",
            "TradingPairProvisionParameters": {
              "minContribution": "(Balance, Balance)",
              "targetProvision": "(Balance, Balance)",
              "accumulatedProvision": "(Balance, Balance)",
              "notBefore": "BlockNumber"
            },
            "TradingPairStatus": {
              "_enum": {
                "NotEnabled": "Null",
                "Provisioning": "TradingPairProvisionParameters",
                "Enabled": "Null"
              }
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "XCurrencyId": {
              "chainId": "ChainId",
              "currencyId": "Vec<u8>"
            }
          }
        }
      ]
    },
    "subdao": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {}
        }
      ]
    },
    "subgame": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "GameIndex": "u32",
            "GameMode": "u8",
            "CommodityLimit": "u128",
            "UserCommodityLimit": "u64",
            "ChipBalance": "u128",
            "ChipsDetail": {
              "balance": "u128",
              "reserve": "u128"
            },
            "GameInfo": {
              "owner": "AccountId",
              "block_number": "u32",
              "bet_block_number": "u32",
              "amount": "u128"
            },
            "BetInfo": {
              "user": "AccountId",
              "game_id": "u32",
              "amount": "u128",
              "game_mode": "u8"
            },
            "Template": {
              "template_id": "u32",
              "template_name": "Vec<u8>"
            },
            "GameInstance": {
              "game_instance_id": "u32",
              "owner": "AccountId",
              "bet_block_number": "u32",
              "chips_pool": "u128",
              "game_over": "bool"
            },
            "GameInstanceId": "u32",
            "AccountInfo": "AccountInfoWithDualRefCount",
            "SubGameAssetMetadata": {
              "deposit": "DepositBalance",
              "name": "Vec<u8>",
              "symbol": "Vec<u8>",
              "decimals": "u8"
            },
            "SubGameAssetDetails": {
              "owner": "AccountId",
              "issuer": "AccountId",
              "admin": "AccountId",
              "freezer": "AccountId",
              "supply": "u64",
              "deposit": "DepositBalance",
              "max_zombies": "u32",
              "min_balance": "u64",
              "zombies": "u32",
              "accounts": "u32",
              "isFrozen": "bool"
            },
            "SusGameAssetBalance": {
              "balance": "u64",
              "isFrozen": "bool",
              "isZombie": "bool"
            },
            "SGAssetBalance": "u64",
            "CommodityId": "Hash",
            "Commodity": {
              "id": "CommodityId",
              "info": "Vec<u8>"
            },
            "ProgramId": "u64",
            "Program": {
              "program_id": "ProgramId",
              "stake_amount": "u128",
              "valid_day_count": "u64"
            },
            "PalletId": "u64",
            "PalletInfo": {
              "pallet_id": "PalletId",
              "name": "Vec<u8>"
            },
            "NftId": "Hash",
            "LeaseInfo": {
              "pallet_id": "PalletId",
              "nft_id": "NftId"
            },
            "StakeInfo": {
              "pallet_id": "PalletId",
              "program_id": "ProgramId",
              "stake_amount": "Balance",
              "will_expire": "bool",
              "expires_at": "Moment",
              "nft_id": "NftId"
            },
            "Moment": "u64",
            "MomentOf": "Moment",
            "SwapId": "u32",
            "SwapSender": "AccountId",
            "SwapPoolOwner": "AccountId",
            "SwapAssetX": "u32",
            "SwapAssetY": "u32",
            "SwapAmountX": "u64",
            "SwapAmountY": "u64",
            "SwapAmountLP": "u64",
            "SwapPoolDetails": {
              "swap_id": "u32",
              "account": "AccountId",
              "asset_a": "u32",
              "asset_b": "u32",
              "asset_lp": "u32",
              "swap_k": "u128"
            },
            "Auction": {
              "id": "u128",
              "platform_id": "u128",
              "nft_id": "NftId",
              "seller": "AccountId",
              "buyer": "Option<AccountId>",
              "amount": "Balance",
              "percentage_of_fee": "u8",
              "platform_fee": "Balance"
            },
            "Platform": {
              "id": "u128",
              "admin": "AccountId",
              "percentage_of_fee": "u8",
              "fee_account": "AccountId"
            },
            "Plan": {
              "amount": "SGAssetBalance",
              "score": "SGAssetBalance"
            },
            "GRPlatform": {
              "id": "u128",
              "admin": "AccountId",
              "pool_account": "AccountId",
              "asset_id": "u32",
              "plan": "Vec<Plan>"
            },
            "AbilityOfLevel": {
              "level": "u8",
              "ability_value_1_min": "u32",
              "ability_value_1_max": "u32"
            },
            "CardType": {
              "admin": "AccountId",
              "id": "u128",
              "name": "Vec<u8>",
              "desc": "Vec<u8>",
              "fixed_ability_value_1": "u32",
              "fixed_ability_value_2": "u32",
              "special_attribute_1": "Vec<u8>",
              "level_max_limit": "u32",
              "ability_of_level": "Vec<AbilityOfLevel>",
              "is_can_draw": "bool"
            },
            "CardInfo": {
              "id": "u128",
              "name": "Vec<u8>",
              "desc": "Vec<u8>",
              "type_id": "u128"
            },
            "Card": {
              "id": "u128",
              "card_info_id": "u128",
              "level": "u8",
              "ability_value_1": "u32",
              "nft_id": "NftId"
            }
          }
        }
      ]
    },
    "subsocial": {
      "types": [
        {
          "minmax": [
            0,
            9
          ],
          "types": {
            "AccountInfo": "AccountInfoWithRefCountU8"
          }
        },
        {
          "minmax": [
            10,
            12
          ],
          "types": {
            "AccountInfo": "AccountInfoWithRefCount"
          }
        },
        {
          "minmax": [
            13,
            14
          ],
          "types": {
            "AccountInfo": "AccountInfoWithDualRefCount"
          }
        },
        {
          "minmax": [
            15,
            16
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount"
          }
        },
        {
          "minmax": [
            0,
            16
          ],
          "types": {
            "IpfsCid": "Text",
            "WhoAndWhen": {
              "account": "AccountId",
              "block": "BlockNumber",
              "time": "Moment"
            },
            "User": {
              "_enum": {
                "Account": "AccountId",
                "Space": "SpaceId"
              }
            },
            "Content": {
              "_enum": {
                "None": "Null",
                "Raw": "Text",
                "IPFS": "Text",
                "Hyper": "Text"
              }
            }
          }
        },
        {
          "minmax": [
            0,
            16
          ],
          "types": {
            "Space": {
              "id": "SpaceId",
              "created": "WhoAndWhen",
              "updated": "bool",
              "owner": "AccountId",
              "parent_id": "Option<SpaceId>",
              "content": "Content",
              "hidden": "bool",
              "posts_count": "u32",
              "permissions": "Option<SpacePermissions>"
            },
            "SpaceUpdate": {
              "parent_id": "Option<Option<SpaceId>>",
              "content": "Option<Content>",
              "hidden": "Option<bool>",
              "permissions": "Option<Option<SpacePermissions>>"
            },
            "SpaceId": "u64",
            "SpaceOwners": {
              "created": "WhoAndWhen",
              "space_id": "SpaceId",
              "owners": "Vec<AccountId>",
              "threshold": "u16",
              "changes_count": "u16"
            }
          }
        },
        {
          "minmax": [
            15,
            16
          ],
          "types": {
            "SpacesSettings": {
              "handles_enabled": "bool"
            }
          }
        },
        {
          "minmax": [
            0,
            14
          ],
          "types": {
            "ScoringAction": {
              "_enum": [
                "UpvotePost",
                "DownvotePost",
                "SharePost",
                "CreateComment",
                "UpvoteComment",
                "DownvoteComment",
                "ShareComment",
                "FollowSpace",
                "FollowAccount"
              ]
            }
          }
        },
        {
          "minmax": [
            0,
            9
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        },
        {
          "minmax": [
            0,
            16
          ],
          "types": {
            "PostId": "u64",
            "Post": {
              "id": "PostId",
              "created": "WhoAndWhen",
              "updated": "bool",
              "owner": "AccountId",
              "extension": "PostExtension",
              "space_id": "Option<SpaceId>",
              "content": "Content",
              "hidden": "bool",
              "upvotes_count": "u16",
              "downvotes_count": "u16"
            },
            "PostUpdate": {
              "space_id": "Option<SpaceId>",
              "content": "Option<Content>",
              "hidden": "Option<bool>"
            },
            "PostExtension": {
              "_enum": {
                "Post": "RegularPost",
                "Comment": "Comment",
                "SharingPost": "SharingPost"
              }
            },
            "Comment": {
              "parent_id": "Option<PostId>",
              "root_post_id": "PostId"
            },
            "RegularPost": {
              "total_replies_count": "u32"
            },
            "SharingPost": {
              "total_replies_count": "u32",
              "original_post_id": "PostId"
            }
          }
        },
        {
          "minmax": [
            0,
            16
          ],
          "types": {
            "ReactionId": "u64",
            "ReactionKind": {
              "_enum": [
                "Upvote",
                "Downvote"
              ]
            },
            "Reaction": {
              "id": "ReactionId",
              "created": "WhoAndWhen",
              "updated": "Option<WhoAndWhen>",
              "kind": "ReactionKind"
            }
          }
        },
        {
          "minmax": [
            0,
            16
          ],
          "types": {
            "SpacePermissionSet": "BTreeSet<SpacePermission>",
            "SpacePermission": {
              "_enum": [
                "ManageRoles",
                "RepresentSpaceInternally",
                "RepresentSpaceExternally",
                "UpdateSpace",
                "CreateSubspaces",
                "UpdateOwnSubspaces",
                "DeleteOwnSubspaces",
                "HideOwnSubspaces",
                "UpdateAnySubspace",
                "DeleteAnySubspace",
                "HideAnySubspace",
                "CreatePosts",
                "UpdateOwnPosts",
                "DeleteOwnPosts",
                "HideOwnPosts",
                "UpdateAnyPost",
                "DeleteAnyPost",
                "HideAnyPost",
                "CreateComments",
                "UpdateOwnComments",
                "DeleteOwnComments",
                "HideOwnComments",
                "HideAnyComment",
                "Upvote",
                "Downvote",
                "Share",
                "OverrideSubspacePermissions",
                "OverridePostPermissions",
                "SuggestEntityStatus",
                "UpdateEntityStatus",
                "UpdateSpaceSettings"
              ]
            },
            "SpacePermissions": {
              "none": "Option<SpacePermissionSet>",
              "everyone": "Option<SpacePermissionSet>",
              "follower": "Option<SpacePermissionSet>",
              "space_owner": "Option<SpacePermissionSet>"
            },
            "SpacePermissionsContext": {
              "space_id": "SpaceId",
              "is_space_owner": "bool",
              "is_space_follower": "bool",
              "space_perms": "Option<SpacePermissions>"
            }
          }
        },
        {
          "minmax": [
            0,
            16
          ],
          "types": {
            "RoleId": "u64",
            "Role": {
              "created": "WhoAndWhen",
              "updated": "Option<WhoAndWhen>",
              "id": "RoleId",
              "space_id": "SpaceId",
              "disabled": "bool",
              "expires_at": "Option<BlockNumber>",
              "content": "Content",
              "permissions": "SpacePermissionSet"
            },
            "RoleUpdate": {
              "disabled": "Option<bool>",
              "content": "Option<Content>",
              "permissions": "Option<SpacePermissionSet>"
            }
          }
        },
        {
          "minmax": [
            0,
            16
          ],
          "types": {
            "FaucetSettings": {
              "period": "Option<BlockNumber>",
              "period_limit": "Balance"
            },
            "FaucetSettingsUpdate": {
              "period": "Option<Option<BlockNumber>>",
              "period_limit": "Option<Balance>"
            },
            "Faucet": {
              "enabled": "bool",
              "period": "BlockNumber",
              "period_limit": "Balance",
              "drip_limit": "Balance",
              "next_period_at": "BlockNumber",
              "dripped_in_current_period": "Balance"
            },
            "FaucetUpdate": {
              "enabled": "Option<bool>",
              "period": "Option<BlockNumber>",
              "period_limit": "Option<Balance>",
              "drip_limit": "Option<Balance>"
            }
          }
        },
        {
          "minmax": [
            15,
            16
          ],
          "types": {
            "ReportId": "u64",
            "EntityId": {
              "_enum": {
                "Content": "Content",
                "Account": "AccountId",
                "Space": "SpaceId",
                "Post": "PostId"
              }
            },
            "EntityStatus": {
              "_enum": [
                "Allowed",
                "Blocked"
              ]
            },
            "Report": {
              "id": "ReportId",
              "created": "WhoAndWhen",
              "reported_entity": "EntityId",
              "reported_within": "SpaceId",
              "reason": "Content"
            },
            "SuggestedStatus": {
              "suggested": "WhoAndWhen",
              "status": "Option<EntityStatus>",
              "report_id": "Option<ReportId>"
            },
            "SpaceModerationSettings": {
              "autoblock_threshold": "Option<u16>"
            },
            "SpaceModerationSettingsUpdate": {
              "autoblock_threshold": "Option<Option<u16>>"
            }
          }
        },
        {
          "minmax": [
            17,
            null
          ],
          "types": {}
        }
      ]
    },
    "subspace": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Solution": {
              "public_key": "AccountId32",
              "reward_address": "AccountId32"
            },
            "SubPreDigest": {
              "slot": "u64",
              "solution": "Solution"
            }
          }
        }
      ]
    },
    "substrate-contracts-node": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Keys": "SessionKeys2"
          }
        }
      ]
    },
    "subzero": {
      "types": [
        {
          "minmax": [
            0,
            18
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AccountInfo": "AccountInfoWithDualRefCount",
            "AccountInfoWithDualRefCount": {
              "nonce": "Index",
              "consumers": "RefCount",
              "providers": "RefCount",
              "data": "AccountData"
            },
            "Timestamp": "Moment",
            "Entity": {
              "account": "AccountId",
              "index": "u128",
              "cid": "Vec<u8>",
              "created": "BlockNumber",
              "mutated": "BlockNumber"
            },
            "EntityProperty": {
              "value": "u64",
              "mutated": "BlockNumber"
            },
            "Space": {
              "id": "H256",
              "dna": "H256",
              "price": "Balance",
              "gen": "u64"
            },
            "SpaceId": "Hash",
            "HypaspaceId": "Hash",
            "HypaspaceMetadata": {
              "name": "Vec<u8>"
            },
            "Item": {
              "CommodityId": "CommodityId",
              "CommodityInfo": "CommodityInfo"
            },
            "ItemId": "Hash",
            "ItemInfo": {
              "dob": "u64",
              "dna": "Hash"
            },
            "Body": {
              "id": "Hash",
              "index": "u128",
              "creator": "AccountId",
              "name": "Vec<u8>",
              "cid": "Vec<u8>",
              "body": "u8",
              "created": "BlockNumber",
              "mutated": "BlockNumber"
            },
            "BConfig": {
              "fee_model": "u8",
              "fee": "Balance",
              "gov_asset": "u8",
              "pay_asset": "u8",
              "member_limit": "u64",
              "access": "u8"
            },
            "Campaign": {
              "id": "Hash",
              "org": "Hash",
              "name": "Vec<u8>",
              "owner": "AccountId",
              "admin": "AccountId",
              "deposit": "Balance",
              "expiry": "BlockNumber",
              "cap": "Balance",
              "protocol": "u8",
              "governance": "u8",
              "cid": "Vec<u8>",
              "token_symbol": "Vec<u8>",
              "token_name": "Vec<u8>",
              "created": "Timestamp"
            },
            "Proposal": {
              "proposal_id": "Hash",
              "context_id": "Hash",
              "proposal_type": "u8",
              "voting_type": "u8",
              "status": "u8",
              "start": "BlockNumber",
              "expiry": "BlockNumber"
            },
            "ProposalMetadata": {
              "title": "Vec<u8>",
              "cid": "Vec<u8>",
              "amount": "Balance"
            },
            "EventMessage": "Vec<u8>",
            "Nonce": "u64",
            "TitleText": "Vec<u8>",
            "CID": "Vec<u8>",
            "ProposalType": "u8",
            "ProposalState": "u8",
            "VotingType": "u8",
            "RealmIndex": "u64",
            "ClassIndex": "u64",
            "ItemIndex": "u64",
            "TotalIndex": "u128",
            "BurnedIndex": "u128",
            "TangramRealm": {
              "id": "Hash",
              "org": "Hash",
              "index": "u128"
            },
            "TangramRealmMetadata": {
              "id": "Hash",
              "name": "Vec<u8>",
              "cid": "Vec<u8>",
              "created": "BlockNumber",
              "mutated": "BlockNumber"
            },
            "TangramClass": {
              "id": "Hash",
              "realm": "Hash",
              "org": "Hash",
              "index": "u128",
              "cid": "Vec<u8>"
            },
            "TangramClassMetadata": {
              "id": "Hash",
              "name": "Vec<u8>",
              "cid": "Vec<u8>",
              "created": "BlockNumber",
              "mutated": "BlockNumber"
            },
            "Tangram": {
              "dob": "Moment",
              "dna": "Hash"
            },
            "TangramMetadata": {
              "name": "Vec<u8>",
              "owner": "AccountId",
              "cid": "Vec<u8>"
            },
            "TangramId": "Hash",
            "TangramItemOf": "Tangram"
          }
        },
        {
          "minmax": [
            19,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AccountInfo": "AccountInfoWithDualRefCount",
            "AccountInfoWithDualRefCount": {
              "nonce": "Index",
              "consumers": "RefCount",
              "providers": "RefCount",
              "data": "AccountData"
            },
            "Timestamp": "Moment",
            "Entity": {
              "account": "AccountId",
              "index": "u128",
              "cid": "Vec<u8>",
              "created": "BlockNumber",
              "mutated": "BlockNumber"
            },
            "EntityProperty": {
              "value": "u64",
              "mutated": "BlockNumber"
            },
            "Space": {
              "id": "H256",
              "dna": "H256",
              "price": "Balance",
              "gen": "u64"
            },
            "SpaceId": "Hash",
            "HypaspaceId": "Hash",
            "HypaspaceMetadata": {
              "name": "Vec<u8>"
            },
            "Item": {
              "CommodityId": "CommodityId",
              "CommodityInfo": "CommodityInfo"
            },
            "ItemId": "Hash",
            "ItemInfo": {
              "dob": "u64",
              "dna": "Hash"
            },
            "Body": {
              "id": "Hash",
              "index": "u128",
              "creator": "AccountId",
              "name": "Vec<u8>",
              "cid": "Vec<u8>",
              "body": "u8",
              "created": "BlockNumber",
              "mutated": "BlockNumber"
            },
            "BConfig": {
              "fee_model": "u8",
              "fee": "Balance",
              "gov_asset": "u8",
              "pay_asset": "u8",
              "member_limit": "u64",
              "access": "u8"
            },
            "Campaign": {
              "id": "Hash",
              "org": "Hash",
              "name": "Vec<u8>",
              "owner": "AccountId",
              "admin": "AccountId",
              "deposit": "Balance",
              "expiry": "BlockNumber",
              "cap": "Balance",
              "protocol": "u8",
              "governance": "u8",
              "cid": "Vec<u8>",
              "token_symbol": "Vec<u8>",
              "token_name": "Vec<u8>",
              "created": "Timestamp"
            },
            "Proposal": {
              "proposal_id": "Hash",
              "context_id": "Hash",
              "proposal_type": "u8",
              "voting_type": "u8",
              "status": "u8",
              "start": "BlockNumber",
              "expiry": "BlockNumber"
            },
            "ProposalMetadata": {
              "title": "Vec<u8>",
              "cid": "Vec<u8>",
              "amount": "Balance"
            },
            "EventMessage": "Vec<u8>",
            "Nonce": "u64",
            "TitleText": "Vec<u8>",
            "CID": "Vec<u8>",
            "ProposalType": "u8",
            "ProposalState": "u8",
            "VotingType": "u8",
            "RealmIndex": "u64",
            "ClassIndex": "u64",
            "ItemIndex": "u64",
            "TotalIndex": "u128",
            "BurnedIndex": "u128",
            "TangramRealm": {
              "id": "Hash",
              "org": "Hash",
              "index": "u128"
            },
            "TangramRealmMetadata": {
              "id": "Hash",
              "name": "Vec<u8>",
              "cid": "Vec<u8>",
              "created": "BlockNumber",
              "mutated": "BlockNumber"
            },
            "TangramClass": {
              "id": "Hash",
              "realm": "Hash",
              "org": "Hash",
              "index": "u128",
              "cid": "Vec<u8>"
            },
            "TangramClassMetadata": {
              "id": "Hash",
              "name": "Vec<u8>",
              "cid": "Vec<u8>",
              "created": "BlockNumber",
              "mutated": "BlockNumber"
            },
            "Tangram": {
              "dob": "Moment",
              "dna": "Hash"
            },
            "TangramMetadata": {
              "name": "Vec<u8>",
              "owner": "AccountId",
              "cid": "Vec<u8>"
            },
            "TangramId": "Hash",
            "TangramItemOf": "Tangram"
          }
        }
      ]
    },
    "swapdex": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "EvmAddress": "H160",
            "EthereumTxHash": "H256",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "Transaction": {
              "nonce": "U256",
              "action": "String",
              "gas_price": "u64",
              "gas_limit": "u64",
              "value": "U256",
              "input": "Vec<u8>",
              "signature": "Signature"
            },
            "Signature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "ClassId": "u64",
            "TokenId": "u64",
            "ClassData": "Vec<u8>",
            "TokenData": "Vec<u8>",
            "ReportReason": {
              "_enum": [
                "None",
                "Illigal",
                "Plagiarism",
                "Duplicate",
                "Reported"
              ]
            },
            "ClassInfoOf": {
              "metadata": "Vec<u8>",
              "total_issuance": "TokenId",
              "owner": "AccountId",
              "class_data": "ClassData"
            },
            "ExtendedInfo": {
              "display_flag": "bool",
              "report": "ReportReason",
              "frozen": "bool"
            },
            "TokenInfoOf": {
              "metadata": "Vec<u8>",
              "owner": "AccountId",
              "class_data": "ClassData"
            },
            "bridge::ChainId": "u8",
            "ChainId": "u8",
            "ResourceId": "[u8; 32]",
            "DepositNonce": "u64",
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "enum"
            }
          }
        }
      ]
    },
    "t0rn": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "GatewayVendor": {
              "_enum": [
                "Substrate",
                "Ethereum"
              ]
            },
            "GatewayType": {
              "_enum": {
                "ProgrammableInternal": "u32",
                "ProgrammableExternal": "u32",
                "TxOnly": "u32"
              }
            },
            "GatewayGenesisConfig": {
              "modules_encoded": "Option<Bytes>",
              "extrinsics_version": "u8",
              "genesis_hash": "Bytes"
            },
            "GatewaySysProps": {
              "ss58_format": "u16",
              "token_symbol": "Bytes",
              "token_decimals": "u8"
            },
            "AllowedSideEffect": "[u8; 4]",
            "BlockNumber": "u64",
            "Compose": {
              "name": "Vec<u8>",
              "code_txt": "Vec<u8>",
              "exec_type": "Vec<u8>",
              "dest": "AccountId",
              "value": "Balance",
              "bytes": "Vec<u8>",
              "input_data": "Vec<u8>"
            },
            "CircuitOutboundMessage": {
              "name": "Bytes",
              "module_name": "Bytes",
              "method_name": "Bytes",
              "sender": "Option<Bytes>",
              "target": "Option<Bytes>",
              "arguments": "Vec<Bytes>",
              "expected_output": "Vec<GatewayExpectedOutput>",
              "extra_payload": "Option<ExtraMessagePayload>"
            },
            "GatewayExpectedOutput": {
              "_enum": {
                "Storage": null,
                "Events": null,
                "Extrinsic": null,
                "Output": null
              }
            },
            "ProofTriePointer": {
              "_enum": {
                "State": 0,
                "Transaction": 1,
                "Receipts": 2
              }
            },
            "GatewayPointer": {
              "id": "ChainId",
              "vendor": "GatewayVendor",
              "gateway_type": "GatewayType"
            },
            "ExtraMessagePayload": {
              "signer": "Bytes",
              "module_name": "Bytes",
              "method_name": "Bytes",
              "call_bytes": "Bytes",
              "signature": "Bytes",
              "extra": "Bytes",
              "tx_signed": "Bytes",
              "custom_payload": "Option<Bytes>"
            },
            "ContractActionDesc": {
              "action_id": "Hash",
              "target_id": "Option<TargetId>",
              "to": "Option<AccountId>"
            },
            "TargetId": "[u8; 4]",
            "SideEffect": {
              "target": "TargetId",
              "prize": "BalanceOf",
              "ordered_at": "BlockNumber",
              "encoded_action": "Bytes",
              "encoded_args": "Vec<Bytes>",
              "signature": "Bytes",
              "enforce_executioner": "Option<AccountId>"
            },
            "SideEffectId": "Hash",
            "ConfirmedSideEffect": {
              "err": "Option<Bytes>",
              "output": "Option<Bytes>",
              "encoded_effect": "Bytes",
              "inclusion_proof": "Option<Bytes>",
              "executioner": "AccountId",
              "received_at": "BlockNumber",
              "cost": "Option<BalanceOf>"
            },
            "FullSideEffect": {
              "input": "SideEffect",
              "confirmed": "Option<ConfirmedSideEffect>"
            },
            "XtxId": "Hash",
            "XdnsRecordId": "Hash",
            "XdnsRecord": {
              "url": "Vec<u8>",
              "gateway_abi": "GatewayABIConfig",
              "gateway_genesis": "GatewayGenesisConfig",
              "gateway_vendor": "GatewayVendor",
              "gateway_type": "GatewayType",
              "gateway_id": "ChainId",
              "gateway_sys_props": "GatewaySysProps",
              "registrant": "Option<AccountId>",
              "last_finalized": "Option<u64>"
            },
            "FetchXdnsRecordsResponse": {
              "xdns_records": "Vec<XdnsRecord<AccountId>>"
            },
            "ChainId": "[u8; 4]",
            "RegistryContractId": "Hash",
            "RegistryContract": {
              "code_txt": "Vec<u8>",
              "bytes": "Vec<u8>",
              "author": "AccountId",
              "author_fees_per_single_use": "Option<BalanceOf>",
              "abi": "Option<Vec<u8>>",
              "action_descriptions": "Vec<ContractActionDesc<Hash, ChainId, AccountId>>",
              "info": "Option<RawAliveContractInfo<Hash, BalanceOf, BlockNumber>>",
              "meta": "ContractMetadata"
            },
            "RawAliveContractInfo": {
              "trie_id": "TrieId",
              "storage_size": "u32",
              "pair_count": "u32",
              "code_hash": "CodeHash",
              "rent_allowance": "Balance",
              "rent_paid": "Balance",
              "deduct_block": "BlockNumber",
              "last_write": "Option<BlockNumber>",
              "_reserved": "Option<()>"
            },
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "DispatchMessageId": {
              "channelId": "ChannelId",
              "nonce": "u64"
            },
            "ChannelId": {
              "_enum": [
                "Basic",
                "Incentivized"
              ]
            },
            "MessageNonce": "u64",
            "Message": {
              "data": "Vec<u8>",
              "proof": "Proof"
            },
            "Proof": {
              "blockHash": "H256",
              "txIndex": "u32",
              "data": "(Vec<Vec<u8>>, Vec<Vec<u8>>)"
            },
            "EthereumHeaderId": {
              "number": "u64",
              "hash": "H256"
            },
            "EthereumHeader": {
              "parentHash": "H256",
              "timestamp": "u64",
              "number": "u64",
              "author": "H160",
              "transactionsRoot": "H256",
              "ommersHash": "H256",
              "extraData": "Vec<u8>",
              "stateRoot": "H256",
              "receiptsRoot": "H256",
              "logBloom": "Bloom",
              "gasUsed": "U256",
              "gasLimit": "U256",
              "difficulty": "U256",
              "seal": "Vec<Vec<u8>>",
              "baseFee": "Option<U256>"
            },
            "StoredHeader": {
              "submitter": "Option<AccountId>",
              "header": "EthereumHeader",
              "totalDifficulty": "U256",
              "finalized": "bool"
            },
            "EthashProofData": {
              "dagNodes": "[H512; 2]",
              "proof": "Vec<H128>"
            },
            "Bloom": "[u8; 256]",
            "PruningRange": {
              "oldestUnprunedBlock": "u64",
              "oldestBlockToKeep": "u64"
            },
            "EthereumDifficultyConfig": {
              "byzantiumForkBlock": "u64",
              "constantinopleForkBlock": "u64",
              "muirGlacierForkBlock": "u64",
              "londonForkBlock": "u64"
            },
            "AssetId": {
              "_enum": {
                "ETH": null,
                "Token": "H160"
              }
            },
            "TokenId": "u128",
            "TokenData": {
              "tokenContract": "H160",
              "tokenId": "U256"
            },
            "TokenInfoOf": {
              "owner": "AccountId",
              "metadata": "Vec<u8>",
              "data": "TokenData"
            },
            "GatewayABIConfig": {
              "block_number_type_size": "u16",
              "hash_size": "u16",
              "hasher": "HasherAlgo",
              "crypto": "CryptoAlgo",
              "address_length": "u16",
              "value_type_size": "u16",
              "decimals": "u16",
              "structs": "Vec<StructDecl>"
            },
            "HasherAlgo": {
              "_enum": [
                "Blake2",
                "Keccak256"
              ]
            },
            "CryptoAlgo": {
              "_enum": [
                "Ed25519",
                "Sr25519",
                "Ecdsa"
              ]
            },
            "StructDecl": {
              "name": "Type",
              "fields": "Vec<Parameter>",
              "offsets": "Vec<u16>"
            },
            "Parachain": {
              "relay_chain_id": "ChainId",
              "id": "u32"
            }
          }
        }
      ]
    },
    "ternoa": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountDataOf": "AccountData",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "ShardIdentifier": "Hash",
            "Url": "Text",
            "URI": "Text",
            "ClusterId": "u32",
            "EnclaveId": "u32",
            "MarketplaceId": "u32",
            "BalanceCaps": "Balance",
            "NFTId": "u32",
            "TernoaString": "Vec<u8>",
            "NFTSeriesId": "Text",
            "NFTData": {
              "owner": "AccountId",
              "ipfs_reference": "Text",
              "series_id": "NFTSeriesId",
              "locked": "bool"
            },
            "NFTSeriesDetails": {
              "owner": "AccountId",
              "draft": "bool"
            },
            "NFTCurrencyCombined": {
              "caps": "Balance",
              "tiime": "Balance"
            },
            "NFTCurrency": {
              "_enum": {
                "Caps": "Balance",
                "Tiime": "Balance",
                "Combined": "NFTCurrencyCombined"
              }
            },
            "NFTCurrencyId": {
              "_enum": [
                "Caps",
                "Tiime"
              ]
            },
            "SaleInformation": {
              "account_id": "AccountId",
              "price": "NFTCurrency",
              "marketplace_id": "MarketplaceId"
            },
            "MarketplaceType": {
              "_enum": [
                "Public",
                "Private"
              ]
            },
            "MarketplaceInformation": {
              "kind": "MarketplaceType",
              "commission_fee": "u8",
              "owner": "AccountId",
              "allow_list": "Vec<AccountId>",
              "disallow_list": "Vec<AccountId>",
              "name": "Text",
              "uri": "Option<URI>",
              "logo_uri": "Option<URI>"
            },
            "Cluster": {
              "enclaves": "Vec<EnclaveId>"
            },
            "Enclave": {
              "api_url": "Url"
            },
            "CapsuleData": {
              "owner": "AccountId",
              "ipfs_reference": "Text"
            },
            "CapsuleLedger": "Vec<(NFTId, Balance)>",
            "Status": {
              "_enum": [
                "Free",
                "Reserved"
              ]
            },
            "Request": {
              "shard": "ShardIdentifier",
              "cyphertext": "Vec<u8>"
            }
          }
        }
      ]
    },
    "testnet-interlay": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "BalanceWrapper": {
              "amount": "String"
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "ForeignAsset": "ForeignAssetId"
              }
            },
            "InterbtcPrimitivesCurrencyId": {
              "_enum": {
                "Token": "InterbtcPrimitivesTokenSymbol",
                "ForeignAsset": "InterbtcForeignAssetId"
              }
            },
            "InterbtcForeignAssetId": "u32",
            "ForeignAssetId": "u32",
            "FundAccountJsonRpcRequest": {
              "account_id": "AccountId",
              "currency_id": "InterbtcPrimitivesCurrencyId"
            },
            "H256Le": "H256",
            "SignedFixedPoint": "FixedU128",
            "TokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "InterbtcPrimitivesTokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "UnsignedFixedPoint": "FixedU128",
            "VaultCurrencyPair": {
              "collateral": "CurrencyId",
              "wrapped": "CurrencyId"
            },
            "VaultId": {
              "account_id": "AccountId",
              "currencies": "VaultCurrencyPair"
            }
          }
        }
      ],
      "rpc": {
        "btcRelay": {
          "verifyBlockHeaderInclusion": {
            "description": "Verify that the block with the given hash is included",
            "params": [
              {
                "name": "block_hash",
                "type": "H256Le"
              }
            ],
            "type": "void"
          }
        },
        "escrow": {
          "balanceAt": {
            "description": "Get a given user's escrowed balance",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          },
          "totalSupply": {
            "description": "Get the total voting supply in the system",
            "params": [
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "issue": {
          "getIssueRequests": {
            "description": "Get all issue request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultIssueRequests": {
            "description": "Get all issue request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "oracle": {
          "collateralToWrapped": {
            "description": "Collateral to Wrapped exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "wrappedToCollateral": {
            "description": "Wrapped to Collateral exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "redeem": {
          "getRedeemRequests": {
            "description": "Get all redeem request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultRedeemRequests": {
            "description": "Get all redeem request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "refund": {
          "getRefundRequests": {
            "description": "Get all refund request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getRefundRequestsByIssueId": {
            "description": "Get all refund request IDs for a particular issue ID",
            "params": [
              {
                "name": "issue_id",
                "type": "H256"
              }
            ],
            "type": "H256"
          },
          "getVaultRefundRequests": {
            "description": "Get all refund request IDs for a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "replace": {
          "getNewVaultReplaceRequests": {
            "description": "Get all replace request IDs to a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getOldVaultReplaceRequests": {
            "description": "Get all replace request IDs from a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "reward": {
          "computeEscrowReward": {
            "description": "Get a given user's rewards due",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "computeVaultReward": {
            "description": "Get a given vault's rewards due",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "vaultRegistry": {
          "getCollateralizationFromVault": {
            "description": "Returns the collateralization of a specific vault",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getCollateralizationFromVaultAndCollateral": {
            "description": "Returns the collateralization of a specific vault and collateral",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "collateral",
                "type": "BalanceWrapper"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getIssueableTokensFromVault": {
            "description": "Get the amount of tokens a vault can issue",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getPremiumRedeemVaults": {
            "description": "Get all vaults below the premium redeem threshold.",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getRequiredCollateralForVault": {
            "description": "Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getRequiredCollateralForWrapped": {
            "description": "Get the amount of collateral required to issue an amount of InterBTC",
            "params": [
              {
                "name": "amount_btc",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultCollateral": {
            "description": "Get the vault's collateral (excluding nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultTotalCollateral": {
            "description": "Get the vault's collateral (including nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultsByAccountId": {
            "description": "Get all vaults that are registered using the given account _id",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<VaultId>"
          },
          "getVaultsWithIssuableTokens": {
            "description": "Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getVaultsWithRedeemableTokens": {
            "description": "Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          }
        }
      },
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      },
      "instances": {
        "balances": [
          "ksm",
          "kbtc",
          "kint",
          "dot",
          "ibtc",
          "intr"
        ]
      }
    },
    "testnet-kintsugi": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "BalanceWrapper": {
              "amount": "String"
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol",
                "ForeignAsset": "ForeignAssetId"
              }
            },
            "InterbtcPrimitivesCurrencyId": {
              "_enum": {
                "Token": "InterbtcPrimitivesTokenSymbol",
                "ForeignAsset": "InterbtcForeignAssetId"
              }
            },
            "InterbtcForeignAssetId": "u32",
            "ForeignAssetId": "u32",
            "FundAccountJsonRpcRequest": {
              "account_id": "AccountId",
              "currency_id": "InterbtcPrimitivesCurrencyId"
            },
            "H256Le": "H256",
            "SignedFixedPoint": "FixedU128",
            "TokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "InterbtcPrimitivesTokenSymbol": {
              "_enum": {
                "DOT": 0,
                "IBTC": 1,
                "INTR": 2,
                "KSM": 10,
                "KBTC": 11,
                "KINT": 12
              }
            },
            "UnsignedFixedPoint": "FixedU128",
            "VaultCurrencyPair": {
              "collateral": "CurrencyId",
              "wrapped": "CurrencyId"
            },
            "VaultId": {
              "account_id": "AccountId",
              "currencies": "VaultCurrencyPair"
            }
          }
        }
      ],
      "rpc": {
        "btcRelay": {
          "verifyBlockHeaderInclusion": {
            "description": "Verify that the block with the given hash is included",
            "params": [
              {
                "name": "block_hash",
                "type": "H256Le"
              }
            ],
            "type": "void"
          }
        },
        "escrow": {
          "balanceAt": {
            "description": "Get a given user's escrowed balance",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          },
          "totalSupply": {
            "description": "Get the total voting supply in the system",
            "params": [
              {
                "name": "height",
                "type": "Option<BlockNumber>"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "issue": {
          "getIssueRequests": {
            "description": "Get all issue request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultIssueRequests": {
            "description": "Get all issue request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "oracle": {
          "collateralToWrapped": {
            "description": "Collateral to Wrapped exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "wrappedToCollateral": {
            "description": "Wrapped to Collateral exchange rate",
            "params": [
              {
                "name": "amount",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "redeem": {
          "getRedeemRequests": {
            "description": "Get all redeem request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getVaultRedeemRequests": {
            "description": "Get all redeem request IDs for a particular vault",
            "params": [
              {
                "name": "vault_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "refund": {
          "getRefundRequests": {
            "description": "Get all refund request IDs for a particular account",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getRefundRequestsByIssueId": {
            "description": "Get all refund request IDs for a particular issue ID",
            "params": [
              {
                "name": "issue_id",
                "type": "H256"
              }
            ],
            "type": "H256"
          },
          "getVaultRefundRequests": {
            "description": "Get all refund request IDs for a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "replace": {
          "getNewVaultReplaceRequests": {
            "description": "Get all replace request IDs to a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          },
          "getOldVaultReplaceRequests": {
            "description": "Get all replace request IDs from a particular vault",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<H256>"
          }
        },
        "reward": {
          "computeEscrowReward": {
            "description": "Get a given user's rewards due",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "computeVaultReward": {
            "description": "Get a given vault's rewards due",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          }
        },
        "vaultRegistry": {
          "getCollateralizationFromVault": {
            "description": "Returns the collateralization of a specific vault",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getCollateralizationFromVaultAndCollateral": {
            "description": "Returns the collateralization of a specific vault and collateral",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              },
              {
                "name": "collateral",
                "type": "BalanceWrapper"
              },
              {
                "name": "only_issued",
                "type": "bool"
              }
            ],
            "type": "UnsignedFixedPoint"
          },
          "getIssueableTokensFromVault": {
            "description": "Get the amount of tokens a vault can issue",
            "params": [
              {
                "name": "vault",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getPremiumRedeemVaults": {
            "description": "Get all vaults below the premium redeem threshold.",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getRequiredCollateralForVault": {
            "description": "Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getRequiredCollateralForWrapped": {
            "description": "Get the amount of collateral required to issue an amount of InterBTC",
            "params": [
              {
                "name": "amount_btc",
                "type": "BalanceWrapper"
              },
              {
                "name": "currency_id",
                "type": "CurrencyId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultCollateral": {
            "description": "Get the vault's collateral (excluding nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultTotalCollateral": {
            "description": "Get the vault's collateral (including nomination)",
            "params": [
              {
                "name": "vault_id",
                "type": "VaultId"
              }
            ],
            "type": "BalanceWrapper"
          },
          "getVaultsByAccountId": {
            "description": "Get all vaults that are registered using the given account _id",
            "params": [
              {
                "name": "account_id",
                "type": "AccountId"
              }
            ],
            "type": "Vec<VaultId>"
          },
          "getVaultsWithIssuableTokens": {
            "description": "Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          },
          "getVaultsWithRedeemableTokens": {
            "description": "Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",
            "params": [],
            "type": "Vec<(VaultId, BalanceWrapper)>"
          }
        }
      },
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      },
      "instances": {
        "balances": [
          "ksm",
          "kbtc",
          "kint",
          "dot",
          "ibtc",
          "intr"
        ]
      }
    },
    "trustbase": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId"
          }
        }
      ]
    },
    "turing": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {}
        }
      ]
    },
    "uart": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Keys": "SessionKeys2",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "AccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "misc_frozen": "Balance",
              "fee_frozen": "Balance"
            },
            "AccountInfo": "AccountInfoWithDualRefCount",
            "WorkId": "u32",
            "Id": "u32",
            "Name": "Vec<u8>",
            "Value": "Vec<u8>",
            "ReasonIndex": "u32",
            "LottoIndex": "u32",
            "MemberId": "u64",
            "ProposalId": "u64",
            "TokenBalance": "Balance",
            "LotteryKind": {
              "_enum": [
                "Routine",
                "TreasuryFunded(ReasonIndex)"
              ]
            },
            "LottoResult": {
              "_enum": [
                "Routine(AccountId, Balance)",
                "TreasuryFunded(Balance)"
              ]
            },
            "Lottery": {
              "round": "LottoIndex",
              "kind": "LotteryKind",
              "jackpot": "Balance",
              "next_ticket_id": "u32",
              "players": "BTreeMap<AccountId, bool>",
              "tickets": "BTreeMap<u32, AccountId>",
              "result": "Option<LottoResult<AccountId, Balance>>"
            },
            "CurrencyId": {
              "_enum": {
                "Native": "Null",
                "UINK": "Null",
                "DOT": "Null",
                "KSM": "Null",
                "ETH": "Null",
                "Token": "TokenSymbol"
              }
            },
            "TokenSymbol": {
              "_enum": [
                "USDT",
                "DAI"
              ]
            },
            "StorageVersion": {
              "_enum": [
                "V1_0_0",
                "V2_0_0"
              ]
            },
            "CurrencyIdOf": "CurrencyId",
            "Amount": "i128",
            "AmountOf": "Amount",
            "NameData": {
              "value": "Value",
              "owner": "AccountId",
              "expiration": "Option<u32>"
            },
            "Token": {
              "hash": "H256",
              "symbol": "Vec<u8>",
              "total_supply": "Balance"
            },
            "OrderType": {
              "_enum": [
                "Buy",
                "Sell"
              ]
            },
            "OrderStatus": {
              "_enum": [
                "Created",
                "PartialFilled",
                "Filled",
                "Canceled"
              ]
            },
            "TradePair": {
              "hash": "H256",
              "base": "H256",
              "quote": "H256",
              "buy_one_price": "Option<Price>",
              "sell_one_price": "Option<Price>",
              "latest_matched_price": "Option<Price>",
              "one_day_trade_volume": "Option<Price>",
              "one_day_highest_price": "Option<Price>",
              "one_day_lowest_price": "Option<Price>"
            },
            "Price": "u128",
            "LimitOrder": {
              "hash": "H256",
              "base": "H256",
              "quote": "H256",
              "owner": "AccountId",
              "price": "Price",
              "sell_amount": "Balance",
              "buy_amount": "Balance",
              "remained_sell_amount": "Balance",
              "remained_buy_amount": "Balance",
              "otype": "OrderType",
              "status": "OrderStatus"
            },
            "Trade": {
              "hash": "H256",
              "base": "H256",
              "quote": "H256",
              "buyer": "AccountId",
              "seller": "AccountId",
              "maker": "AccountId",
              "taker": "AccountId",
              "otype": "OrderType",
              "price": "Price",
              "base_amount": "Balance",
              "quote_amount": "Balance"
            },
            "OrderLinkedItem": {
              "prev": "Option<Price>",
              "next": "Option<Price>",
              "price": "Option<Price>",
              "orders": "Vec<H256>"
            },
            "CollectionMode": {
              "_enum": {
                "Invalid": null,
                "NFT": "u32",
                "Fungible": "u32",
                "ReFungible": "(u32, u32)"
              }
            },
            "NftItemType": {
              "Collection": "u64",
              "Owner": "AccountId",
              "Data": "Vec<u8>",
              "item_hash": "H160"
            },
            "FungibleItemType": {
              "Collection": "u64",
              "Owner": "AccountId",
              "value": "u128",
              "item_hash": "H160"
            },
            "ApprovePermissions": {
              "approved": "AccountId",
              "amount": "u64"
            },
            "AccessMode": {
              "_enum": [
                "Normal",
                "WhiteList"
              ]
            },
            "SaleOrder": {
              "order_id": "u64",
              "collection_id": "u64",
              "item_id": "u64",
              "currency_id": "CurrencyId",
              "value": "u64",
              "owner": "AccountId",
              "price": "u64"
            },
            "SplitSaleOrder": {
              "order_id": "u64",
              "collection_id": "u64",
              "item_id": "u64",
              "currency_id": "CurrencyId",
              "value": "u64",
              "balance": "u64",
              "owner": "AccountId",
              "price": "u64"
            },
            "SaleOrderHistory": {
              "collection_id": "u64",
              "item_id": "u64",
              "currency_id": "CurrencyId",
              "value": "u64",
              "seller": "AccountId",
              "buyer": "AccountId",
              "price": "u64",
              "buy_time": "BlockNumber"
            },
            "SignatureAuthentication": {
              "collection": "u64",
              "item": "u64",
              "names": "Name",
              "names_owner": "AccountId",
              "sign_time": "BlockNumber",
              "memo": "Vec<u8>",
              "expiration": "Option<BlockNumber>"
            },
            "Ownership": {
              "owner": "AccountId",
              "fraction": "u128"
            },
            "ReFungibleItemType": {
              "Collection": "u64",
              "Owner": "Vec<Ownership<AccountId>>",
              "Data": "Vec<u8>",
              "item_hash": "H160"
            },
            "CollectionType": {
              "Owner": "AccountId",
              "Mode": "CollectionMode",
              "Access": "u8",
              "DecimalPoints": "u32",
              "Name": "Vec<u16>",
              "Description": "Vec<u16>",
              "TokenPrefix": "Vec<u8>",
              "CustomDataSize": "u32",
              "OffchainSchema": "Vec<u8>",
              "Sponsor": "AccountId",
              "UnconfirmedSponsor": "AccountId"
            },
            "Auction": {
              "id": "u64",
              "collection_id": "u64",
              "item_id": "u64",
              "currency_id": "CurrencyId",
              "value": "u64",
              "owner": "AccountId",
              "start_price": "u64",
              "increment": "u64",
              "current_price": "u64",
              "start_time": "BlockNumber",
              "end_time": "BlockNumber"
            },
            "BidHistory": {
              "auction_id": "u64",
              "currency_id": "CurrencyId",
              "bidder": "AccountId",
              "bid_price": "u64",
              "bid_time": "BlockNumber"
            },
            "Pool": {
              "id": "Id",
              "account": "AccountId",
              "acc_rewards_per_share": "Balance",
              "last_reward_block": "BlockNumber",
              "asset_id": "Id",
              "total_balance": "Balance"
            },
            "Staker": {
              "amount": "Balance",
              "reward": "Balance",
              "debt": "Balance"
            },
            "Limits": {
              "max_tx_value": "u128",
              "day_max_limit": "u128",
              "day_max_limit_for_one_address": "u128",
              "max_pending_tx_limit": "u128",
              "min_tx_value": "u128"
            },
            "Royalty": {
              "owner": "AccountId",
              "rate": "u64",
              "expired_at": "BlockNumber"
            },
            "NftCard": {
              "group_id": "u64",
              "collection_id": "u64",
              "item_id": "u64",
              "value": "u64",
              "remaind_value": "u64",
              "draw_start": "u64",
              "draw_end": "u64"
            },
            "BlindboxItem": {
              "id": "u64",
              "owner": "AccountId",
              "card_group": "Vec<u64>",
              "total_count": "u64",
              "remaind_count": "u64",
              "currency_id": "CurrencyId",
              "price": "u64",
              "start_time": "BlockNumber",
              "end_time": "BlockNumber",
              "has_ended": "bool"
            }
          }
        }
      ]
    },
    "unique": {
      "rpc": {
        "unique": {
          "adminlist": {
            "description": "Get admin list",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "allowlist": {
            "description": "Get allowlist",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "accountTokens": {
            "description": "Get tokens owned by account",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u32>"
          },
          "collectionTokens": {
            "description": "Get tokens contained in collection",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u32>"
          },
          "lastTokenId": {
            "description": "Get last token id",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u32"
          },
          "totalSupply": {
            "description": "Get amount of unique collection tokens",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u32"
          },
          "accountBalance": {
            "description": "Get amount of different user tokens",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u32"
          },
          "balance": {
            "description": "Get amount of specific account token",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u128"
          },
          "allowance": {
            "description": "Get allowed amount",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "sender",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "spender",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "u128"
          },
          "tokenOwner": {
            "description": "Get token owner",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "topmostTokenOwner": {
            "description": "Get token owner, in case of nested token - find parent recursive",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<PalletEvmAccountBasicCrossAccountIdRepr>"
          },
          "tokenChildren": {
            "description": "Get tokens nested directly into the token",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsTokenChild>"
          },
          "constMetadata": {
            "description": "Get token constant metadata",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u8>"
          },
          "variableMetadata": {
            "description": "Get token variable metadata",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<u8>"
          },
          "collectionProperties": {
            "description": "Get collection properties",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsProperty>"
          },
          "tokenProperties": {
            "description": "Get token properties",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsProperty>"
          },
          "propertyPermissions": {
            "description": "Get property permissions",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Vec<UpDataStructsPropertyKeyPermission>"
          },
          "tokenData": {
            "description": "Get token data",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "propertyKeys",
                "type": "Vec<String>",
                "isOptional": true
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "UpDataStructsTokenData"
          },
          "tokenExists": {
            "description": "Check if token exists",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "bool"
          },
          "collectionById": {
            "description": "Get collection by specified id",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<UpDataStructsRpcCollection>"
          },
          "collectionStats": {
            "description": "Get collection stats",
            "params": [
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "UpDataStructsCollectionStats"
          },
          "allowed": {
            "description": "Check if user is allowed to use collection",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "bool"
          },
          "nextSponsored": {
            "description": "Get number of blocks when sponsored transaction is available",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "account",
                "type": "PalletEvmAccountBasicCrossAccountIdRepr"
              },
              {
                "name": "tokenId",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<u64>"
          },
          "effectiveCollectionLimits": {
            "description": "Get effective collection limits",
            "params": [
              {
                "name": "collection",
                "type": "u32"
              },
              {
                "name": "at",
                "type": "Hash",
                "isOptional": true
              }
            ],
            "type": "Option<UpDataStructsCollectionLimits>"
          }
        }
      }
    },
    "unit-node": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "RefCount": "u8"
          }
        }
      ]
    },
    "unit-parachain": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "AccountId",
            "LookupSource": "AccountId",
            "RefCount": "u8"
          }
        }
      ]
    },
    "unorthodox": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "Account": {
              "nonce": "U256",
              "balance": "U256"
            },
            "Transaction": {
              "nonce": "U256",
              "action": "String",
              "gas_price": "u64",
              "gas_limit": "u64",
              "value": "U256",
              "input": "Vec<u8>",
              "signature": "Signature"
            },
            "Signature": {
              "v": "u64",
              "r": "H256",
              "s": "H256"
            },
            "XCurrencyId": {
              "chain_id": "ChainId",
              "currency_id": "Bytes"
            },
            "CurrencyIdOf": "CurrencyId",
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol"
              }
            },
            "TokenSymbol": {
              "_enum": [
                "ACA",
                "AUSD",
                "DOT",
                "XBTC",
                "LDOT",
                "RENBTC",
                "SDN",
                "PLM"
              ]
            },
            "AmountOf": "Amount",
            "Amount": "i128",
            "DataVersion": "u64",
            "RequestIdentifier": "u64",
            "SpecIndex": "Vec<u8>",
            "CDP": {
              "liquidation_fee": "Balance",
              "max_collateraization_rate": "U256",
              "stability_fee": "Balance"
            },
            "SocketIndex": "i32",
            "Currency": "Balances",
            "BridgeChainId": "u8",
            "ResourceId": "[u8; 32]",
            "DepositNonce": "u64",
            "ProposalVotes": {
              "votes_for": "Vec<AccountId>",
              "votes_against": "Vec<AccountId>",
              "status": "enum"
            },
            "Erc721Token": {
              "id": "TokenId",
              "metadata": "Vec<u8>"
            },
            "TokenId": "U256"
          }
        }
      ]
    },
    "vanilla": {
      "rpc": {
        "oracle": {
          "getValue": {
            "description": "Retrieves the oracle value for a given key.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "key",
                "type": "OracleKey"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Option<TimestampedValue>",
            "isSubscription": false,
            "jsonrpc": "oracle_getValue",
            "method": "getValue",
            "section": "oracle"
          },
          "getAllValues": {
            "description": "Retrieves all oracle values.",
            "params": [
              {
                "name": "providerId",
                "type": "RpcDataProviderId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "Vec<(OracleKey, Option<TimestampedValue>)>",
            "isSubscription": false,
            "jsonrpc": "oracle_getAllValues",
            "method": "getAllValues",
            "section": "oracle"
          }
        },
        "tokens": {
          "queryExistentialDeposit": {
            "description": "Query Existential Deposit for a given currency.",
            "params": [
              {
                "name": "currencyId",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "NumberOrHex",
            "isSubscription": false,
            "jsonrpc": "tokens_queryExistentialDeposit",
            "method": "queryExistentialDeposit",
            "section": "tokens"
          }
        },
        "loans": {
          "getCollateralLiquidity": {
            "description": "Retrieves collateral liquidity for the given user.",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Liquidity, Shortfall, Liquidity, Shortfall)",
            "isSubscription": false,
            "jsonrpc": "loans_getCollateralLiquidity",
            "method": "getCollateralLiquidity",
            "section": "loans"
          },
          "getLiquidationThresholdLiquidity": {
            "description": "Retrieves liquidation threshold liquidity for the given user.",
            "params": [
              {
                "name": "account",
                "type": "AccountId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Liquidity, Shortfall, Liquidity, Shortfall)",
            "isSubscription": false,
            "jsonrpc": "loans_getLiquidationThresholdLiquidity",
            "method": "getLiquidationThresholdLiquidity",
            "section": "loans"
          },
          "getMarketStatus": {
            "description": "Retrieves market status data for a given asset id.",
            "params": [
              {
                "name": "asset_id",
                "type": "CurrencyId"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",
            "isSubscription": false,
            "jsonrpc": "loans_getMarketStatus",
            "method": "getMarketStatus",
            "section": "loans"
          }
        },
        "router": {
          "getBestRoute": {
            "description": "Returns the route that results in the largest amount out for amount in",
            "params": [
              {
                "name": "amount",
                "type": "Balance"
              },
              {
                "name": "token_in",
                "type": "CurrencyId"
              },
              {
                "name": "token_out",
                "type": "CurrencyId"
              },
              {
                "name": "reversed",
                "type": "bool"
              },
              {
                "name": "at",
                "type": "BlockHash",
                "isHistoric": true,
                "isOptional": true
              }
            ],
            "type": "(Vec<CurrencyId>, FixedU128)",
            "isSubscription": false,
            "jsonrpc": "router_getBestRoute",
            "method": "getBestRoute",
            "section": "router"
          }
        }
      },
      "instances": {
        "council": [
          "generalCouncil"
        ]
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "CallOf": "Call",
            "DispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "ScheduleTaskIndex": "u32",
            "DelayedOrigin": {
              "delay": "BlockNumber",
              "origin": "PalletsOrigin"
            },
            "AuthorityOrigin": "DelayedOrigin",
            "StorageValue": "Vec<u8>",
            "GraduallyUpdate": {
              "key": "StorageKey",
              "targetValue": "StorageValue",
              "perBlock": "StorageValue"
            },
            "StorageKeyBytes": "Vec<u8>",
            "StorageValueBytes": "Vec<u8>",
            "RpcDataProviderId": "Text",
            "DataProviderId": "u8",
            "TimestampedValue": {
              "value": "OracleValue",
              "timestamp": "Moment"
            },
            "TimestampedValueOf": "TimestampedValue",
            "OrderedSet": "Vec<AccountId>",
            "OrmlAccountData": {
              "free": "Balance",
              "reserved": "Balance",
              "frozen": "Balance"
            },
            "OrmlBalanceLock": {
              "amount": "Balance",
              "id": "LockIdentifier"
            },
            "AuctionInfo": {
              "bid": "Option<(AccountId, Balance)>",
              "start": "BlockNumber",
              "end": "Option<BlockNumber>"
            },
            "DelayedDispatchTime": {
              "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
              }
            },
            "DispatchId": "u32",
            "Price": "FixedU128",
            "OrmlVestingSchedule": {
              "start": "BlockNumber",
              "period": "BlockNumber",
              "periodCount": "u32",
              "perPeriod": "Compact<Balance>"
            },
            "VestingScheduleOf": "OrmlVestingSchedule",
            "OrmlCurrencyId": "u8",
            "PoolInfo": {
              "isActive": "bool",
              "totalDeposited": "Balance",
              "unlockHeight": "BlockNumber",
              "coolDownDuration": "BlockNumber",
              "rewardDuration": "BlockNumber",
              "periodFinish": "BlockNumber",
              "lastUpdateBlock": "BlockNumber",
              "rewardRate": "Balance",
              "rewardPerShareStored": "Balance"
            },
            "CompactBalance": "Compact<Balance>",
            "PoolInfoV0": {
              "totalShares": "Compact<Share>",
              "totalRewards": "CompactBalance",
              "totalWithdrawnRewards": "CompactBalance"
            },
            "Share": "u128",
            "OracleValue": "Price",
            "Deposits": {
              "voucherBalance": "Balance",
              "isCollateral": "bool"
            },
            "BorrowSnapshot": {
              "principal": "Balance",
              "borrowIndex": "u128"
            },
            "EarnedSnapshot": {
              "totalEarnedPrior": "Balance",
              "exchangeRatePrior": "u128"
            },
            "JumpModel": {
              "baseRate": "Rate",
              "jumpRate": "Rate",
              "fullRate": "Rate",
              "jumpUtilization": "Ratio"
            },
            "CurveModel": {
              "baseRate": "Rate"
            },
            "InterestRateModel": {
              "_enum": {
                "JumpModel": "JumpModel",
                "CurveModel": "CurveModel"
              }
            },
            "Market": {
              "collateralFactor": "Ratio",
              "liquidationThreshold": "Ratio",
              "reserveFactor": "Ratio",
              "closeFactor": "Ratio",
              "liquidateIncentive": "Rate",
              "liquidateIncentiveReservedFactor": "Ratio",
              "rateModel": "InterestRateModel",
              "state": "MarketState",
              "supplyCap": "Balance",
              "borrowCap": "Balance",
              "ptokenId": "CurrencyId"
            },
            "MarketState": {
              "_enum": [
                "Active",
                "Pending",
                "Supervision"
              ]
            },
            "RewardMarketState": {
              "index": "Balance",
              "block": "BlockNumber"
            },
            "Liquidity": "FixedU128",
            "Shortfall": "FixedU128",
            "ReservableAmount": {
              "total": "Balance",
              "reserved": "Balance"
            },
            "MatchingLedger": {
              "totalStakeAmount": "ReservableAmount",
              "totalUnstakeAmount": "ReservableAmount"
            },
            "UnlockChunk": {
              "value": "Balance",
              "era": "EraIndex"
            },
            "StakingLedger": {
              "stash": "AccountId",
              "total": "Balance",
              "active": "Balance",
              "unlocking": "Vec<UnlockChunk>",
              "claimedRewards": "Vec<EraIndex>"
            },
            "DerivativeIndex": "u16",
            "Pool": {
              "baseAmount": "Balance",
              "quoteAmount": "Balance",
              "baseAmountLast": "Balance",
              "quoteAmountLast": "Balance",
              "lpTokenId": "AssetId",
              "blockTimestampLast": "BlockNumber",
              "price0CumulativeLast": "Balance",
              "price1CumulativeLast": "Balance"
            },
            "Amount": "i128",
            "AmountOf": "Amount",
            "Rate": "FixedU128",
            "Ratio": "Permill",
            "Timestamp": "u64",
            "PriceDetail": "(Price, Timestamp)",
            "CurrencyId": "AssetId",
            "CurrencyIdOf": "CurrencyId",
            "Currency": "CurrencyId",
            "AssetIdOf": "AssetId",
            "OracleKey": "AssetId",
            "BoundedBalance": "BoundedVec<(Balance, BlockNumber), u32>",
            "UserPosition": {
              "depositBalance": "Balance",
              "lockBalanceItems": "BoundedBalance",
              "rewardAmount": "Balance",
              "rewardPerSharePaid": "Balance"
            },
            "Route": "Vec<(AssetId, AssetId)>",
            "VaultPhase": {
              "_enum": [
                "Pending",
                "Contributing",
                "Closed",
                "Failed",
                "Succeeded",
                "Expired"
              ]
            },
            "ContributionStrategy": {
              "_enum": [
                "XCM",
                "XCMPROXY"
              ]
            },
            "ChildStorageKind": {
              "_enum": [
                "Pending",
                "Flying",
                "Contributed"
              ]
            },
            "TrieIndex": "u32",
            "LeasePeriod": "BlockNumber",
            "Vault": {
              "ctoken": "AssetId",
              "phase": "VaultPhase",
              "contributed": "Balance",
              "pending": "Balance",
              "flying": "Balance",
              "contributionStrategy": "ContributionStrategy",
              "cap": "Balance",
              "endBlock": "BlockNumber",
              "trieIndex": "TrieIndex",
              "leaseStart": "LeasePeriod",
              "leaseEnd": "LeasePeriod"
            },
            "XcmWeightFeeMisc": {
              "weight": "Weight",
              "fee": "Balance"
            },
            "XcmCall": {
              "_enum": [
                "Bond",
                "BondExtra",
                "Unbond",
                "Rebond",
                "WithdrawUnbonded",
                "Nominate",
                "Contribute",
                "Withdraw",
                "AddMemo"
              ]
            },
            "BridgeToken": {
              "id": "CurrencyId",
              "external": "bool",
              "fee": "Balance"
            },
            "ProposalStatus": {
              "_enum": [
                "Initiated",
                "Approved",
                "Rejected"
              ]
            },
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "TAssetBalance": "u128"
          }
        }
      ],
      "alias": {
        "tokens": {
          "AccountData": "OrmlAccountData",
          "BalanceLock": "OrmlBalanceLock"
        }
      }
    },
    "vodka": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "NameHash": "H256"
          }
        }
      ]
    },
    "web3games-node": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Address": "MultiAddress",
            "LookupSource": "MultiAddress",
            "TokenId": "u64",
            "InstanceId": "u64",
            "ExchangeId": "u32",
            "TokenSymbol": {
              "_enum": {
                "W3G": 0,
                "DOT": 1,
                "ACA": 2,
                "AUSD": 3
              }
            },
            "CurrencyId": {
              "_enum": {
                "Token": "TokenSymbol"
              }
            },
            "CurrencyIdOf": "CurrencyId",
            "CollectionId": "u64",
            "AssetId": "64"
          }
        }
      ]
    },
    "zcloak-network": {
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Class": "Vec<u8>",
            "TaskStatus": {
              "_enum": [
                "JustCreated",
                "Verifying",
                "VerifiedTrue",
                "VerifiedFalse"
              ]
            },
            "Status": {
              "verifiers": "Vec<u32>",
              "ayes": "u32",
              "nays": "u32"
            },
            "VerificationReceipt": {
              "program_hash": "[u8; 32]",
              "passed": "bool",
              "submit_at": "BlockNumber",
              "auth_index": "u32",
              "validator_len": "u32"
            },
            "TaskInfo": {
              "proof_id": "Vec<u8>",
              "inputs": "Vec<u128>",
              "outputs": "Vec<u128>",
              "program_hash": "[u8; 32]",
              "is_task_finish": "Option<TaskStatus>",
              "expiration": "Option<BlockNumber>"
            }
          }
        }
      ]
    },
    "zeitgeist": {
      "alias": {
        "tokens": {
          "AccountData": "TokensAccountData"
        }
      },
      "types": [
        {
          "minmax": [
            0,
            null
          ],
          "types": {
            "Juror": {
              "status": "JurorStatus"
            },
            "JurorStatus": {
              "_enum": [
                "OK",
                "Tardy"
              ]
            },
            "OrderSide": {
              "_enum": [
                "Bid",
                "Ask"
              ]
            },
            "Order": {
              "side": "OrderSide",
              "maker": "AccountId",
              "taker": "Option<AccountId>",
              "asset": "Asset",
              "total": "Balance",
              "price": "Balance",
              "filled": "Balance"
            },
            "MarketCreation": {
              "_enum": [
                "Permissionless",
                "Advised"
              ]
            },
            "MarketPeriod": {
              "_enum": {
                "Block": "Range<BlockNumber>",
                "Timestamp": "Range<Moment>"
              }
            },
            "MarketId": "u128",
            "MarketType": {
              "_enum": {
                "Categorical": "u16",
                "Scalar": "RangeInclusive<u128>"
              }
            },
            "MarketStatus": {
              "_enum": [
                "Proposed",
                "Active",
                "Suspended",
                "Closed",
                "CollectingSubsidy",
                "InsufficientSubsidy",
                "Reported",
                "Disputed",
                "Resolved"
              ]
            },
            "Market": {
              "creator": "AccountId",
              "creation": "MarketCreation",
              "creatorFee": "u8",
              "oracle": "AccountId",
              "metadata": "Vec<u8>",
              "marketType": "MarketType",
              "period": "MarketPeriod",
              "scoringRule": "ScoringRule",
              "status": "MarketStatus",
              "report": "Option<Report>",
              "resolvedOutcome": "Option<OutcomeReport>",
              "disputeMechanism": "MarketDisputeMechanism"
            },
            "ScoringRule": {
              "_enum": [
                "CPMM",
                "RikiddoSigmoidFeeMarketEma"
              ]
            },
            "OutcomeReport": {
              "_enum": {
                "Categorical": "u16",
                "Scalar": "u128"
              }
            },
            "Report": {
              "at": "BlockNumber",
              "by": "AccountId",
              "outcome": "OutcomeReport"
            },
            "MarketDispute": {
              "at": "BlockNumber",
              "by": "AccountId",
              "outcome": "OutcomeReport"
            },
            "MarketDisputeMechanism": {
              "_enum": {
                "Authorized": "AccountId",
                "Court": null,
                "SimpleDisputes": null
              }
            },
            "EmaConfig": {
              "emaPeriod": "Timespan",
              "emaPeriodEstimateAfter": "Option<Timespan>",
              "smoothing": "u128"
            },
            "EmaMarketVolume": {
              "config": "EmaConfig",
              "ema": "u128",
              "multiplier": "u128",
              "lastTime": "UnixTimestamp",
              "state": "MarketVolumeState",
              "startTime": "UnixTimestamp",
              "volumesPerPeriod": "u128"
            },
            "FeeSigmoid": {
              "config": "FeeSigmoidConfig"
            },
            "FeeSigmoidConfig": {
              "m": "i128",
              "p": "i128",
              "n": "i128",
              "initialFee": "i128",
              "minRevenue": "i128"
            },
            "MarketVolumeState": {
              "_enum": [
                "Uninitialized",
                "DataCollectionStarted",
                "DataCollected"
              ]
            },
            "Rikiddo": {
              "config": "RikiddoConfig",
              "fees": "FeeSigmoid",
              "maShort": "EmaMarketVolume",
              "maLong": "EmaMarketVolume"
            },
            "RikiddoConfig": {
              "initialFee": "i128",
              "log2E": "i128"
            },
            "Timespan": {
              "_enum": {
                "Seconds": "u32",
                "Minutes": "u32",
                "Hours": "u32",
                "Days": "u16",
                "Weeks": "u16"
              }
            },
            "UnixTimestamp": "u64",
            "Pool": {
              "assets": "Vec<Asset>",
              "baseAsset": "Asset",
              "marketId": "MarketId",
              "poolStatus": "PoolStatus",
              "scoringRule": "ScoringRule",
              "swapFee": "Option<Balance>",
              "totalSubsidy": "Option<Balance>",
              "totalWeight": "Option<u128>",
              "weights": "Option<BTreeMap<Asset, u128>>"
            },
            "CommonPoolEventParams": {
              "poolId": "u128",
              "who": "AccountId"
            },
            "PoolAssetEvent": {
              "asset": "Asset",
              "bound": "Balance",
              "cpep": "CommonPoolEventParams<AccountId>",
              "transferred": "Balance"
            },
            "PoolAssetsEvent": {
              "assets": "Vec<Asset>",
              "bounds": "Vec<Balance>",
              "cpep": "CommonPoolEventParams<AccountId>",
              "transferred": "Vec<Balance>"
            },
            "PoolId": "u128",
            "PoolStatus": {
              "_enum": [
                "Active",
                "CollectingSubsidy",
                "Closed",
                "Clean",
                "Initialized"
              ]
            },
            "SubsidyUntil": {
              "marketId": "MarketId",
              "period": "MarketPeriod"
            },
            "SwapEvent": {
              "assetAmountIn": "Balance",
              "assetAmountOut": "Balance",
              "assetBound": "Balance",
              "assetIn": "Asset",
              "assetOut": "Asset",
              "cpep": "CommonPoolEventParams<AccountId>",
              "maxPrice": "Balance"
            },
            "Address": "MultiAddress",
            "Amount": "i128",
            "AmountOf": "i128",
            "Asset": {
              "_enum": {
                "CategoricalOutcome": "(MarketId, CategoryIndex)",
                "ScalarOutcome": "(MarketId, ScalarPosition)",
                "CombinatorialOutcome": null,
                "PoolShare": "u128",
                "Ztg": null
              }
            },
            "AuthorId": "AccountId",
            "SerdeWrapper": "Balance",
            "BlockNumber": "u64",
            "Bond": {
              "owner": "AccountId",
              "amount": "Balance"
            },
            "CategoryIndex": "u16",
            "Collator2": {
              "id": "AccountId",
              "bond": "Balance",
              "nominators": "Vec<AccountId>",
              "topNominators": "Vec<Bond>",
              "bottomNominators": "Vec<Bond>",
              "totalCounted": "Balance",
              "totalBacking": "Balance",
              "state": "CollatorStatus"
            },
            "CollatorSnapshot": {
              "bond": "Balance",
              "delegations": "Vec<Bond>",
              "total": "Balance"
            },
            "CollatorStatus": {
              "_enum": {
                "Active": null,
                "Idle": null,
                "Leaving": "RoundIndex"
              }
            },
            "Currency": "Asset",
            "CurrencyIdOf": "Asset",
            "CurrencyId": "Asset",
            "DelegatorStatus": {
              "_enum": {
                "Active": null,
                "Leaving": "RoundIndex"
              }
            },
            "ExitQ": {
              "candidates": "Vec<AccountId>",
              "nominatorsLeaving": "Vec<AccountId>",
              "candidateSchedule": "Vec<(AccountId, RoundIndex)>",
              "nominatorSchedule": "Vec<(AccountId, Option<AccountId>, RoundIndex)>"
            },
            "Index": "u64",
            "InflationInfo": {
              "expect": "RangeBalance",
              "annual": "RangePerbill",
              "round": "RangePerbill"
            },
            "Lookup": "MultiAddress",
            "MarketIdOf": "u128",
            "MaxRuntimeUsize": "u64",
            "Moment": "u64",
            "MultiHash": {
              "_enum": {
                "Sha3_384": "[u8; 50]"
              }
            },
            "Nominator2": {
              "delegations": "Vec<Bond>",
              "revocations": "Vec<AccountId>",
              "total": "Balance",
              "scheduledRevocationsCount": "u32",
              "scheduledRevocationsTotal": "Balance",
              "status": "DelegatorStatus"
            },
            "NominatorAdded": {
              "_enum": {
                "AddedToTop": "Balance",
                "AddedToBottom": null
              }
            },
            "OrderedSet": "Vec<Bond>",
            "OwnedValuesParams": {
              "participatedBlocks": "BlockNumber",
              "perpetualIncentives": "Balance",
              "totalIncentives": "Balance",
              "totalShares": "Balance"
            },
            "ParachainBondConfig": {
              "account": "AccountId",
              "percent": "Percent"
            },
            "RangeBalance": {
              "min": "Balance",
              "ideal": "Balance",
              "max": "Balance"
            },
            "RangePerbill": {
              "min": "Perbill",
              "ideal": "Perbill",
              "max": "Perbill"
            },
            "RelayChainAccountId": "AccountId32",
            "RewardInfo": {
              "totalReward": "Balance",
              "claimedReward": "Balance"
            },
            "RoundIndex": "u32",
            "RoundInfo": {
              "current": "RoundIndex",
              "first": "BlockNumber",
              "length": "u32"
            },
            "ScalarPosition": {
              "_enum": [
                "Long",
                "Short"
              ]
            },
            "VestingBlockNumber": "u32",
            "TokensAccountData": {
              "free": "Balance",
              "frozen": "Balance",
              "reserved": "Balance"
            }
          }
        }
      ]
    }
  }
} as unknown as OverrideBundleType;
